import { Inject, Injectable, Optional, inject } from '@angular/core';
import { ApolloClient, ApolloLink, InMemoryCache } from '@apollo/client/core';
import { APPLICATION_CONFIG, LOCAL, isURL } from '@ta/utils';
import { BehaviorSubject, catchError, filter, map, switchMap, take, tap, throwError } from 'rxjs';
import { CamServerErrorService } from '../error.service';
import { Logger } from '../logger';
import { GRAPHQL_SERVER_CONFIG } from './public-api';
import * as i0 from "@angular/core";
import * as i1 from "apollo-angular/http";
import * as i2 from "apollo-angular";
export class CamGraphService {
    constructor(_graphConfig, _local, httpLink, apollo) {
        this._graphConfig = _graphConfig;
        this._local = _local;
        this.httpLink = httpLink;
        this.apollo = apollo;
        this.contactsLoaded$ = new BehaviorSubject(false);
        this.isReady$ = new BehaviorSubject(true);
        this._errorServices = inject(CamServerErrorService);
        this._applicationConfig = inject(APPLICATION_CONFIG);
        this._defaultEndpoint = new ApolloLink((operation, forward) => {
            return forward(operation);
        });
        this._cache = new InMemoryCache();
        //  (<any>window).apolloCache = this._cache;
        this.apollo.client = new ApolloClient({
            cache: this._cache,
            link: this._defaultEndpoint,
        });
    }
    clearCache(key) {
        this._cache.evict({
            fieldName: key,
        });
    }
    fetchQueryList(payload, node, context) {
        return this._getWrapper({ context }).pipe(tap(() => Logger.LogInfo('[GraphQL] [Query] fetchQueryList:', {
            payload,
            node,
            context,
        })), switchMap(() => this.apollo.query(this._setupData(payload, context)).pipe(tap(data => Logger.LogInfo('[GraphQL] [Response] fetchQueryList:', {
            data,
            node,
            context,
        })), filter(response => !!response.data), map(response => response.data[node]), catchError((err) => {
            Logger.LogError('[GraphQL] [Error] fetchQueryList:', {
                payload,
                node,
                context,
                message: err.message,
            });
            //this._errorServices.addError(err);
            return throwError(() => err);
        }), catchError((err) => {
            Logger.LogError('[GraphQL] [Error] fetchPagedQueryList:', {
                payload,
                node,
                context,
                message: err.message,
            });
            this._errorServices.addError(payload, err);
            return throwError(() => err);
        }))), take(1));
    }
    fetchPagedQueryList(payload, node, context) {
        Logger.LogInfo('[GraphQL] [Prepare] fetchPagedQueryList:', {
            payload,
            node,
            context,
        });
        return this._getWrapper({ context }).pipe(tap(() => Logger.LogInfo('[GraphQL] [Query] fetchPagedQueryList:', {
            payload,
            node,
            context,
        })), switchMap(() => this.apollo.query(this._setupData(payload, context)).pipe(tap(data => Logger.LogInfo('[GraphQL] [Response] fetchPagedQueryList:', {
            data,
            node,
            context,
        })), filter(response => !!response.data), map(response => response.data[node]), catchError((err) => {
            Logger.LogError('[GraphQL] [Error] fetchPagedQueryList:', {
                payload,
                node,
                context,
                message: err.message,
            });
            this._errorServices.addError(payload, err);
            return throwError(() => err);
        }))), take(1));
    }
    fetchQuery(payload, node, context) {
        return this._getWrapper({ context }).pipe(tap(() => Logger.LogInfo('[GraphQL] [Query] fetchQuery:', {
            payload,
            node,
            context,
        })), switchMap(() => this.apollo.query(this._setupData(payload, context)).pipe(tap(data => Logger.LogInfo('[GraphQL] [Response] fetchQuery:', {
            data,
            node,
            context,
        })), filter(response => !!response.data), map(data => data.data[node]), catchError((err) => {
            Logger.LogError('[GraphQL] [Error] fetchPagedQueryList:', {
                payload,
                node,
                context,
                message: err.message,
            });
            this._errorServices.addError(payload, err);
            return throwError(() => err);
        }))), take(1));
    }
    mutate(payload, mutationName, context, clearCache) {
        Logger.LogInfo('[GraphQL]  [Prepare] mutate', payload, mutationName);
        return this.apollo.mutate(this._setupData(payload, context)).pipe(tap(data => Logger.LogInfo('[GraphQL] [Reponse] mutate', data)), filter(response => !!response.data), tap(() => clearCache?.forEach(cacheKey => this.clearCache(cacheKey))), map(response => {
            return response.data[mutationName];
        }), catchError((err) => {
            Logger.LogError('[GraphQL] [Error] fetchPagedQueryList:', {
                payload,
                context,
                message: err.message,
            });
            this._errorServices.addError(payload, err);
            return throwError(() => err);
        }));
    }
    registerGraphEndpoint(graphEndpoint, options) {
        const url = options?.visitor === true && this._graphConfig.config?.visitor
            ? this._graphConfig.config?.visitor
            : this._graphConfig.config?.url;
        let uri = isURL(graphEndpoint.endpoint) ? graphEndpoint.endpoint : url + graphEndpoint.endpoint;
        if (this._local?.isLocal) {
            if (this._graphConfig.config.local_urls) {
                uri = this._graphConfig.config.local_urls[graphEndpoint.endpoint] ?? uri;
            }
        }
        const newHttpLink = this.httpLink.create({
            headers: graphEndpoint.headers,
            uri: uri,
        });
        this.apollo.client.setLink(this.apollo.client.link.concat(ApolloLink.split(operation => operation.getContext()['clientName'] === graphEndpoint.clientName, newHttpLink)));
    }
    _setupData(payload, context) {
        return { ...payload, ...{ context: { clientName: context } } };
    }
    _getWrapper(data) {
        if (!this._applicationConfig.isCustomerApplication) {
            return this.isReady$;
        }
        if (data?.context === 'userService') {
            return this.isReady$;
        }
        if (data?.context?.includes('Visitor')) {
            return this.isReady$;
        }
        return this.contactsLoaded$.pipe(filter(loaded => loaded));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamGraphService, deps: [{ token: GRAPHQL_SERVER_CONFIG, optional: true }, { token: LOCAL, optional: true }, { token: i1.HttpLink }, { token: i2.Apollo }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamGraphService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamGraphService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [GRAPHQL_SERVER_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LOCAL]
                }] }, { type: i1.HttpLink }, { type: i2.Apollo }] });
//# sourceMappingURL=data:application/json;base64,