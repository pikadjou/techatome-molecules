export class Logger {
    static { this.DEBUG = 0; }
    static { this.INFO = 1; }
    static { this.WARNING = 2; }
    static { this.ERROR = 3; }
    static { this.config = { DEBUG: true, DEBUG_LEVEL: Logger.DEBUG }; }
    static LogDebug(message, data) {
        if (data === undefined) {
            data = '';
        }
        if (Logger.config.DEBUG && Logger.DEBUG >= Logger.config.DEBUG_LEVEL) {
            // tslint:disable-next-line:no-console
            console.debug(message, data);
        }
        this._fsLog('log', message, data);
    }
    static LogInfo(message, ...data) {
        if (Logger.config.DEBUG && Logger.INFO >= Logger.config.DEBUG_LEVEL) {
            // tslint:disable-next-line:no-console
            console.info(message, data);
        }
        this._fsLog('info', message, data);
    }
    static LogWarning(message, data) {
        if (data === undefined) {
            data = '';
        }
        if (Logger.config.DEBUG && Logger.WARNING >= Logger.config.DEBUG_LEVEL) {
            console.warn('/!\\ ' + message + ' /!\\', data);
        }
        this._fsLog('warn', message, data);
    }
    static LogError(message, data) {
        if (data === undefined) {
            data = '';
        }
        if (Logger.config.DEBUG && Logger.ERROR >= Logger.config.DEBUG_LEVEL) {
            console.error('/!\\ ' + message + ' /!\\', data);
        }
        this._fsLog('error', message, data);
    }
    static _fsLog(logLevel, message, data) {
        if (window.FS) {
            window.FS.log(logLevel, `${message} | data: ${JSON.stringify(data)}`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXJ2aWNlcy9sb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLE1BQU07YUFDSCxVQUFLLEdBQVcsQ0FBQyxDQUFDO2FBQ2xCLFNBQUksR0FBVyxDQUFDLENBQUM7YUFDakIsWUFBTyxHQUFXLENBQUMsQ0FBQzthQUNwQixVQUFLLEdBQVcsQ0FBQyxDQUFDO2FBRWxCLFdBQU0sR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUUzRCxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQWUsRUFBRSxJQUE0QjtRQUNsRSxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUN2QixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1osQ0FBQztRQUVELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3JFLHNDQUFzQztZQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWUsRUFBRSxHQUFHLElBQVc7UUFDbkQsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDcEUsc0NBQXNDO1lBQ3RDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlCLENBQUM7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVLENBQ3RCLE9BQWUsRUFDZixJQUE0QjtRQUU1QixJQUFJLElBQUksS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUN2QixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1osQ0FBQztRQUVELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3ZFLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sR0FBRyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEQsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFlLEVBQUUsSUFBVTtRQUNoRCxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUN2QixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1osQ0FBQztRQUVELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3JFLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sR0FBRyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkQsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFnQixFQUFFLE9BQWUsRUFBRSxJQUFVO1FBQ2pFLElBQVUsTUFBTyxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2YsTUFBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQ2xCLFFBQVEsRUFDUixHQUFHLE9BQU8sWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQzdDLENBQUM7UUFDSixDQUFDO0lBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBMb2dnZXIge1xuICBwdWJsaWMgc3RhdGljIERFQlVHOiBOdW1iZXIgPSAwO1xuICBwdWJsaWMgc3RhdGljIElORk86IE51bWJlciA9IDE7XG4gIHB1YmxpYyBzdGF0aWMgV0FSTklORzogTnVtYmVyID0gMjtcbiAgcHVibGljIHN0YXRpYyBFUlJPUjogTnVtYmVyID0gMztcblxuICBwdWJsaWMgc3RhdGljIGNvbmZpZyA9IHsgREVCVUc6IHRydWUsIERFQlVHX0xFVkVMOiBMb2dnZXIuREVCVUcgfTtcblxuICBwdWJsaWMgc3RhdGljIExvZ0RlYnVnKG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IHN0cmluZyB8IE9iamVjdCB8IGFueSk6IHZvaWQge1xuICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRhdGEgPSAnJztcbiAgICB9XG5cbiAgICBpZiAoTG9nZ2VyLmNvbmZpZy5ERUJVRyAmJiBMb2dnZXIuREVCVUcgPj0gTG9nZ2VyLmNvbmZpZy5ERUJVR19MRVZFTCkge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuZGVidWcobWVzc2FnZSwgZGF0YSk7XG4gICAgfVxuICAgIHRoaXMuX2ZzTG9nKCdsb2cnLCBtZXNzYWdlLCBkYXRhKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgTG9nSW5mbyhtZXNzYWdlOiBzdHJpbmcsIC4uLmRhdGE6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKExvZ2dlci5jb25maWcuREVCVUcgJiYgTG9nZ2VyLklORk8gPj0gTG9nZ2VyLmNvbmZpZy5ERUJVR19MRVZFTCkge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuaW5mbyhtZXNzYWdlLCBkYXRhKTtcbiAgICB9XG4gICAgdGhpcy5fZnNMb2coJ2luZm8nLCBtZXNzYWdlLCBkYXRhKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgTG9nV2FybmluZyhcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgZGF0YT86IHN0cmluZyB8IE9iamVjdCB8IGFueVxuICApOiB2b2lkIHtcbiAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBkYXRhID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKExvZ2dlci5jb25maWcuREVCVUcgJiYgTG9nZ2VyLldBUk5JTkcgPj0gTG9nZ2VyLmNvbmZpZy5ERUJVR19MRVZFTCkge1xuICAgICAgY29uc29sZS53YXJuKCcvIVxcXFwgJyArIG1lc3NhZ2UgKyAnIC8hXFxcXCcsIGRhdGEpO1xuICAgIH1cbiAgICB0aGlzLl9mc0xvZygnd2FybicsIG1lc3NhZ2UsIGRhdGEpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBMb2dFcnJvcihtZXNzYWdlOiBzdHJpbmcsIGRhdGE/OiBhbnkpOiB2b2lkIHtcbiAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBkYXRhID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKExvZ2dlci5jb25maWcuREVCVUcgJiYgTG9nZ2VyLkVSUk9SID49IExvZ2dlci5jb25maWcuREVCVUdfTEVWRUwpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJy8hXFxcXCAnICsgbWVzc2FnZSArICcgLyFcXFxcJywgZGF0YSk7XG4gICAgfVxuICAgIHRoaXMuX2ZzTG9nKCdlcnJvcicsIG1lc3NhZ2UsIGRhdGEpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgX2ZzTG9nKGxvZ0xldmVsOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IGFueSkge1xuICAgIGlmICgoPGFueT53aW5kb3cpLkZTKSB7XG4gICAgICAoPGFueT53aW5kb3cpLkZTLmxvZyhcbiAgICAgICAgbG9nTGV2ZWwsXG4gICAgICAgIGAke21lc3NhZ2V9IHwgZGF0YTogJHtKU09OLnN0cmluZ2lmeShkYXRhKX1gXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIl19