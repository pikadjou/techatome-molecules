import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { Subject } from 'rxjs';
import { Logger } from '../../logger';
import { StatusReponse, } from '../response';
import { RequestMap } from './requestMap';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export const SERVER_CONFIG_KEY = new InjectionToken('config_server');
export class CamServerSevice {
    get requestInProgressNumber() {
        return this._correlations.length;
    }
    get isAuthenticated() {
        return this._isAuthenticated;
    }
    set isAuthenticated(value) {
        this._isAuthenticated = value;
        if (this._isAuthenticated) {
            this._retryLoginRequired();
        }
    }
    constructor($http, _config) {
        this.$http = $http;
        this._config = _config;
        this._tempLoginRequiredRequest = [];
        this._tempPendingRequest = [];
        this._correlations = [];
        this._isAuthenticated = false;
        this._onPacketReceived = (id, response) => {
            Logger.LogInfo('[SERVER] Api Reponse:', response);
            this._resolveCorrelation(id, response.body);
        };
        this._resolveCorrelation = (corrId, body) => {
            const correlation = this._correlations.find((item) => item.id === corrId);
            if (!correlation) {
                return;
            }
            let content;
            if (typeof body === 'string') {
                try {
                    content = JSON.parse(body);
                }
                catch (error) {
                    content = body;
                }
            }
            else {
                content = body;
            }
            this._resolveResponseStatus(correlation, content);
            this._correlations = this._correlations.filter((item) => item !== correlation);
            if (this.requestInProgressNumber === 0) {
                this._retryPending();
            }
        };
    }
    registerRoutes(routes) {
        RequestMap.register(routes);
    }
    request(request) {
        const subject = new Subject();
        this._send(subject, request);
        return subject;
    }
    retryRequest(list = []) {
        for (const request of list) {
            this._send(request.subject, request.request);
        }
    }
    _send(subject, request) {
        if (!this._config) {
            return;
        }
        // le user doit etre connecté
        if (request.loginRequired === true && this.isAuthenticated === false) {
            this._tempLoginRequiredRequest.push({
                request: request,
                subject: subject,
            });
            return;
        }
        if (this.requestInProgressNumber >= this._config.pendindRequestId) {
            this._tempPendingRequest.push({ request: request, subject: subject });
            return;
        }
        this._addCorrelation(request.id, request, subject);
        this._sendRequest(request);
    }
    _sendRequest(request) {
        if (!this._config) {
            return;
        }
        const requestConfig = RequestMap.getConfigById(request.type);
        if (!requestConfig) {
            return;
        }
        const url = RequestMap.parseUrl({
            serverUrl: this._config.serverUrl,
            url: requestConfig.url,
            request,
            apiExt: this._config.apiExt,
        });
        Logger.LogInfo('[SERVER] Api Request:', url, request);
        switch (requestConfig.type) {
            case 'GET':
                this._get(url, request);
                break;
            case 'POST':
                this._post(url, request);
                break;
            case 'PUT':
                this._put(url, request);
                break;
            case 'PATCH':
                this._patch(url, request);
                break;
            case 'DELETE':
                this._delete(url, request);
                break;
            case 'FILES':
                this._files(url, request);
                break;
            case 'UPDATEFILES':
                this._updateFiles(url, request);
                break;
            default:
                Logger.LogError('[ERROR] Request not send');
        }
    }
    _addCorrelation(corrId, request, sub) {
        this._correlations.push({ id: corrId, request: request, subject: sub });
    }
    _resolveResponseStatus(correlation, content) {
        Logger.LogInfo('[SERVER] Api Reponse content:', content.Status, content.Content);
        switch (content.Status) {
            case StatusReponse.Successful:
            case StatusReponse.NoContent:
                correlation.subject.next(content.Content);
                correlation.subject.complete();
                correlation.subject.unsubscribe();
                break;
            default:
                correlation.subject.error(content.Content);
                correlation.subject.complete();
                correlation.subject.unsubscribe();
        }
    }
    _retryPending() {
        const list = [...this._tempPendingRequest];
        this._tempPendingRequest = [];
        this.retryRequest(list);
    }
    _retryLoginRequired() {
        const list = [...this._tempLoginRequiredRequest];
        this._tempLoginRequiredRequest = [];
        this.retryRequest(list);
    }
    _get(url, request) {
        this.$http
            .get(url, {
            headers: this._headers(),
            params: { cacheTime: request.cacheTime },
        })
            .subscribe({
            next: (response) => {
                this._onPacketReceived(request.id, this._formatReponse(response, 200));
            },
            error: (message) => {
                this._onPacketReceived(request.id, this._formatReponse(message, message.status));
            },
            complete: () => Logger.LogDebug('API GET CLOSE'),
        });
    }
    _post(url, request) {
        this.$http
            .post(url, request.BrutContent, {
            headers: this._headers(),
        })
            .subscribe({
            next: (response) => this._onPacketReceived(request.id, this._formatReponse(response)),
            error: (message) => this._onPacketReceived(request.id, this._formatReponse(message, message.status)),
            complete: () => Logger.LogDebug('API POST CLOSE'),
        });
    }
    _patch(url, request) {
        this.$http
            .patch(url, request.Content, { headers: this._headers() })
            .subscribe({
            next: (response) => this._onPacketReceived(request.id, this._formatReponse(response)),
            error: (message) => this._onPacketReceived(request.id, this._formatReponse(message, message.status)),
            complete: () => Logger.LogDebug('API PATCH CLOSE'),
        });
    }
    _put(url, request) {
        this.$http
            .put(url, request.Content, { headers: this._headers() })
            .subscribe({
            next: (response) => this._onPacketReceived(request.id, this._formatReponse(response)),
            error: (message) => this._onPacketReceived(request.id, this._formatReponse(message, message.status)),
            complete: () => Logger.LogDebug('API PUT CLOSE'),
        });
    }
    _delete(url, request) {
        this.$http
            .delete(url, { headers: this._headers() })
            .subscribe({
            next: (response) => this._onPacketReceived(request.id, this._formatReponse(response)),
            error: (message) => this._onPacketReceived(request.id, this._formatReponse(message, message.status)),
            complete: () => Logger.LogDebug('API DELETE CLOSE'),
        });
    }
    _files(url, request) {
        this.$http
            .post(url, request.BrutContent.files, {
            headers: this._headers({
                contentType: '',
            }),
        })
            .subscribe({
            next: (response) => {
                this._onPacketReceived(request.id, this._formatReponse(response));
            },
            error: (message) => this._onPacketReceived(request.id, this._formatReponse(message, message.status)),
            complete: () => Logger.LogDebug('API DELETE CLOSE'),
        });
    }
    _updateFiles(url, request) {
        this.$http
            .put(url, request.BrutContent.files, {
            headers: this._headers({
                contentType: '',
            }),
        })
            .subscribe({
            next: (response) => {
                this._onPacketReceived(request.id, this._formatReponse(response));
            },
            error: (message) => this._onPacketReceived(request.id, this._formatReponse(message, message.status)),
            complete: () => Logger.LogDebug('API DELETE CLOSE'),
        });
    }
    _formatReponse(response, status = 200) {
        return { body: { Status: status, Content: response } };
    }
    _headers(option) {
        let headers = new HttpHeaders();
        if (option?.contentType !== '') {
            headers = headers.set('Content-Type', option?.contentType ? option?.contentType : 'application/json');
        }
        headers = headers.set('Access-Control-Allow-Origin', this._config?.serverUrl ?? '');
        Logger.LogInfo('[SERVER] Api Request Header:', headers);
        return headers;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamServerSevice, deps: [{ token: HttpClient }, { token: SERVER_CONFIG_KEY, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamServerSevice, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamServerSevice, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [{ type: i1.HttpClient, decorators: [{
                    type: Inject,
                    args: [HttpClient]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [SERVER_CONFIG_KEY]
                }] }] });
//# sourceMappingURL=data:application/json;base64,