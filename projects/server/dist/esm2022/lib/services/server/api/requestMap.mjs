import { Logger } from '../../logger';
class RequestMapCore {
    constructor() {
        this.mappingApi = {};
    }
    register(routes) {
        for (const key in routes) {
            this.mappingApi[key] = routes[key];
        }
    }
    getConfigById(id) {
        return this._getConfigById(id);
    }
    parseUrl(data) {
        return (this._formatUrl(data.serverUrl, data.url, data.request) +
            '' +
            (data.apiExt ?? ''));
    }
    _getConfigById(id) {
        if (this.mappingApi.hasOwnProperty(id)) {
            return this.mappingApi[id];
        }
        Logger.LogError('No Api Configuration found for: ', id);
        return null;
    }
    _formatUrl(serverUrl, url, request) {
        return url.replace(/{(\w+)}/g, function (match, string) {
            if (request.urlData !== null && request.urlData.hasOwnProperty(string)) {
                return request.urlData[string];
            }
            if (request.BrutContent !== null &&
                request.BrutContent.hasOwnProperty(string)) {
                return request.BrutContent[string];
            }
            if (string === 'ApiUrl') {
                return serverUrl;
            }
            return match;
        });
    }
}
export const RequestMap = new RequestMapCore();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdE1hcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvc2VydmljZXMvc2VydmVyL2FwaS9yZXF1ZXN0TWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFTdEMsTUFBTSxjQUFjO0lBQXBCO1FBQ1MsZUFBVSxHQUFtQixFQUFFLENBQUM7SUFnRHpDLENBQUM7SUE5Q1EsUUFBUSxDQUFDLE1BQXNCO1FBQ3BDLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7WUFDekIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsQ0FBQztJQUNILENBQUM7SUFDTSxhQUFhLENBQUMsRUFBVTtRQUM3QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUNNLFFBQVEsQ0FBQyxJQUtmO1FBQ0MsT0FBTyxDQUNMLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDdkQsRUFBRTtZQUNGLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FDcEIsQ0FBQztJQUNKLENBQUM7SUFFTyxjQUFjLENBQUMsRUFBVTtRQUMvQixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDdkMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLENBQUM7UUFDRCxNQUFNLENBQUMsUUFBUSxDQUFDLGtDQUFrQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVPLFVBQVUsQ0FBQyxTQUFpQixFQUFFLEdBQVcsRUFBRSxPQUFnQjtRQUNqRSxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFVBQVUsS0FBSyxFQUFFLE1BQU07WUFDcEQsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLElBQUksSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO2dCQUN2RSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakMsQ0FBQztZQUNELElBQ0UsT0FBTyxDQUFDLFdBQVcsS0FBSyxJQUFJO2dCQUM1QixPQUFPLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFDMUMsQ0FBQztnQkFDRCxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckMsQ0FBQztZQUNELElBQUksTUFBTSxLQUFLLFFBQVEsRUFBRSxDQUFDO2dCQUN4QixPQUFPLFNBQVMsQ0FBQztZQUNuQixDQUFDO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vLi4vbG9nZ2VyJztcbmltcG9ydCB7IFJlcXVlc3QgfSBmcm9tICcuLi9yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBJUmVxdWVzdE1hcCB7XG4gIHR5cGU6ICdQT1NUJyB8ICdHRVQnIHwgJ0RFTEVURScgfCAnUFVUJyB8ICdQQVRDSCcgfCAnRklMRVMnIHwgJ1VQREFURUZJTEVTJztcbiAgdXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIE1hcHBpbmdBcGlUeXBlID0geyBbaW5kZXg6IHN0cmluZ106IElSZXF1ZXN0TWFwIH07XG5jbGFzcyBSZXF1ZXN0TWFwQ29yZSB7XG4gIHB1YmxpYyBtYXBwaW5nQXBpOiBNYXBwaW5nQXBpVHlwZSA9IHt9O1xuXG4gIHB1YmxpYyByZWdpc3Rlcihyb3V0ZXM6IE1hcHBpbmdBcGlUeXBlKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcm91dGVzKSB7XG4gICAgICB0aGlzLm1hcHBpbmdBcGlba2V5XSA9IHJvdXRlc1trZXldO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgZ2V0Q29uZmlnQnlJZChpZDogc3RyaW5nKTogSVJlcXVlc3RNYXAgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0Q29uZmlnQnlJZChpZCk7XG4gIH1cbiAgcHVibGljIHBhcnNlVXJsKGRhdGE6IHtcbiAgICBzZXJ2ZXJVcmw6IHN0cmluZztcbiAgICB1cmw6IHN0cmluZztcbiAgICByZXF1ZXN0OiBSZXF1ZXN0O1xuICAgIGFwaUV4dD86IHN0cmluZztcbiAgfSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX2Zvcm1hdFVybChkYXRhLnNlcnZlclVybCwgZGF0YS51cmwsIGRhdGEucmVxdWVzdCkgK1xuICAgICAgJycgK1xuICAgICAgKGRhdGEuYXBpRXh0ID8/ICcnKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIF9nZXRDb25maWdCeUlkKGlkOiBzdHJpbmcpOiBJUmVxdWVzdE1hcCB8IG51bGwge1xuICAgIGlmICh0aGlzLm1hcHBpbmdBcGkuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXBwaW5nQXBpW2lkXTtcbiAgICB9XG4gICAgTG9nZ2VyLkxvZ0Vycm9yKCdObyBBcGkgQ29uZmlndXJhdGlvbiBmb3VuZCBmb3I6ICcsIGlkKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgX2Zvcm1hdFVybChzZXJ2ZXJVcmw6IHN0cmluZywgdXJsOiBzdHJpbmcsIHJlcXVlc3Q6IFJlcXVlc3QpOiBzdHJpbmcge1xuICAgIHJldHVybiB1cmwucmVwbGFjZSgveyhcXHcrKX0vZywgZnVuY3Rpb24gKG1hdGNoLCBzdHJpbmcpIHtcbiAgICAgIGlmIChyZXF1ZXN0LnVybERhdGEgIT09IG51bGwgJiYgcmVxdWVzdC51cmxEYXRhLmhhc093blByb3BlcnR5KHN0cmluZykpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QudXJsRGF0YVtzdHJpbmddO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICByZXF1ZXN0LkJydXRDb250ZW50ICE9PSBudWxsICYmXG4gICAgICAgIHJlcXVlc3QuQnJ1dENvbnRlbnQuaGFzT3duUHJvcGVydHkoc3RyaW5nKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0LkJydXRDb250ZW50W3N0cmluZ107XG4gICAgICB9XG4gICAgICBpZiAoc3RyaW5nID09PSAnQXBpVXJsJykge1xuICAgICAgICByZXR1cm4gc2VydmVyVXJsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBSZXF1ZXN0TWFwID0gbmV3IFJlcXVlc3RNYXBDb3JlKCk7XG4iXX0=