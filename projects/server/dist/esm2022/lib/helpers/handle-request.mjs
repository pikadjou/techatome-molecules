import { isNonNullable } from '@ta/utils';
import { BehaviorSubject, filter, map, tap } from 'rxjs';
export class HandleComplexRequest {
    constructor() {
        this.data$ = new BehaviorSubject({});
    }
    fetch(id, subscriber) {
        return subscriber.pipe(filter(data => !!data), tap(entity => {
            const entities = this.data$.getValue();
            entities[id] = entity;
            this.data$.next(entities);
        }));
    }
    add(id, item) {
        const entities = this.data$.getValue();
        if (entities[id]) {
            this.update(id, item);
            return;
        }
        entities[id] = item;
        this.data$.next(entities);
    }
    update(id, item, merge = true) {
        const entities = this.data$.getValue();
        if (!entities[id]) {
            return;
        }
        entities[id] = merge ? { ...entities[id], ...item } : item;
        this.data$.next(entities);
    }
    get(key) {
        return this.data$.getValue()[key] ?? null;
    }
    get$(key) {
        return this.data$.pipe(map(data => data[key]), filter(data => !!data));
    }
}
export class HandleSimpleRequest {
    constructor() {
        this.data$ = new BehaviorSubject(null);
    }
    fetch(subscriber) {
        return subscriber.pipe(filter(isNonNullable), tap(entity => {
            this.data$.next(entity);
        }));
    }
    get() {
        return this.data$.getValue() ?? null;
    }
    get$() {
        return this.data$.pipe(filter(data => !!data));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlLXJlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2hlbHBlcnMvaGFuZGxlLXJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUMxQyxPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXJFLE1BQU0sT0FBTyxvQkFBb0I7SUFHL0I7UUFGTyxVQUFLLEdBQUcsSUFBSSxlQUFlLENBQXlCLEVBQUUsQ0FBQyxDQUFDO0lBRWhELENBQUM7SUFFVCxLQUFLLENBQUMsRUFBVSxFQUFFLFVBQXlCO1FBQ2hELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUN0QixHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDWCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3ZDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUM7WUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFTSxHQUFHLENBQUMsRUFBVSxFQUFFLElBQU87UUFDNUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUV2QyxJQUFJLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3RCLE9BQU87UUFDVCxDQUFDO1FBQ0QsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBQ00sTUFBTSxDQUFDLEVBQVUsRUFBRSxJQUFPLEVBQUUsUUFBaUIsSUFBSTtRQUN0RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRXZDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNsQixPQUFPO1FBQ1QsQ0FBQztRQUNELFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzNELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFDTSxHQUFHLENBQUMsR0FBVztRQUNwQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDO0lBQzVDLENBQUM7SUFFTSxJQUFJLENBQUMsR0FBVztRQUNyQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNwQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUN2QixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLG1CQUFtQjtJQUc5QjtRQUZPLFVBQUssR0FBRyxJQUFJLGVBQWUsQ0FBVyxJQUFJLENBQUMsQ0FBQztJQUVwQyxDQUFDO0lBRVQsS0FBSyxDQUFDLFVBQTRDO1FBQ3ZELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FDcEIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUNyQixHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDWCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUNNLEdBQUc7UUFDUixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxDQUFDO0lBQ3ZDLENBQUM7SUFFTSxJQUFJO1FBQ1QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05vbk51bGxhYmxlIH0gZnJvbSAnQHRhL3V0aWxzJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgZmlsdGVyLCBtYXAsIHRhcCB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgY2xhc3MgSGFuZGxlQ29tcGxleFJlcXVlc3Q8VD4ge1xuICBwdWJsaWMgZGF0YSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHsgW2luZGV4OiBzdHJpbmddOiBUIH0+KHt9KTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgcHVibGljIGZldGNoKGlkOiBzdHJpbmcsIHN1YnNjcmliZXI6IE9ic2VydmFibGU8VD4pIHtcbiAgICByZXR1cm4gc3Vic2NyaWJlci5waXBlKFxuICAgICAgZmlsdGVyKGRhdGEgPT4gISFkYXRhKSxcbiAgICAgIHRhcChlbnRpdHkgPT4ge1xuICAgICAgICBjb25zdCBlbnRpdGllcyA9IHRoaXMuZGF0YSQuZ2V0VmFsdWUoKTtcbiAgICAgICAgZW50aXRpZXNbaWRdID0gZW50aXR5O1xuICAgICAgICB0aGlzLmRhdGEkLm5leHQoZW50aXRpZXMpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGFkZChpZDogc3RyaW5nLCBpdGVtOiBUKSB7XG4gICAgY29uc3QgZW50aXRpZXMgPSB0aGlzLmRhdGEkLmdldFZhbHVlKCk7XG5cbiAgICBpZiAoZW50aXRpZXNbaWRdKSB7XG4gICAgICB0aGlzLnVwZGF0ZShpZCwgaXRlbSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVudGl0aWVzW2lkXSA9IGl0ZW07XG4gICAgdGhpcy5kYXRhJC5uZXh0KGVudGl0aWVzKTtcbiAgfVxuICBwdWJsaWMgdXBkYXRlKGlkOiBzdHJpbmcsIGl0ZW06IFQsIG1lcmdlOiBib29sZWFuID0gdHJ1ZSkge1xuICAgIGNvbnN0IGVudGl0aWVzID0gdGhpcy5kYXRhJC5nZXRWYWx1ZSgpO1xuXG4gICAgaWYgKCFlbnRpdGllc1tpZF0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZW50aXRpZXNbaWRdID0gbWVyZ2UgPyB7IC4uLmVudGl0aWVzW2lkXSwgLi4uaXRlbSB9IDogaXRlbTtcbiAgICB0aGlzLmRhdGEkLm5leHQoZW50aXRpZXMpO1xuICB9XG4gIHB1YmxpYyBnZXQoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhJC5nZXRWYWx1ZSgpW2tleV0gPz8gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQkKGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YSQucGlwZShcbiAgICAgIG1hcChkYXRhID0+IGRhdGFba2V5XSksXG4gICAgICBmaWx0ZXIoZGF0YSA9PiAhIWRhdGEpXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSGFuZGxlU2ltcGxlUmVxdWVzdDxUPiB7XG4gIHB1YmxpYyBkYXRhJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8VCB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBwdWJsaWMgZmV0Y2goc3Vic2NyaWJlcjogT2JzZXJ2YWJsZTxUIHwgdW5kZWZpbmVkIHwgbnVsbD4pIHtcbiAgICByZXR1cm4gc3Vic2NyaWJlci5waXBlKFxuICAgICAgZmlsdGVyKGlzTm9uTnVsbGFibGUpLFxuICAgICAgdGFwKGVudGl0eSA9PiB7XG4gICAgICAgIHRoaXMuZGF0YSQubmV4dChlbnRpdHkpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG4gIHB1YmxpYyBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YSQuZ2V0VmFsdWUoKSA/PyBudWxsO1xuICB9XG5cbiAgcHVibGljIGdldCQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YSQucGlwZShmaWx0ZXIoZGF0YSA9PiAhIWRhdGEpKTtcbiAgfVxufVxuIl19