{"version":3,"file":"ta-server.mjs","sources":["../../src/lib/services/graphql/models/graphSchema.ts","../../src/lib/services/dto/keyvalue.ts","../../src/lib/helpers/handle-request.ts","../../src/lib/services/logger.ts","../../src/lib/services/server/api/requestMap.ts","../../src/lib/services/server/response.ts","../../src/lib/services/server/api/server.service.ts","../../src/lib/services/graphql/models/graphConfig.ts","../../src/lib/services/graphql/helpers/queries.ts","../../src/lib/services/graphql/helpers/mutations.ts","../../src/lib/services/error.service.ts","../../src/lib/services/graphql/graph.service.ts","../../src/lib/services/server/baseService.ts","../../src/lib/services/server/cacheInterceptor.ts","../../src/lib/types/cache.ts","../../src/lib/services/server/request.ts","../../src/lib/services/strapi/config.ts","../../src/lib/services/strapi/strapi.service.ts","../../src/lib/services/strapi/baseStrapi.service.ts","../../src/lib/services/strapi/dto/base.ts","../../src/lib/services/server/token.ts","../../src/lib/services/server/tenantInterceptor.ts","../../src/lib/provider.ts","../../src/lib/server.module.ts","../../src/public-api.ts","../../src/ta-server.ts"],"sourcesContent":["export class GraphSchema<T> {\n  constructor(private _fields: Array<keyof T>) {}\n\n  get(field: keyof T) {\n    return this._fields.find((x) => x === field);\n  }\n}\n","import { GraphSchema } from '../graphql/models/graphSchema';\n\nexport interface KeyValue {\n  key: string;\n  value: string;\n}\n\nexport const keyValueProps = new GraphSchema<KeyValue>(['key', 'value']);\n","import { isNonNullable } from '@ta/utils';\nimport { BehaviorSubject, Observable, filter, map, tap } from 'rxjs';\n\nexport class HandleComplexRequest<T> {\n  public data$ = new BehaviorSubject<{ [index: string]: T }>({});\n\n  constructor() {}\n\n  public fetch(id: string, subscriber: Observable<T>) {\n    return subscriber.pipe(\n      filter(data => !!data),\n      tap(entity => {\n        const entities = this.data$.getValue();\n        entities[id] = entity;\n        this.data$.next(entities);\n      })\n    );\n  }\n\n  public add(id: string, item: T) {\n    const entities = this.data$.getValue();\n\n    if (entities[id]) {\n      this.update(id, item);\n      return;\n    }\n    entities[id] = item;\n    this.data$.next(entities);\n  }\n  public update(id: string, item: T, merge: boolean = true) {\n    const entities = this.data$.getValue();\n\n    if (!entities[id]) {\n      return;\n    }\n    entities[id] = merge ? { ...entities[id], ...item } : item;\n    this.data$.next(entities);\n  }\n  public get(key: string) {\n    return this.data$.getValue()[key] ?? null;\n  }\n\n  public get$(key: string) {\n    return this.data$.pipe(\n      map(data => data[key]),\n      filter(data => !!data)\n    );\n  }\n}\n\nexport class HandleSimpleRequest<T> {\n  public data$ = new BehaviorSubject<T | null>(null);\n\n  constructor() {}\n\n  public fetch(subscriber: Observable<T | undefined | null>) {\n    return subscriber.pipe(\n      filter(isNonNullable),\n      tap(entity => {\n        this.data$.next(entity);\n      })\n    );\n  }\n  public get() {\n    return this.data$.getValue() ?? null;\n  }\n\n  public get$() {\n    return this.data$.pipe(filter(data => !!data));\n  }\n}\n","export class Logger {\n  public static DEBUG: Number = 0;\n  public static INFO: Number = 1;\n  public static WARNING: Number = 2;\n  public static ERROR: Number = 3;\n\n  public static config = { DEBUG: true, DEBUG_LEVEL: Logger.DEBUG };\n\n  public static LogDebug(message: string, data?: string | Object | any): void {\n    if (data === undefined) {\n      data = '';\n    }\n\n    if (Logger.config.DEBUG && Logger.DEBUG >= Logger.config.DEBUG_LEVEL) {\n      // tslint:disable-next-line:no-console\n      console.debug(message, data);\n    }\n    this._fsLog('log', message, data);\n  }\n\n  public static LogInfo(message: string, ...data: any[]): void {\n    if (Logger.config.DEBUG && Logger.INFO >= Logger.config.DEBUG_LEVEL) {\n      // tslint:disable-next-line:no-console\n      console.info(message, data);\n    }\n    this._fsLog('info', message, data);\n  }\n\n  public static LogWarning(\n    message: string,\n    data?: string | Object | any\n  ): void {\n    if (data === undefined) {\n      data = '';\n    }\n\n    if (Logger.config.DEBUG && Logger.WARNING >= Logger.config.DEBUG_LEVEL) {\n      console.warn('/!\\\\ ' + message + ' /!\\\\', data);\n    }\n    this._fsLog('warn', message, data);\n  }\n\n  public static LogError(message: string, data?: any): void {\n    if (data === undefined) {\n      data = '';\n    }\n\n    if (Logger.config.DEBUG && Logger.ERROR >= Logger.config.DEBUG_LEVEL) {\n      console.error('/!\\\\ ' + message + ' /!\\\\', data);\n    }\n    this._fsLog('error', message, data);\n  }\n\n  private static _fsLog(logLevel: string, message: string, data?: any) {\n    if ((<any>window).FS) {\n      (<any>window).FS.log(\n        logLevel,\n        `${message} | data: ${JSON.stringify(data)}`\n      );\n    }\n  }\n}\n","import { Logger } from '../../logger';\nimport { Request } from '../request';\n\nexport interface IRequestMap {\n  type: 'POST' | 'GET' | 'DELETE' | 'PUT' | 'PATCH' | 'FILES' | 'UPDATEFILES';\n  url: string;\n}\n\nexport type MappingApiType = { [index: string]: IRequestMap };\nclass RequestMapCore {\n  public mappingApi: MappingApiType = {};\n\n  public register(routes: MappingApiType) {\n    for (const key in routes) {\n      this.mappingApi[key] = routes[key];\n    }\n  }\n  public getConfigById(id: string): IRequestMap | null {\n    return this._getConfigById(id);\n  }\n  public parseUrl(data: {\n    serverUrl: string;\n    url: string;\n    request: Request;\n    apiExt?: string;\n  }): string {\n    return (\n      this._formatUrl(data.serverUrl, data.url, data.request) +\n      '' +\n      (data.apiExt ?? '')\n    );\n  }\n\n  private _getConfigById(id: string): IRequestMap | null {\n    if (this.mappingApi.hasOwnProperty(id)) {\n      return this.mappingApi[id];\n    }\n    Logger.LogError('No Api Configuration found for: ', id);\n    return null;\n  }\n\n  private _formatUrl(serverUrl: string, url: string, request: Request): string {\n    return url.replace(/{(\\w+)}/g, function (match, string) {\n      if (request.urlData !== null && request.urlData.hasOwnProperty(string)) {\n        return request.urlData[string];\n      }\n      if (\n        request.BrutContent !== null &&\n        request.BrutContent.hasOwnProperty(string)\n      ) {\n        return request.BrutContent[string];\n      }\n      if (string === 'ApiUrl') {\n        return serverUrl;\n      }\n      return match;\n    });\n  }\n}\n\nexport const RequestMap = new RequestMapCore();\n","interface IHeaders {\n  destination: string;\n}\n\nexport interface IBackResponse {\n  data: object;\n}\nexport interface IResponse {\n  body: string | IBaseResponse;\n  headers?: IHeaders;\n}\nexport enum StatusReponse {\n  Unknown = 0,\n  Successful = 200,\n  NoContent = 204,\n  Unauthorized = 401,\n  Forbidden = 403,\n  Error = 500,\n}\nexport interface IBaseResponse {\n  Status: StatusReponse;\n  Content: Object;\n}\nexport interface IGetTokenResponse extends IBaseResponse {\n  token: string;\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nimport { Logger } from '../../logger';\nimport { Correlation, TempRequest } from '../interface';\nimport { Request } from '../request';\nimport { IBackResponse, IBaseResponse, IResponse, StatusReponse } from '../response';\nimport { MappingApiType, RequestMap } from './requestMap';\n\nexport const SERVER_CONFIG_KEY = new InjectionToken<IServerConfig>('config_server');\nexport interface IServerConfig {\n  pendindRequestId: number;\n  serverUrl: string;\n  apiExt?: string;\n}\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaServerSevice {\n  get requestInProgressNumber(): number {\n    return this._correlations.length;\n  }\n\n  private _tempLoginRequiredRequest: TempRequest[] = [];\n  private _tempPendingRequest: TempRequest[] = [];\n\n  private _correlations: Correlation[] = [];\n\n  private _isAuthenticated = false;\n  get isAuthenticated() {\n    return this._isAuthenticated;\n  }\n  set isAuthenticated(value: boolean) {\n    this._isAuthenticated = value;\n    if (this._isAuthenticated) {\n      this._retryLoginRequired();\n    }\n  }\n\n  constructor(\n    @Inject(HttpClient) public $http: HttpClient,\n    @Optional() @Inject(SERVER_CONFIG_KEY) private _config?: IServerConfig\n  ) {}\n\n  public registerRoutes(routes: MappingApiType) {\n    RequestMap.register(routes);\n  }\n\n  public request<T>(request: Request): Subject<T> {\n    const subject = new Subject<Object>();\n    this._send(subject, request);\n    return subject as unknown as Subject<T>;\n  }\n  public retryRequest(list: TempRequest[] = []) {\n    for (const request of list) {\n      this._send(request.subject, request.request);\n    }\n  }\n  private _send(subject: Subject<Object>, request: Request) {\n    if (!this._config) {\n      return;\n    }\n    // le user doit etre connectÃ©\n    if (request.loginRequired === true && this.isAuthenticated === false) {\n      this._tempLoginRequiredRequest.push({\n        request: request,\n        subject: subject,\n      });\n      return;\n    }\n\n    if (this.requestInProgressNumber >= this._config.pendindRequestId) {\n      this._tempPendingRequest.push({ request: request, subject: subject });\n      return;\n    }\n\n    this._addCorrelation(request.id, request, subject);\n\n    this._sendRequest(request);\n  }\n  private _sendRequest(request: Request) {\n    if (!this._config) {\n      return;\n    }\n    const requestConfig = RequestMap.getConfigById(request.type);\n    if (!requestConfig) {\n      return;\n    }\n    const url = RequestMap.parseUrl({\n      serverUrl: this._config.serverUrl,\n      url: requestConfig.url,\n      request,\n      apiExt: this._config.apiExt,\n    });\n    Logger.LogInfo('[SERVER] Api Request:', url, request);\n\n    switch (requestConfig.type) {\n      case 'GET':\n        this._get(url, request);\n        break;\n      case 'POST':\n        this._post(url, request);\n        break;\n      case 'PUT':\n        this._put(url, request);\n        break;\n      case 'PATCH':\n        this._patch(url, request);\n        break;\n      case 'DELETE':\n        this._delete(url, request);\n        break;\n      case 'FILES':\n        this._files(url, request);\n        break;\n      case 'UPDATEFILES':\n        this._updateFiles(url, request);\n        break;\n      default:\n        Logger.LogError('[ERROR] Request not send');\n    }\n  }\n  private _onPacketReceived = (id: number, response: IResponse): void => {\n    Logger.LogInfo('[SERVER] Api Reponse:', response);\n\n    this._resolveCorrelation(id, response.body);\n  };\n  private _addCorrelation(corrId: number, request: Request, sub: Subject<Object>) {\n    this._correlations.push({ id: corrId, request: request, subject: sub });\n  }\n  private _resolveCorrelation = (corrId: number, body: string | Object) => {\n    const correlation = this._correlations.find(item => item.id === corrId);\n\n    if (!correlation) {\n      return;\n    }\n    let content;\n    if (typeof body === 'string') {\n      try {\n        content = JSON.parse(<string>body);\n      } catch (error) {\n        content = body;\n      }\n    } else {\n      content = body;\n    }\n    this._resolveResponseStatus(correlation, content);\n\n    this._correlations = this._correlations.filter(item => item !== correlation);\n    if (this.requestInProgressNumber === 0) {\n      this._retryPending();\n    }\n  };\n  private _resolveResponseStatus(correlation: Correlation, content: IBaseResponse) {\n    Logger.LogInfo('[SERVER] Api Reponse content:', content.Status, content.Content);\n    switch (content.Status) {\n      case StatusReponse.Successful:\n      case StatusReponse.NoContent:\n        correlation.subject.next(content.Content);\n        correlation.subject.complete();\n        correlation.subject.unsubscribe();\n        break;\n      default:\n        correlation.subject.error(content.Content);\n        correlation.subject.complete();\n        correlation.subject.unsubscribe();\n    }\n  }\n\n  private _retryPending() {\n    const list = [...this._tempPendingRequest];\n    this._tempPendingRequest = [];\n\n    this.retryRequest(list);\n  }\n\n  private _retryLoginRequired() {\n    const list = [...this._tempLoginRequiredRequest];\n    this._tempLoginRequiredRequest = [];\n\n    this.retryRequest(list);\n  }\n\n  private _get(url: string, request: Request) {\n    this.$http\n      .get<IBackResponse>(url, {\n        headers: this._headers(),\n        params: { cacheTime: request.cacheTime },\n      })\n      .subscribe({\n        next: response => {\n          this._onPacketReceived(request.id, this._formatReponse(response, 200));\n        },\n        error: message => {\n          this._onPacketReceived(request.id, this._formatReponse(message, message.status));\n        },\n        complete: () => Logger.LogDebug('API GET CLOSE'),\n      });\n  }\n  private _post(url: string, request: Request) {\n    this.$http\n      .post<IBackResponse>(url, request.BrutContent, {\n        headers: this._headers(),\n      })\n      .subscribe({\n        next: response => this._onPacketReceived(request.id, this._formatReponse(response)),\n        error: message => this._onPacketReceived(request.id, this._formatReponse(message, message.status)),\n        complete: () => Logger.LogDebug('API POST CLOSE'),\n      });\n  }\n  private _patch(url: string, request: Request) {\n    this.$http.patch<IBackResponse>(url, request.Content, { headers: this._headers() }).subscribe({\n      next: response => this._onPacketReceived(request.id, this._formatReponse(response)),\n      error: message => this._onPacketReceived(request.id, this._formatReponse(message, message.status)),\n      complete: () => Logger.LogDebug('API PATCH CLOSE'),\n    });\n  }\n  private _put(url: string, request: Request) {\n    this.$http.put<IBackResponse>(url, request.Content, { headers: this._headers() }).subscribe({\n      next: response => this._onPacketReceived(request.id, this._formatReponse(response)),\n      error: message => this._onPacketReceived(request.id, this._formatReponse(message, message.status)),\n      complete: () => Logger.LogDebug('API PUT CLOSE'),\n    });\n  }\n  private _delete(url: string, request: Request) {\n    this.$http.delete<IBackResponse>(url, { headers: this._headers() }).subscribe({\n      next: response => this._onPacketReceived(request.id, this._formatReponse(response)),\n      error: message => this._onPacketReceived(request.id, this._formatReponse(message, message.status)),\n      complete: () => Logger.LogDebug('API DELETE CLOSE'),\n    });\n  }\n  private _files(url: string, request: Request) {\n    this.$http\n      .post<IBackResponse>(url, request.BrutContent.files, {\n        headers: this._headers({\n          contentType: '',\n        }),\n      })\n      .subscribe({\n        next: response => {\n          this._onPacketReceived(request.id, this._formatReponse(response));\n        },\n        error: message => this._onPacketReceived(request.id, this._formatReponse(message, message.status)),\n        complete: () => Logger.LogDebug('API DELETE CLOSE'),\n      });\n  }\n  private _updateFiles(url: string, request: Request) {\n    this.$http\n      .put<IBackResponse>(url, request.BrutContent.files, {\n        headers: this._headers({\n          contentType: '',\n        }),\n      })\n      .subscribe({\n        next: response => {\n          this._onPacketReceived(request.id, this._formatReponse(response));\n        },\n        error: message => this._onPacketReceived(request.id, this._formatReponse(message, message.status)),\n        complete: () => Logger.LogDebug('API DELETE CLOSE'),\n      });\n  }\n  private _formatReponse(response: object, status: number = 200): IResponse {\n    return { body: { Status: status, Content: response } };\n  }\n  private _headers(option?: { contentType?: string }): HttpHeaders {\n    let headers = new HttpHeaders();\n\n    if (option?.contentType !== '') {\n      headers = headers.set('Content-Type', option?.contentType ? option?.contentType : 'application/json');\n    }\n\n    headers = headers.set('Access-Control-Allow-Origin', this._config?.serverUrl ?? '');\n\n    Logger.LogInfo('[SERVER] Api Request Header:', headers);\n\n    return headers;\n  }\n}\n","export const GRAPHQL_SERVER_CONFIG = 'config_graphQl_server';\n\nexport interface IGraphConfig {\n  url: string;\n  visitor?: string;\n  local_urls?: { [index: string]: string };\n}\n","export const graphQlTake = (take?: number | null) => {\n  return `take: ${take || 1000}`;\n};\n\nexport const graphQlPaginationFields = () => {\n  return `\n        pageInfo {\n            hasNextPage\n            hasPreviousPage\n        }\n        totalCount\n    `;\n};\n","import { ObjectKeys } from '@ta/utils';\n\nexport const graphQlUpdateFields = (object: any): { updatedFields: string[] } => {\n  return { updatedFields: <string[]>ObjectKeys(object) };\n};\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable, signal } from '@angular/core';\r\n\r\nimport { ApolloError } from '@apollo/client/errors';\r\nimport { print } from 'graphql';\r\nimport { GraphQLFormattedError } from 'graphql';\r\n\r\nimport { GraphMutationPayload, GraphQueryPayload } from './graphql/public-api';\r\n\r\nexport type ServerError = { query: string; variables: any; error: ApolloError; errorsMessage: GraphQLFormattedError[] };\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaServerErrorService {\r\n  public notifications = signal<ServerError[]>([]);\r\n\r\n  constructor() {}\r\n\r\n  public addError(query: GraphQueryPayload | GraphMutationPayload, error: ApolloError) {\r\n    this.notifications().push({\r\n      query: print('query' in query ? query.query : query.mutation),\r\n      variables: query.variables,\r\n      error,\r\n      errorsMessage: (error.networkError as HttpErrorResponse).error.errors,\r\n    });\r\n  }\r\n}\r\n","import { Inject, Injectable, Optional, inject } from '@angular/core';\n\nimport { ApolloClient, ApolloError, ApolloLink, InMemoryCache } from '@apollo/client/core';\nimport { Apollo } from 'apollo-angular';\nimport { HttpLink } from 'apollo-angular/http';\nimport { BehaviorSubject, catchError, filter, map, switchMap, take, tap, throwError } from 'rxjs';\n\nimport { isURL } from '@ta/utils';\n\nimport { TaServerErrorService } from '../error.service';\nimport { Logger } from '../logger';\nimport { GraphMutationPayload, GraphQueryPayload } from './models/graphPayload';\nimport { GraphReponseData } from './models/graphResponseData';\nimport { GraphReponsePagedData } from './models/graphResponsePagedData';\nimport { ReponseMutationData } from './models/responseData';\nimport { GRAPHQL_SERVER_CONFIG, GraphEndpoint, IGraphConfig } from './public-api';\n\nexport type GraphOptions = {\n  visitor: boolean;\n};\ntype WrapperData = {\n  context?: string;\n};\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaGraphService {\n  public isReady$ = new BehaviorSubject<boolean>(true);\n\n  private _errorServices = inject(TaServerErrorService);\n\n  private _defaultEndpoint;\n  private _cache;\n  constructor(\n    @Optional()\n    @Inject(GRAPHQL_SERVER_CONFIG)\n    private _graphConfig: IGraphConfig,\n    private httpLink: HttpLink,\n    private apollo: Apollo\n  ) {\n    this._defaultEndpoint = new ApolloLink((operation, forward) => {\n      return forward(operation);\n    });\n\n    this._cache = new InMemoryCache();\n\n    this.apollo.client = new ApolloClient({\n      cache: this._cache,\n      link: this._defaultEndpoint,\n    });\n  }\n\n  public clearCache(key: string) {\n    this._cache.evict({\n      fieldName: key,\n    });\n  }\n\n  public fetchQueryList<T>(payload: GraphQueryPayload, node: string, context: string) {\n    return this._getWrapper({ context }).pipe(\n      tap(() =>\n        Logger.LogInfo('[GraphQL] [Query] fetchQueryList:', {\n          payload,\n          node,\n          context,\n        })\n      ),\n      switchMap(() =>\n        this.apollo.query<GraphReponseData<T[]>>(this._setupData(payload, context)).pipe(\n          tap(data =>\n            Logger.LogInfo('[GraphQL] [Response] fetchQueryList:', {\n              data,\n              node,\n              context,\n            })\n          ),\n          filter(response => !!response.data),\n          map(response => response.data[node]),\n          catchError((err: ApolloError) => {\n            Logger.LogError('[GraphQL] [Error] fetchQueryList:', {\n              payload,\n              node,\n              context,\n              message: err.message,\n            });\n            //this._errorServices.addError(err);\n            return throwError(() => err);\n          }),\n          catchError((err: ApolloError) => {\n            Logger.LogError('[GraphQL] [Error] fetchPagedQueryList:', {\n              payload,\n              node,\n              context,\n              message: err.message,\n            });\n\n            this._errorServices.addError(payload, err);\n            return throwError(() => err);\n          })\n        )\n      ),\n      take(1)\n    );\n  }\n\n  public fetchPagedQueryList<T>(payload: GraphQueryPayload, node: string, context: string) {\n    Logger.LogInfo('[GraphQL] [Prepare] fetchPagedQueryList:', {\n      payload,\n      node,\n      context,\n    });\n    return this._getWrapper({ context }).pipe(\n      tap(() =>\n        Logger.LogInfo('[GraphQL] [Query] fetchPagedQueryList:', {\n          payload,\n          node,\n          context,\n        })\n      ),\n      switchMap(() =>\n        this.apollo.query<GraphReponsePagedData<T>>(this._setupData(payload, context)).pipe(\n          tap(data =>\n            Logger.LogInfo('[GraphQL] [Response] fetchPagedQueryList:', {\n              data,\n              node,\n              context,\n            })\n          ),\n          filter(response => !!response.data),\n          map(response => response.data[node]),\n          catchError((err: ApolloError) => {\n            Logger.LogError('[GraphQL] [Error] fetchPagedQueryList:', {\n              payload,\n              node,\n              context,\n              message: err.message,\n            });\n\n            this._errorServices.addError(payload, err);\n            return throwError(() => err);\n          })\n        )\n      ),\n      take(1)\n    );\n  }\n\n  public fetchQuery<T>(payload: GraphQueryPayload, node: string, context: string) {\n    return this._getWrapper({ context }).pipe(\n      tap(() =>\n        Logger.LogInfo('[GraphQL] [Query] fetchQuery:', {\n          payload,\n          node,\n          context,\n        })\n      ),\n      switchMap(() =>\n        this.apollo.query<GraphReponseData<T>>(this._setupData(payload, context)).pipe(\n          tap(data =>\n            Logger.LogInfo('[GraphQL] [Response] fetchQuery:', {\n              data,\n              node,\n              context,\n            })\n          ),\n          filter(response => !!response.data),\n          map(data => data.data[node]),\n          catchError((err: ApolloError) => {\n            Logger.LogError('[GraphQL] [Error] fetchPagedQueryList:', {\n              payload,\n              node,\n              context,\n              message: err.message,\n            });\n\n            this._errorServices.addError(payload, err);\n            return throwError(() => err);\n          })\n        )\n      ),\n      take(1)\n    );\n  }\n\n  public mutate<T>(payload: GraphMutationPayload, mutationName: string, context: string, clearCache?: string[]) {\n    Logger.LogInfo('[GraphQL]  [Prepare] mutate', payload, mutationName);\n    return this.apollo.mutate<ReponseMutationData<T>>(this._setupData(payload, context)).pipe(\n      tap(data => Logger.LogInfo('[GraphQL] [Reponse] mutate', data)),\n      filter(response => !!response.data),\n      tap(() => clearCache?.forEach(cacheKey => this.clearCache(cacheKey))),\n      map(response => {\n        return response!.data![mutationName];\n      }),\n      catchError((err: ApolloError) => {\n        Logger.LogError('[GraphQL] [Error] fetchPagedQueryList:', {\n          payload,\n          context,\n          message: err.message,\n        });\n\n        this._errorServices.addError(payload, err);\n        return throwError(() => err);\n      })\n    );\n  }\n\n  public registerGraphEndpoint(graphEndpoint: GraphEndpoint, options?: GraphOptions) {\n    const url =\n      options?.visitor === true && this._graphConfig?.visitor ? this._graphConfig?.visitor : this._graphConfig?.url;\n\n    let uri = isURL(graphEndpoint.endpoint) ? graphEndpoint.endpoint : url + graphEndpoint.endpoint;\n\n    const newHttpLink = this.httpLink.create({\n      headers: graphEndpoint.headers,\n      uri: uri,\n    });\n\n    this.apollo.client.setLink(\n      this.apollo.client.link.concat(\n        ApolloLink.split(operation => operation.getContext()['clientName'] === graphEndpoint.clientName, newHttpLink)\n      )\n    );\n  }\n\n  private _setupData<T>(payload: T, context: string) {\n    return { ...payload, ...{ context: { clientName: context } } };\n  }\n\n  private _getWrapper(data?: WrapperData) {\n    return this.isReady$;\n  }\n}\n","import { Injectable, OnDestroy, inject } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { GraphEndpoint, GraphOptions, TaGraphService } from '../graphql/public-api';\nimport { MappingApiType } from './api/requestMap';\nimport { TaServerSevice } from './api/server.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class TaBaseService implements OnDestroy {\n  protected _subscriptionList: Subscription[] = [];\n  protected _serverService = inject(TaServerSevice);\n  protected _graphService = inject(TaGraphService);\n\n  constructor(apiRoutes?: MappingApiType) {\n    this.registerRoutes({ apiRoutes });\n  }\n\n  public registerRoutes(routes: { apiRoutes?: MappingApiType; graphEndpoint?: GraphEndpoint }, options?: GraphOptions) {\n    if (routes.apiRoutes) this._serverService.registerRoutes(routes.apiRoutes);\n    if (routes.graphEndpoint) this._graphService.registerGraphEndpoint(routes.graphEndpoint, options);\n  }\n\n  ngOnDestroy() {\n    this._subscriptionList.forEach(subscription => subscription.unsubscribe());\n  }\n\n  protected _registerSubscription(subscription: Subscription) {\n    this._subscriptionList.push(subscription);\n  }\n}\n","import {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { differenceInMinutes } from 'date-fns';\nimport { Observable, of, share, tap } from 'rxjs';\n\nimport { Logger } from '../logger';\n\n@Injectable()\nexport class CacheInterceptor implements HttpInterceptor {\n  private cache: Map<string, { timestamp: Date; response: HttpResponse<any> }> =\n    new Map();\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (req.method !== 'GET') {\n      return next.handle(req);\n    }\n    const cacheTime = Number(req.params.get('cacheTime'));\n\n    if (cacheTime === 0) {\n      Logger.LogInfo('[SERVER] Api No Cache required', req.url);\n      return next.handle(req);\n    }\n    const cachedResponse = this.cache.get(req.url);\n\n    if (cachedResponse) {\n      const diffInMinutes = differenceInMinutes(\n        new Date(),\n        cachedResponse?.timestamp\n      );\n\n      if (cacheTime === -1 || cacheTime > diffInMinutes) {\n        Logger.LogInfo(\n          '[SERVER] Api Cached response:',\n          req.url,\n          cachedResponse\n        );\n        return of(cachedResponse.response.clone());\n      } else {\n        Logger.LogInfo('[SERVER] Api Cached expired', req.url);\n      }\n    }\n\n    return next.handle(req).pipe(\n      tap((stateEvent: any) => {\n        if (stateEvent instanceof HttpResponse) {\n          this.cache.set(req.url, {\n            timestamp: new Date(),\n            response: stateEvent.clone(),\n          });\n        }\n      }),\n      share()\n    );\n  }\n}\n","export type CacheStrategy = ECacheStrategy | number;\n\nexport enum ECacheStrategy {\n  Inifity = -1,\n  NoCache = 0,\n}\n","import { newId } from '@ta/utils';\n\nimport { CacheStrategy, ECacheStrategy } from '../../types/cache';\n\n/**\n *\n * @param type\n * @param content\n * @param cacheTime in minutes => -1 = inifity, 0 = no cache (default), x = number of cache in minutes | ByDefault 0\n * @param loginRequired\n */\ntype RequestOptions = {\n  type: string;\n  content?: any;\n  urlData?: any;\n  cacheTime?: CacheStrategy;\n  loginRequired?: boolean;\n};\nexport class Request {\n  public id: number;\n\n  public type: string;\n  public loginRequired: boolean;\n  public cacheTime: CacheStrategy;\n  public urlData: any;\n\n  private readonly _content: any;\n\n  get Content(): string {\n    return JSON.stringify(this._content);\n  }\n  get BrutContent(): any {\n    return this._content;\n  }\n\n  constructor({\n    type,\n    content = null,\n    urlData = null,\n    cacheTime = ECacheStrategy.NoCache,\n    loginRequired = true,\n  }: RequestOptions) {\n    this.id = newId();\n    this.type = type;\n    this.loginRequired = loginRequired;\n    this.cacheTime = cacheTime;\n    this.urlData = urlData;\n\n    this._content = content;\n  }\n}\n","export const STRAPI_SERVER_CONFIG = 'config_strapi_server';\n\nexport interface IStrapiConfig {\n  url: string;\n  token: string;\n}\n","import { HttpHeaders } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\n\nimport { filter, map } from 'rxjs';\n\nimport { isNonNullable } from '@ta/utils';\n\nimport { GraphQueryPayload } from '../graphql/models/graphPayload';\nimport { TaBaseService } from '../server/baseService';\nimport { IStrapiConfig, STRAPI_SERVER_CONFIG } from './config';\n\nexport interface GraphStrapiResponse<T> {\n  data: {\n    id: string;\n    attributes: T;\n  };\n}\n\nexport interface GraphStrapiListResponse<T> {\n  data: {\n    id: string;\n    attributes: T;\n  }[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaStrapiService extends TaBaseService {\n  constructor(@Inject(STRAPI_SERVER_CONFIG) private _strapiConfig: IStrapiConfig) {\n    super();\n\n    const headers = new HttpHeaders({\n      authorization: `Bearer ${this._strapiConfig.token}`,\n    });\n\n    super.registerRoutes({\n      graphEndpoint: {\n        clientName: 'strapi',\n        endpoint: this._strapiConfig.url,\n        headers: headers,\n      },\n    });\n  }\n\n  public fetchQuery$<T>(payload: GraphQueryPayload, node: string) {\n    return this._graphService.fetchQuery<GraphStrapiResponse<T>>(payload, node, 'strapi').pipe(\n      filter(isNonNullable),\n      map(data => data.data.attributes)\n    );\n  }\n\n  public fetchQueryList$<T>(payload: GraphQueryPayload, node: string) {\n    return this._graphService.fetchQuery<GraphStrapiListResponse<T>>(payload, node, 'strapi').pipe(\n      filter(isNonNullable),\n      map(data => data.data.map(data => data.attributes))\n    );\n  }\n}\n","import { inject } from '@angular/core';\n\nimport { TaBaseService } from '../server/baseService';\nimport { TaStrapiService } from './strapi.service';\n\nexport abstract class TaBaseStrapiService extends TaBaseService {\n  protected _strapiService = inject(TaStrapiService);\n}\n","export interface BaseStrapi {\n  createdAt: string;\n  updatedAt: string;\n  publishedAt: string;\n}\n\nexport const baseStrapiProps: (keyof BaseStrapi)[] = [\n  'createdAt',\n  'updatedAt',\n  'publishedAt',\n];\n","import { InjectionToken } from '@angular/core';\n\nimport { TenantConfig } from './interface';\n\nexport const TENANT_CONFIG_TOKEN = new InjectionToken<TenantConfig>('TenantConfig');\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { GRAPHQL_SERVER_CONFIG, IGraphConfig } from '../graphql/models/graphConfig';\nimport { TenantConfig } from './interface';\nimport { TENANT_CONFIG_TOKEN } from './token';\n\n@Injectable()\nexport class TenantInterceptor implements HttpInterceptor {\n  constructor(\n    @Optional() @Inject(TENANT_CONFIG_TOKEN) private tenantConfig: TenantConfig,\n    @Optional()\n    @Inject(GRAPHQL_SERVER_CONFIG)\n    private graphQlConfig: IGraphConfig\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (this.tenantConfig?.tenantId && this.graphQlConfig?.url && req.url.startsWith(this.graphQlConfig?.url)) {\n      const tenantRequest = req.clone({\n        headers: req.headers.set('TenantId', this.tenantConfig.tenantId.toString()),\n      });\n      return next.handle(tenantRequest);\n    }\n\n    return next.handle(req);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Provider, importProvidersFrom } from '@angular/core';\r\n\r\nimport { ApolloModule } from 'apollo-angular';\r\n\r\nimport { GRAPHQL_SERVER_CONFIG, IGraphConfig } from './services/graphql/models/graphConfig';\r\nimport { TenantInterceptor } from './services/server/tenantInterceptor';\r\nimport { IStrapiConfig, STRAPI_SERVER_CONFIG } from './services/strapi/config';\r\n\r\nexport const provideServer = (data: { graphQlConfig: IGraphConfig }): Provider => [\r\n  importProvidersFrom(ApolloModule),\r\n  {\r\n    provide: GRAPHQL_SERVER_CONFIG,\r\n    useValue: data.graphQlConfig,\r\n  },\r\n  {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: TenantInterceptor,\r\n    multi: true,\r\n  },\r\n];\r\n\r\nexport const provideStrapi = (data: { strapiConfig: IStrapiConfig }): Provider => [\r\n  importProvidersFrom(ApolloModule),\r\n  {\r\n    provide: STRAPI_SERVER_CONFIG,\r\n    useValue: data.strapiConfig,\r\n  },\r\n];\r\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { ApolloModule } from 'apollo-angular';\n\nimport { TaGraphService } from './services/graphql/graph.service';\nimport { GRAPHQL_SERVER_CONFIG, IGraphConfig } from './services/graphql/models/graphConfig';\nimport { CacheInterceptor } from './services/server/cacheInterceptor';\nimport { TenantInterceptor } from './services/server/tenantInterceptor';\n\nexport { gql as Apollo_gql } from 'apollo-angular';\n\n/**\n * @deprecated Use standalone components instead.\n * This module will be removed in a future version.\n *\n * @example\n * // Instead of importing the module:\n * // import { TaServerModule } from '@ta/library-name';\n *\n * // Import the standalone components directly:\n * import { ApolloModule } from '@ta/library-name';\n */\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, HttpClientModule, ApolloModule],\n  exports: [ApolloModule],\n  providers: [\n    TaGraphService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: CacheInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class TaServerModule {\n  static forRoot(graphQlConfig: IGraphConfig): ModuleWithProviders<TaServerModule> {\n    return {\n      ngModule: TaServerModule,\n      providers: [\n        {\n          provide: GRAPHQL_SERVER_CONFIG,\n          useValue: graphQlConfig,\n        },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: TenantInterceptor,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","/*\n * Public API Surface of server\n */\n\nexport * from './lib/services/dto/keyvalue';\n\nexport * from './lib/helpers/handle-request';\n\nexport * from './lib/services/server/api/requestMap';\nexport * from './lib/services/server/api/server.service';\n\nexport * from './lib/services/server/baseService';\nexport * from './lib/services/server/cacheInterceptor';\n\nexport * from './lib/services/server/interface';\nexport * from './lib/services/server/request';\nexport * from './lib/services/server/response';\n\nexport * from './lib/services/error.service';\n\nexport * from './lib/services/logger';\n\nexport * from './lib/services/graphql/public-api';\nexport * from './lib/services/strapi/public-api';\n\nexport * from './lib/services/server/token';\n\nexport * from './lib/provider';\nexport * from './lib/server.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1"],"mappings":"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"}