import { AsyncPipe, NgIf } from '@angular/common';
import { Component, Inject, Input, Optional } from '@angular/core';
import { TENANT_CONFIG_TOKEN } from '@ta/server';
import { EmptyComponent, ErrorComponent, LoaderComponent, TitleComponent } from '@ta/ui';
import { TaBaseComponent } from '@ta/utils';
import { RichTextComponent } from '../types/rich-text/rich-text.component';
import * as i0 from "@angular/core";
import * as i1 from "../../services/cms.service";
export class CmsComponent extends TaBaseComponent {
    get content$() {
        return this.cmsService.cmsContents.get$(this.contentType);
    }
    constructor(cmsService, tenantConfig) {
        super();
        this.cmsService = cmsService;
        this.tenantConfig = tenantConfig;
    }
    ngOnInit() {
        const tenantId = this.tenantConfig.tenantId ?? 0;
        this.requestState.asked();
        this.cmsService.fetchCmsContents$(this.contentType, tenantId.toString()).subscribe({
            complete: () => this.requestState.completed(),
            error: (error) => {
                this.requestState.onError(error.status, error.statusText);
            },
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CmsComponent, deps: [{ token: i1.TaCmsService }, { token: TENANT_CONFIG_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: CmsComponent, isStandalone: true, selector: "ta-cms", inputs: { contentType: "contentType" }, usesInheritance: true, ngImport: i0, template: "@if (this.content$ | async; as content) {\n  <ta-loader [isLoading]=\"this.requestState.isLoading()\">\n    <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n      <ta-empty [isEmpty]=\"!content\">\n        @if (content) {\n          <ta-title>\n            {{ content.Title }}\n          </ta-title>\n\n          <ta-rich-text [richText]=\"content.Description\"></ta-rich-text>\n        }\n      </ta-empty>\n    </ta-error>\n  </ta-loader>\n}\n", styles: [""], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "component", type: LoaderComponent, selector: "ta-loader", inputs: ["isLoading", "skeleton"] }, { kind: "component", type: ErrorComponent, selector: "ta-error", inputs: ["message", "code"] }, { kind: "component", type: EmptyComponent, selector: "ta-empty", inputs: ["isEmpty", "isLight", "showMessage", "text", "type", "icon", "iconSize"] }, { kind: "component", type: TitleComponent, selector: "ta-title", inputs: ["level", "isTheme", "isBold"] }, { kind: "component", type: RichTextComponent, selector: "ta-rich-text", inputs: ["richText"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CmsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-cms', standalone: true, imports: [NgIf, AsyncPipe, LoaderComponent, ErrorComponent, EmptyComponent, TitleComponent, RichTextComponent], template: "@if (this.content$ | async; as content) {\n  <ta-loader [isLoading]=\"this.requestState.isLoading()\">\n    <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n      <ta-empty [isEmpty]=\"!content\">\n        @if (content) {\n          <ta-title>\n            {{ content.Title }}\n          </ta-title>\n\n          <ta-rich-text [richText]=\"content.Description\"></ta-rich-text>\n        }\n      </ta-empty>\n    </ta-error>\n  </ta-loader>\n}\n" }]
        }], ctorParameters: () => [{ type: i1.TaCmsService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TENANT_CONFIG_TOKEN]
                }] }], propDecorators: { contentType: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvbW9kdWxlcy9zdHJhcGkvY29tcG9uZW50cy9jbXMvY21zLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvbW9kdWxlcy9zdHJhcGkvY29tcG9uZW50cy9jbXMvY21zLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFVLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzRSxPQUFPLEVBQUUsbUJBQW1CLEVBQWdCLE1BQU0sWUFBWSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDekYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUc1QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQzs7O0FBUzNFLE1BQU0sT0FBTyxZQUFhLFNBQVEsZUFBZTtJQUkvQyxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUNELFlBQ1MsVUFBd0IsRUFDa0IsWUFBMEI7UUFFM0UsS0FBSyxFQUFFLENBQUM7UUFIRCxlQUFVLEdBQVYsVUFBVSxDQUFjO1FBQ2tCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBRzdFLENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUNqRixRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUU7WUFDN0MsS0FBSyxFQUFFLENBQUMsS0FBd0IsRUFBRSxFQUFFO2dCQUNsQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM1RCxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzsrR0F2QlUsWUFBWSw4Q0FTRCxtQkFBbUI7bUdBVDlCLFlBQVksaUlDbEJ6QiwwZkFlQSxxRERDa0IsU0FBUyw4Q0FBRSxlQUFlLHlGQUFFLGNBQWMsa0ZBQUUsY0FBYyx3SUFBRSxjQUFjLDZGQUFFLGlCQUFpQjs7NEZBRWxHLFlBQVk7a0JBUHhCLFNBQVM7K0JBQ0UsUUFBUSxjQUdOLElBQUksV0FDUCxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixDQUFDOzswQkFXM0csUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxtQkFBbUI7eUNBUHpDLFdBQVc7c0JBRFYsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jUGlwZSwgTmdJZiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0LCBJbnB1dCwgT25Jbml0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBURU5BTlRfQ09ORklHX1RPS0VOLCBUZW5hbnRDb25maWcgfSBmcm9tICdAdGEvc2VydmVyJztcbmltcG9ydCB7IEVtcHR5Q29tcG9uZW50LCBFcnJvckNvbXBvbmVudCwgTG9hZGVyQ29tcG9uZW50LCBUaXRsZUNvbXBvbmVudCB9IGZyb20gJ0B0YS91aSc7XG5pbXBvcnQgeyBUYUJhc2VDb21wb25lbnQgfSBmcm9tICdAdGEvdXRpbHMnO1xuXG5pbXBvcnQgeyBUYUNtc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jbXMuc2VydmljZSc7XG5pbXBvcnQgeyBSaWNoVGV4dENvbXBvbmVudCB9IGZyb20gJy4uL3R5cGVzL3JpY2gtdGV4dC9yaWNoLXRleHQuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGEtY21zJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Ntcy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2Ntcy5jb21wb25lbnQuc2NzcyddLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbTmdJZiwgQXN5bmNQaXBlLCBMb2FkZXJDb21wb25lbnQsIEVycm9yQ29tcG9uZW50LCBFbXB0eUNvbXBvbmVudCwgVGl0bGVDb21wb25lbnQsIFJpY2hUZXh0Q29tcG9uZW50XSxcbn0pXG5leHBvcnQgY2xhc3MgQ21zQ29tcG9uZW50IGV4dGVuZHMgVGFCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KClcbiAgY29udGVudFR5cGUhOiBzdHJpbmc7XG5cbiAgZ2V0IGNvbnRlbnQkKCkge1xuICAgIHJldHVybiB0aGlzLmNtc1NlcnZpY2UuY21zQ29udGVudHMuZ2V0JCh0aGlzLmNvbnRlbnRUeXBlKTtcbiAgfVxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgY21zU2VydmljZTogVGFDbXNTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoVEVOQU5UX0NPTkZJR19UT0tFTikgcHJpdmF0ZSB0ZW5hbnRDb25maWc6IFRlbmFudENvbmZpZ1xuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgY29uc3QgdGVuYW50SWQgPSB0aGlzLnRlbmFudENvbmZpZy50ZW5hbnRJZCA/PyAwO1xuICAgIHRoaXMucmVxdWVzdFN0YXRlLmFza2VkKCk7XG4gICAgdGhpcy5jbXNTZXJ2aWNlLmZldGNoQ21zQ29udGVudHMkKHRoaXMuY29udGVudFR5cGUsIHRlbmFudElkLnRvU3RyaW5nKCkpLnN1YnNjcmliZSh7XG4gICAgICBjb21wbGV0ZTogKCkgPT4gdGhpcy5yZXF1ZXN0U3RhdGUuY29tcGxldGVkKCksXG4gICAgICBlcnJvcjogKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4ge1xuICAgICAgICB0aGlzLnJlcXVlc3RTdGF0ZS5vbkVycm9yKGVycm9yLnN0YXR1cywgZXJyb3Iuc3RhdHVzVGV4dCk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG4iLCJAaWYgKHRoaXMuY29udGVudCQgfCBhc3luYzsgYXMgY29udGVudCkge1xuICA8dGEtbG9hZGVyIFtpc0xvYWRpbmddPVwidGhpcy5yZXF1ZXN0U3RhdGUuaXNMb2FkaW5nKClcIj5cbiAgICA8dGEtZXJyb3IgW21lc3NhZ2VdPVwidGhpcy5yZXF1ZXN0U3RhdGUuZ2V0RXJyb3JNZXNzYWdlKClcIiBbY29kZV09XCJ0aGlzLnJlcXVlc3RTdGF0ZS5nZXRFcnJvclN0YXR1cygpXCI+XG4gICAgICA8dGEtZW1wdHkgW2lzRW1wdHldPVwiIWNvbnRlbnRcIj5cbiAgICAgICAgQGlmIChjb250ZW50KSB7XG4gICAgICAgICAgPHRhLXRpdGxlPlxuICAgICAgICAgICAge3sgY29udGVudC5UaXRsZSB9fVxuICAgICAgICAgIDwvdGEtdGl0bGU+XG5cbiAgICAgICAgICA8dGEtcmljaC10ZXh0IFtyaWNoVGV4dF09XCJjb250ZW50LkRlc2NyaXB0aW9uXCI+PC90YS1yaWNoLXRleHQ+XG4gICAgICAgIH1cbiAgICAgIDwvdGEtZW1wdHk+XG4gICAgPC90YS1lcnJvcj5cbiAgPC90YS1sb2FkZXI+XG59XG4iXX0=