{"version":3,"file":"ta-cms.mjs","sources":["../../src/lib/modules/strapi/components/types/text/text.component.ts","../../src/lib/modules/strapi/components/types/text/text.component.html","../../src/lib/modules/strapi/components/types/link/link.component.ts","../../src/lib/modules/strapi/components/types/link/link.component.html","../../src/lib/modules/strapi/components/types/rich-text/rich-text.component.ts","../../src/lib/modules/strapi/components/types/rich-text/rich-text.component.html","../../src/lib/modules/strapi/services/dto/cms.ts","../../src/lib/modules/strapi/services/dto/sale.ts","../../src/lib/modules/strapi/services/strapiQueries.ts","../../src/lib/modules/strapi/services/cms.service.ts","../../src/lib/modules/strapi/components/cms/cms.component.ts","../../src/lib/modules/strapi/components/cms/cms.component.html","../../src/lib/modules/strapi/services/sale.service.ts","../../src/lib/modules/strapi/components/sale/sale.component.ts","../../src/lib/modules/strapi/components/sale/sale.component.html","../../src/lib/modules/strapi/translation.service.ts","../../src/lib/modules/strapi/strapi.module.ts","../../src/lib/modules/strapi/public-api.ts","../../src/public-api.ts","../../src/ta-cms.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\n\nimport { RichParagraphText } from '../../../services/dto/types/rich-text';\n\n@Component({\n  selector: 'ta-rich-paragraph-text',\n  templateUrl: './text.component.html',\n  styleUrls: ['./text.component.scss'],\n  standalone: true,\n})\nexport class TextComponent {\n  @Input()\n  text!: RichParagraphText;\n}\n","<span\n  [class.is-bold]=\"text.bold\"\n  [class.is-underline]=\"text.underline\"\n  [class.is-italic]=\"text.italic\"\n>\n  {{ text.text }}\n</span>\n","import { NgFor } from '@angular/common';\nimport { Component, Input } from '@angular/core';\n\nimport { LinkComponent as UiLinkComponent } from '@ta/ui';\nimport { RichParagraphLink } from '../../../services/dto/types/rich-text';\nimport { TextComponent } from '../text/text.component';\n\n@Component({\nselector: 'ta-rich-paragraph-link',\n  templateUrl: './link.component.html',\n  styleUrls: ['./link.component.scss'],\n  standalone: true,\n  imports: [NgFor, UiLinkComponent, TextComponent],\n})\nexport class LinkComponent {\n  @Input()\n  link!: RichParagraphLink;\n\n  public goTo() {\n    window.open(this.link.url);\n  }\n}\n","@for (entity of this.link.children; track entity) {\n  <ta-link (action)=\"this.goTo()\">\n    @switch (entity.type) {\n      @case ('text') {\n        <ta-rich-paragraph-text [text]=\"$any(entity)\"></ta-rich-paragraph-text>\n      }\n    }\n  </ta-link>\n}\n","import { NgFor, NgTemplateOutlet } from '@angular/common';\nimport { Component, Input } from '@angular/core';\n\nimport { TitleComponent } from '@ta/ui';\nimport { RichText, RichTextChildren } from '../../../services/dto/types/rich-text';\nimport { LinkComponent } from '../link/link.component';\nimport { TextComponent } from '../text/text.component';\n\n@Component({\n  selector: 'ta-rich-text',\n  templateUrl: './rich-text.component.html',\n  styleUrls: ['./rich-text.component.scss'],\n  standalone: true,\n  imports: [NgFor, NgTemplateOutlet, TitleComponent, TextComponent, LinkComponent],\n})\nexport class RichTextComponent {\n  @Input()\n  richText!: RichText;\n\n  public readonly typeToken!: { childrenText: RichTextChildren[] };\n}\n","@for (rich of this.richText; track rich) {\n  @switch (rich.type) {\n    @case ('heading') {\n      <ta-title [level]=\"rich.level\">\n        <ng-container *ngTemplateOutlet=\"textTemplate; context: { childrenText: rich.children }\"></ng-container>\n      </ta-title>\n    }\n    @case ('paragraph') {\n      <div class=\"paragraph\">\n        <ng-container *ngTemplateOutlet=\"textTemplate; context: { childrenText: rich.children }\"></ng-container>\n      </div>\n    }\n  }\n}\n\n<ng-template #textTemplate let-childrenText=\"childrenText\" [typedTemplate]=\"this.typeToken\">\n  @for (entity of childrenText; track entity) {\n    @switch (entity.type) {\n      @case ('text') {\n        <ta-rich-paragraph-text [text]=\"$any(entity)\"></ta-rich-paragraph-text>\n      }\n      @case ('link') {\n        <ta-rich-paragraph-link [link]=\"$any(entity)\"></ta-rich-paragraph-link>\n      }\n    }\n  }\n</ng-template>\n","import { BaseStrapi, GraphSchema, baseStrapiProps } from '@ta/server';\n\nimport { RichText } from './types/rich-text';\n\nexport interface Cms extends BaseStrapi {\n  Title: string;\n  Description: RichText;\n  Tenant: 'default' | 'reno-energy';\n  Type: string;\n}\nconst props: (keyof Cms)[] = ['Title', 'Description', 'Tenant', 'Type'];\n\nexport const cmsProps = new GraphSchema<Cms>(props.concat(baseStrapiProps));\n","import { BaseStrapi, GraphSchema, baseStrapiProps } from '@ta/server';\n\nimport { RichText } from './types/rich-text';\n\nexport interface Sale extends BaseStrapi {\n  Content: RichText;\n}\nconst props: (keyof Sale)[] = ['Content'];\n\nexport const saleProps = new GraphSchema<Sale>(props.concat(baseStrapiProps));\n","import { Apollo_gql, GraphQueryPayload } from '@ta/server';\n\nimport { cmsProps } from './dto/cms';\nimport { saleProps } from './dto/sale';\n\nexport function GET_CMS_CONTENT(type: string, locale: string, uid: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n      query CmsContents($type: String!, $locale: I18NLocaleCode!, $uid: String!) {\n        contents(locale: $locale, filters: { Type: { eq: $type }, partner: { UID: { eq: $uid } } } ) {\n          data {\n            id\n            attributes {\n              ${cmsProps.get('Title')}\n              ${cmsProps.get('Description')}\n              ${cmsProps.get('Type')}\n              ${cmsProps.get('createdAt')}\n              ${cmsProps.get('updatedAt')}\n              ${cmsProps.get('publishedAt')}\n            }\n          }\n        }\n      }\n    `,\n    variables: {\n      type: type,\n      locale: locale,\n      uid: uid,\n    },\n  };\n}\n\nexport function GET_SALE_CONTENT(uid: string, locale: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n      query Sale($locale: I18NLocaleCode!, $uid: String!) {\n        sales(locale: $locale, filters: { partner: { UID: { eq: $uid } } } ) {\n          data {\n            id\n            attributes {\n              ${saleProps.get('Content')}\n            }\n          }\n        }\n      }\n    `,\n    variables: {\n      locale: locale,\n      uid: uid,\n    },\n  };\n}\n","import { Injectable, LOCALE_ID, inject } from '@angular/core';\n\nimport { map } from 'rxjs';\n\nimport { HandleComplexRequest, TaBaseStrapiService } from '@ta/server';\n\nimport { Cms } from './dto/cms';\nimport { GET_CMS_CONTENT } from './strapiQueries';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaCmsService extends TaBaseStrapiService {\n  readonly local = inject(LOCALE_ID);\n  readonly cmsContents = new HandleComplexRequest<Cms>();\n\n  constructor() {\n    super();\n  }\n\n  public fetchCmsContents$(type: string, tenantId: string) {\n    return this.cmsContents.fetch(\n      type,\n      this._strapiService\n        .fetchQueryList$<Cms>(GET_CMS_CONTENT(type, this.local, tenantId), 'contents')\n        .pipe(map(list => list[0]))\n    );\n  }\n}\n","import { AsyncPipe, NgIf } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Component, Inject, Input, OnInit, Optional } from '@angular/core';\n\nimport { TENANT_CONFIG_TOKEN, TenantConfig } from '@ta/server';\nimport { EmptyComponent, ErrorComponent, LoaderComponent, TitleComponent } from '@ta/ui';\nimport { TaBaseComponent } from '@ta/utils';\n\nimport { TaCmsService } from '../../services/cms.service';\nimport { RichTextComponent } from '../types/rich-text/rich-text.component';\n\n@Component({\n  selector: 'ta-cms',\n  templateUrl: './cms.component.html',\n  styleUrls: ['./cms.component.scss'],\n  standalone: true,\n  imports: [NgIf, AsyncPipe, LoaderComponent, ErrorComponent, EmptyComponent, TitleComponent, RichTextComponent],\n})\nexport class CmsComponent extends TaBaseComponent implements OnInit {\n  @Input()\n  contentType!: string;\n\n  get content$() {\n    return this.cmsService.cmsContents.get$(this.contentType);\n  }\n  constructor(\n    public cmsService: TaCmsService,\n    @Optional() @Inject(TENANT_CONFIG_TOKEN) private tenantConfig: TenantConfig\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    const tenantId = this.tenantConfig.tenantId ?? 0;\n    this.requestState.asked();\n    this.cmsService.fetchCmsContents$(this.contentType, tenantId.toString()).subscribe({\n      complete: () => this.requestState.completed(),\n      error: (error: HttpErrorResponse) => {\n        this.requestState.onError(error.status, error.statusText);\n      },\n    });\n  }\n}\n","@if (this.content$ | async; as content) {\n  <ta-loader [isLoading]=\"this.requestState.isLoading()\">\n    <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n      <ta-empty [isEmpty]=\"!content\">\n        @if (content) {\n          <ta-title>\n            {{ content.Title }}\n          </ta-title>\n\n          <ta-rich-text [richText]=\"content.Description\"></ta-rich-text>\n        }\n      </ta-empty>\n    </ta-error>\n  </ta-loader>\n}\n","import { Injectable, LOCALE_ID, inject } from '@angular/core';\n\nimport { map } from 'rxjs';\n\nimport { HandleComplexRequest, TaBaseStrapiService } from '@ta/server';\n\nimport { Sale } from './dto/sale';\nimport { GET_SALE_CONTENT } from './strapiQueries';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaSaleService extends TaBaseStrapiService {\n  readonly local = inject(LOCALE_ID);\n\n  readonly saleContents = new HandleComplexRequest<Sale>();\n\n  constructor() {\n    super();\n  }\n\n  public fetchSaleContents$(tenantId: string) {\n    return this.saleContents.fetch(\n      tenantId,\n      this._strapiService\n        .fetchQueryList$<Sale>(GET_SALE_CONTENT(tenantId, this.local), 'sales')\n        .pipe(map(list => list[0]))\n    );\n  }\n}\n","import { AsyncPipe, NgIf } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Component, EventEmitter, Inject, OnInit, Optional, Output } from '@angular/core';\n\nimport { of } from 'rxjs';\n\nimport { ToggleComponent } from '@ta/form-input';\nimport { InputCheckBox } from '@ta/form-model';\nimport { TENANT_CONFIG_TOKEN, TenantConfig } from '@ta/server';\nimport { EmptyComponent, ErrorComponent, LoaderComponent } from '@ta/ui';\nimport { TaBaseComponent } from '@ta/utils';\n\nimport { TaSaleService } from '../../services/sale.service';\nimport { RichTextComponent } from '../types/rich-text/rich-text.component';\n\n@Component({\n  selector: 'ta-sale',\n  templateUrl: './sale.component.html',\n  styleUrls: ['./sale.component.scss'],\n  standalone: true,\n  imports: [NgIf, AsyncPipe, LoaderComponent, ErrorComponent, EmptyComponent, RichTextComponent, ToggleComponent],\n})\nexport class SaleComponent extends TaBaseComponent implements OnInit {\n  @Output()\n  acceptation = new EventEmitter<boolean>();\n\n  public checkbox = new InputCheckBox({\n    label: 'strapi.sale.cguAcceptation',\n    toggle: true,\n  });\n  get content$() {\n    if (!this.tenantConfig.tenantId) {\n      return of();\n    }\n    return this.saleService.saleContents.get$(this.tenantConfig.tenantId?.toString());\n  }\n  constructor(\n    public saleService: TaSaleService,\n    @Optional() @Inject(TENANT_CONFIG_TOKEN) private tenantConfig: TenantConfig\n  ) {\n    super();\n\n    this.checkbox.createFormControl();\n    this._registerSubscription(\n      this.checkbox.changeValue$.subscribe({\n        next: value => this.acceptation.emit(value),\n      })\n    );\n  }\n\n  ngOnInit() {\n    const tenantId = this.tenantConfig.tenantId ?? 0;\n\n    this.requestState.asked();\n    this.saleService.fetchSaleContents$(tenantId.toString()).subscribe({\n      complete: () => this.requestState.completed(),\n      error: (error: HttpErrorResponse) => {\n        this.requestState.onError(error.status, error.statusText);\n      },\n    });\n  }\n}\n","@if (this.content$ | async; as content) {\n  <ta-loader [isLoading]=\"this.requestState.isLoading()\">\n    <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n      <ta-empty [isEmpty]=\"!content\">\n        @if (content) {\n          <ta-rich-text [richText]=\"content.Content\"></ta-rich-text>\n\n          <div class=\"checkbox ta-r\">\n            <ta-input-toggle [input]=\"this.checkbox\"></ta-input-toggle>\n          </div>\n        }\n      </ta-empty>\n    </ta-error>\n  </ta-loader>\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { TaLazyTranslationService } from '@ta/translation';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaTranslationStrapi extends TaLazyTranslationService {\r\n  constructor() {\r\n    super('strapi');\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { TaFormInputsModule } from '@ta/form-input';\nimport { TaContainerModule, TaUiModule } from '@ta/ui';\nimport { TaDirectivePipeModule } from '@ta/utils';\n\nimport { CmsComponent } from './components/cms/cms.component';\nimport { SaleComponent } from './components/sale/sale.component';\nimport { LinkComponent } from './components/types/link/link.component';\nimport { RichTextComponent } from './components/types/rich-text/rich-text.component';\nimport { TextComponent } from './components/types/text/text.component';\nimport { TaTranslationStrapi } from './translation.service';\n\n/**\n * @deprecated Use standalone components instead.\n * This module will be removed in a future version.\n *\n * @example\n * // Instead of importing the module:\n * // import { TaStrapiModule } from '@ta/library-name';\n *\n * // Import the standalone components directly:\n * import { CmsComponent, SaleComponent } from '@ta/library-name';\n */\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    TaUiModule,\n    TaDirectivePipeModule,\n    TaContainerModule,\n    TaFormInputsModule,\n    CmsComponent,\n    RichTextComponent,\n    LinkComponent,\n    TextComponent,\n    SaleComponent,\n  ],\n  exports: [CmsComponent, SaleComponent],\n})\nexport class TaStrapiModule {\n  constructor() {\n    TaTranslationStrapi.getInstance();\n  }\n}\n","/*\n * Public API Surface of cms\n */\n\nexport * from './components/cms/cms.component';\nexport * from './components/sale/sale.component';\n\nexport * from './services/public-api';\n\nexport * from './strapi.module';\n","/*\n * Public API Surface of cms\n */\n\nexport * from './lib/modules/strapi/public-api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["UiLinkComponent","props"],"mappings":"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"}