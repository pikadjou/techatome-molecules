import { signal } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Subject, distinctUntilChanged, of } from 'rxjs';
import { SubscriberHandler } from '@ta/utils';
export class InputBase {
    get value() {
        return this._value();
    }
    set value(value) {
        this._value.set(value);
        this.formControl?.setValue(value);
    }
    constructor(options = {}) {
        this.changeValue$ = new Subject();
        this._value = signal(null);
        this._subscriberHandler = new SubscriberHandler();
        if (options.value$) {
            this._subscriberHandler.registerSubscription(options.value$.subscribe({
                next: value => {
                    if (this.value) {
                        return;
                    }
                    this.value = value;
                },
            }));
        }
        this._value.set(options.value === undefined ? null : options.value);
        this.key = options.key || Math.random().toString();
        this.label = options.label || '';
        this.type = options.type || '';
        this.message = options.message || '';
        this.controlType = options.controlType || '';
        this.validators = options.validators || [];
        this.class = options.class || 'col-12';
        this.children = [];
        this.disabled = options.disabled === true;
        this.visible$ = options.visible$ || of(true);
        if (options.bindStatusToVisible !== false) {
            this._subscriberHandler.registerSubscription(this.visible$.subscribe(visible => {
                this._isVisible = visible;
                if (options.bindStatusToVisible !== false) {
                    if (!visible) {
                        this.disable();
                    }
                    else {
                        this.enable();
                    }
                }
                if (!visible) {
                    this.formControl?.setValue(null);
                }
            }));
        }
    }
    createFormControl(group) {
        if (this.children.length > 0) {
            for (const child of this.children) {
                if (child instanceof InputBase) {
                    child.createFormControl(group);
                }
            }
        }
        else {
            this.formControl = new FormControl(this.value, this.validators);
            if (this.disabled) {
                this.formControl.disable();
            }
            this._subscriberHandler.registerSubscription(this.formControl.valueChanges.pipe(distinctUntilChanged()).subscribe(value => {
                this.value = value;
                this.launchChangeValue();
            }));
            if (group) {
                group.addControl(this.key, this.formControl);
            }
        }
    }
    launchChangeValue() {
        this.changeValue$.next(this.value);
        this.children.forEach(child => child.launchChangeValue());
    }
    disable() {
        this.formControl?.disable();
        this.children.forEach(child => child.disable());
    }
    enable() {
        if (!this._isVisible)
            return;
        this.formControl?.enable();
        this.children.forEach(child => child.enable());
    }
    destroy() {
        this.changeValue$.complete();
        this._subscriberHandler.destroy();
    }
}
//# sourceMappingURL=data:application/json;base64,