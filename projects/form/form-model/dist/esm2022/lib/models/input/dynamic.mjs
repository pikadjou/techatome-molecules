import { FormGroup } from '@angular/forms';
import { Subject } from 'rxjs';
import { InputFactory } from '../factory';
import { InputBase } from './base';
export class InputDynamic extends InputBase {
    constructor(options = {}) {
        super(options);
        this.listChanged$ = new Subject();
        this.firstRender = true;
        this.composedKeyForGroup = true;
        this.inputsGroup = options.inputsGroup || {};
        this.template = options.template || [];
        this.controlType = 'dynamic';
    }
    add(key) {
        const templates = [];
        const value = key && this.value ? this.value[key] : null;
        for (const template of this.template) {
            templates.push(InputFactory.getInput(template.type, {
                ...template.options,
                ...{ value: value ? value[template.options.key ?? ''] : null },
            }));
        }
        this._addControl(templates, key ?? this._inputKey());
        this.listChanged$.next();
    }
    remove(id) {
        if (this.inputsGroup[id]) {
            this.formControl?.removeControl(this.key + '-' + id);
            delete this.inputsGroup[id];
        }
        this.listChanged$.next();
    }
    createFormControl(group) {
        this.formControl = new FormGroup({});
        const inputGroupKeys = Object.keys(this.inputsGroup);
        inputGroupKeys.forEach((key) => {
            this._addControl(this.inputsGroup[key], key);
        });
        if (this.firstRender && this.template && inputGroupKeys.length === 0) {
            this.add();
        }
        group.addControl(this.key, this.formControl);
    }
    _addControl(inputs, key) {
        const childGroup = new FormGroup({});
        inputs.forEach((input) => {
            input.createFormControl(childGroup);
        });
        this.formControl?.addControl(this.composedKeyForGroup ? this.key + '-' + key : key, childGroup);
        this.inputsGroup[key] = inputs;
    }
    _inputKey() {
        return '' + Math.floor(Math.random() * 10000);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvbW9kZWxzL2lucHV0L2R5bmFtaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUFvQixZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDNUQsT0FBTyxFQUFjLFNBQVMsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQWEvQyxNQUFNLE9BQU8sWUFBYSxTQUFRLFNBQW1DO0lBVW5FLFlBQVksVUFBeUIsRUFBRTtRQUNyQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFWakIsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBSW5DLGdCQUFXLEdBQVksSUFBSSxDQUFDO1FBQzVCLHdCQUFtQixHQUFZLElBQUksQ0FBQztRQU1sQyxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO1FBQzdDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7UUFFdkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7SUFDL0IsQ0FBQztJQUVNLEdBQUcsQ0FBQyxHQUFZO1FBQ3JCLE1BQU0sU0FBUyxHQUFxQixFQUFFLENBQUM7UUFDdkMsTUFBTSxLQUFLLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN6RCxLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNyQyxTQUFTLENBQUMsSUFBSSxDQUNaLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRTtnQkFDbkMsR0FBRyxRQUFRLENBQUMsT0FBTztnQkFDbkIsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFO2FBQy9ELENBQUMsQ0FDSCxDQUFDO1FBQ0osQ0FBQztRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFDTSxNQUFNLENBQUMsRUFBVTtRQUN0QixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNyRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDOUIsQ0FBQztRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUNlLGlCQUFpQixDQUFDLEtBQWdCO1FBQ2hELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckMsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDckQsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLGNBQWMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDckUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2IsQ0FBQztRQUNELEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVPLFdBQVcsQ0FBQyxNQUF3QixFQUFFLEdBQVc7UUFDdkQsTUFBTSxVQUFVLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ3ZCLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUMxQixJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUNyRCxVQUFVLENBQ1gsQ0FBQztRQUNGLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBQ2pDLENBQUM7SUFFTyxTQUFTO1FBQ2YsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEZhY3RvcnlJbnB1dFR5cGUsIElucHV0RmFjdG9yeSB9IGZyb20gJy4uL2ZhY3RvcnknO1xuaW1wb3J0IHsgSUlucHV0QmFzZSwgSW5wdXRCYXNlIH0gZnJvbSAnLi9iYXNlJztcblxuaW50ZXJmYWNlIElJbnB1dFRlbXBsYXRlRHluYW1pYyB7XG4gIHR5cGU6IEZhY3RvcnlJbnB1dFR5cGU7XG4gIG9wdGlvbnM6IElJbnB1dENoaWxkcmVuRHluYW1pYztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSUlucHV0Q2hpbGRyZW5EeW5hbWljIGV4dGVuZHMgSUlucHV0QmFzZTxhbnk+IHtcbiAgdGVtcGxhdGVDaGlsZHJlbj86ICgpID0+IElucHV0QmFzZTxhbnk+W107XG59XG5leHBvcnQgaW50ZXJmYWNlIElJbnB1dER5bmFtaWMgZXh0ZW5kcyBJSW5wdXRCYXNlPGFueT4ge1xuICBpbnB1dHNHcm91cD86IHsgW2tleTogc3RyaW5nXTogSW5wdXRCYXNlPGFueT5bXSB9O1xuICB0ZW1wbGF0ZT86IElJbnB1dFRlbXBsYXRlRHluYW1pY1tdO1xufVxuZXhwb3J0IGNsYXNzIElucHV0RHluYW1pYyBleHRlbmRzIElucHV0QmFzZTx7IFtpbmRleDogc3RyaW5nXTogYW55IH0+IHtcbiAgbGlzdENoYW5nZWQkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBpbnB1dHNHcm91cDogeyBba2V5OiBzdHJpbmddOiBJbnB1dEJhc2U8YW55PltdIH07XG4gIHRlbXBsYXRlOiBJSW5wdXRUZW1wbGF0ZUR5bmFtaWNbXTtcbiAgZmlyc3RSZW5kZXI6IGJvb2xlYW4gPSB0cnVlO1xuICBjb21wb3NlZEtleUZvckdyb3VwOiBib29sZWFuID0gdHJ1ZTtcblxuICBvdmVycmlkZSBmb3JtQ29udHJvbD86IEZvcm1Hcm91cDtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJSW5wdXREeW5hbWljID0ge30pIHtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLmlucHV0c0dyb3VwID0gb3B0aW9ucy5pbnB1dHNHcm91cCB8fCB7fTtcbiAgICB0aGlzLnRlbXBsYXRlID0gb3B0aW9ucy50ZW1wbGF0ZSB8fCBbXTtcblxuICAgIHRoaXMuY29udHJvbFR5cGUgPSAnZHluYW1pYyc7XG4gIH1cblxuICBwdWJsaWMgYWRkKGtleT86IHN0cmluZykge1xuICAgIGNvbnN0IHRlbXBsYXRlczogSW5wdXRCYXNlPGFueT5bXSA9IFtdO1xuICAgIGNvbnN0IHZhbHVlID0ga2V5ICYmIHRoaXMudmFsdWUgPyB0aGlzLnZhbHVlW2tleV0gOiBudWxsO1xuICAgIGZvciAoY29uc3QgdGVtcGxhdGUgb2YgdGhpcy50ZW1wbGF0ZSkge1xuICAgICAgdGVtcGxhdGVzLnB1c2goXG4gICAgICAgIElucHV0RmFjdG9yeS5nZXRJbnB1dCh0ZW1wbGF0ZS50eXBlLCB7XG4gICAgICAgICAgLi4udGVtcGxhdGUub3B0aW9ucyxcbiAgICAgICAgICAuLi57IHZhbHVlOiB2YWx1ZSA/IHZhbHVlW3RlbXBsYXRlLm9wdGlvbnMua2V5ID8/ICcnXSA6IG51bGwgfSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuX2FkZENvbnRyb2wodGVtcGxhdGVzLCBrZXkgPz8gdGhpcy5faW5wdXRLZXkoKSk7XG4gICAgdGhpcy5saXN0Q2hhbmdlZCQubmV4dCgpO1xuICB9XG4gIHB1YmxpYyByZW1vdmUoaWQ6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmlucHV0c0dyb3VwW2lkXSkge1xuICAgICAgdGhpcy5mb3JtQ29udHJvbD8ucmVtb3ZlQ29udHJvbCh0aGlzLmtleSArICctJyArIGlkKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmlucHV0c0dyb3VwW2lkXTtcbiAgICB9XG4gICAgdGhpcy5saXN0Q2hhbmdlZCQubmV4dCgpO1xuICB9XG4gIHB1YmxpYyBvdmVycmlkZSBjcmVhdGVGb3JtQ29udHJvbChncm91cDogRm9ybUdyb3VwKTogdm9pZCB7XG4gICAgdGhpcy5mb3JtQ29udHJvbCA9IG5ldyBGb3JtR3JvdXAoe30pO1xuICAgIGNvbnN0IGlucHV0R3JvdXBLZXlzID0gT2JqZWN0LmtleXModGhpcy5pbnB1dHNHcm91cCk7XG4gICAgaW5wdXRHcm91cEtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICB0aGlzLl9hZGRDb250cm9sKHRoaXMuaW5wdXRzR3JvdXBba2V5XSwga2V5KTtcbiAgICB9KTtcbiAgICBpZiAodGhpcy5maXJzdFJlbmRlciAmJiB0aGlzLnRlbXBsYXRlICYmIGlucHV0R3JvdXBLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5hZGQoKTtcbiAgICB9XG4gICAgZ3JvdXAuYWRkQ29udHJvbCh0aGlzLmtleSwgdGhpcy5mb3JtQ29udHJvbCk7XG4gIH1cblxuICBwcml2YXRlIF9hZGRDb250cm9sKGlucHV0czogSW5wdXRCYXNlPGFueT5bXSwga2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBjaGlsZEdyb3VwID0gbmV3IEZvcm1Hcm91cCh7fSk7XG4gICAgaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICBpbnB1dC5jcmVhdGVGb3JtQ29udHJvbChjaGlsZEdyb3VwKTtcbiAgICB9KTtcbiAgICB0aGlzLmZvcm1Db250cm9sPy5hZGRDb250cm9sKFxuICAgICAgdGhpcy5jb21wb3NlZEtleUZvckdyb3VwID8gdGhpcy5rZXkgKyAnLScgKyBrZXkgOiBrZXksXG4gICAgICBjaGlsZEdyb3VwXG4gICAgKTtcbiAgICB0aGlzLmlucHV0c0dyb3VwW2tleV0gPSBpbnB1dHM7XG4gIH1cblxuICBwcml2YXRlIF9pbnB1dEtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcbiAgfVxufVxuIl19