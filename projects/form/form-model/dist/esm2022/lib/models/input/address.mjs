import { InputPanel } from './panel';
import { InputTextBox } from './textbox';
export var EAddressValues;
(function (EAddressValues) {
    EAddressValues["street"] = "street";
    EAddressValues["streetNumber"] = "streetNumber";
    EAddressValues["locality"] = "locality";
    EAddressValues["postalCode"] = "postalCode";
    EAddressValues["country"] = "country";
    EAddressValues["longitude"] = "longitude";
    EAddressValues["latitude"] = "latitude";
})(EAddressValues || (EAddressValues = {}));
export class InputAddress extends InputPanel {
    set value(data) {
        this.children.find((x) => x.key === EAddressValues.street).value =
            data.street;
        this.children.find((x) => x.key === EAddressValues.streetNumber).value =
            data.streetNumber;
        this.children.find((x) => x.key === EAddressValues.country).value =
            data.country;
        this.children.find((x) => x.key === EAddressValues.locality).value =
            data.locality;
        this.children.find((x) => x.key === EAddressValues.postalCode).value =
            data.postalCode;
        this.children.find((x) => x.key === EAddressValues.longitude).value =
            data.longitude;
        this.children.find((x) => x.key === EAddressValues.latitude).value =
            data.latitude;
    }
    constructor(options = {}) {
        super(options);
        this.controlType = 'address';
        this.type = 'address';
        this.children.push(new InputTextBox({
            key: EAddressValues.street,
        }), new InputTextBox({
            key: EAddressValues.streetNumber,
        }), new InputTextBox({
            key: EAddressValues.locality,
        }), new InputTextBox({
            key: EAddressValues.country,
        }), new InputTextBox({
            key: EAddressValues.postalCode,
        }), new InputTextBox({
            key: EAddressValues.longitude,
        }), new InputTextBox({
            key: EAddressValues.latitude,
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvbW9kZWxzL2lucHV0L2FkZHJlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFlLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXpDLE1BQU0sQ0FBTixJQUFZLGNBUVg7QUFSRCxXQUFZLGNBQWM7SUFDeEIsbUNBQWlCLENBQUE7SUFDakIsK0NBQTZCLENBQUE7SUFDN0IsdUNBQXFCLENBQUE7SUFDckIsMkNBQXlCLENBQUE7SUFDekIscUNBQW1CLENBQUE7SUFDbkIseUNBQXVCLENBQUE7SUFDdkIsdUNBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQVJXLGNBQWMsS0FBZCxjQUFjLFFBUXpCO0FBWUQsTUFBTSxPQUFPLFlBQWEsU0FBUSxVQUFVO0lBRzFDLElBQWEsS0FBSyxDQUFDLElBQW1CO1FBQ3BDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLGNBQWMsQ0FBQyxNQUFNLENBQUUsQ0FBQyxLQUFLO1lBQy9ELElBQUksQ0FBQyxNQUFNLENBQUM7UUFDZCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxjQUFjLENBQUMsWUFBWSxDQUFFLENBQUMsS0FBSztZQUNyRSxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLGNBQWMsQ0FBQyxPQUFPLENBQUUsQ0FBQyxLQUFLO1lBQ2hFLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxjQUFjLENBQUMsUUFBUSxDQUFFLENBQUMsS0FBSztZQUNqRSxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLGNBQWMsQ0FBQyxVQUFVLENBQUUsQ0FBQyxLQUFLO1lBQ25FLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssY0FBYyxDQUFDLFNBQVMsQ0FBRSxDQUFDLEtBQUs7WUFDbEUsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxjQUFjLENBQUMsUUFBUSxDQUFFLENBQUMsS0FBSztZQUNqRSxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxZQUFZLFVBQXlCLEVBQUU7UUFDckMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBcEJSLGdCQUFXLEdBQUcsU0FBUyxDQUFDO1FBcUIvQixJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztRQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsSUFBSSxZQUFZLENBQUM7WUFDZixHQUFHLEVBQUUsY0FBYyxDQUFDLE1BQU07U0FDM0IsQ0FBQyxFQUNGLElBQUksWUFBWSxDQUFDO1lBQ2YsR0FBRyxFQUFFLGNBQWMsQ0FBQyxZQUFZO1NBQ2pDLENBQUMsRUFDRixJQUFJLFlBQVksQ0FBQztZQUNmLEdBQUcsRUFBRSxjQUFjLENBQUMsUUFBUTtTQUM3QixDQUFDLEVBQ0YsSUFBSSxZQUFZLENBQUM7WUFDZixHQUFHLEVBQUUsY0FBYyxDQUFDLE9BQU87U0FDNUIsQ0FBQyxFQUNGLElBQUksWUFBWSxDQUFDO1lBQ2YsR0FBRyxFQUFFLGNBQWMsQ0FBQyxVQUFVO1NBQy9CLENBQUMsRUFDRixJQUFJLFlBQVksQ0FBQztZQUNmLEdBQUcsRUFBRSxjQUFjLENBQUMsU0FBUztTQUM5QixDQUFDLEVBQ0YsSUFBSSxZQUFZLENBQUM7WUFDZixHQUFHLEVBQUUsY0FBYyxDQUFDLFFBQVE7U0FDN0IsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJSW5wdXRQYW5lbCwgSW5wdXRQYW5lbCB9IGZyb20gJy4vcGFuZWwnO1xuaW1wb3J0IHsgSW5wdXRUZXh0Qm94IH0gZnJvbSAnLi90ZXh0Ym94JztcblxuZXhwb3J0IGVudW0gRUFkZHJlc3NWYWx1ZXMge1xuICBzdHJlZXQgPSAnc3RyZWV0JyxcbiAgc3RyZWV0TnVtYmVyID0gJ3N0cmVldE51bWJlcicsXG4gIGxvY2FsaXR5ID0gJ2xvY2FsaXR5JyxcbiAgcG9zdGFsQ29kZSA9ICdwb3N0YWxDb2RlJyxcbiAgY291bnRyeSA9ICdjb3VudHJ5JyxcbiAgbG9uZ2l0dWRlID0gJ2xvbmdpdHVkZScsXG4gIGxhdGl0dWRlID0gJ2xhdGl0dWRlJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQWRkcmVzc1ZhbHVlIHtcbiAgc3RyZWV0OiBzdHJpbmc7XG4gIHN0cmVldE51bWJlcjogbnVtYmVyO1xuICBsb2NhbGl0eTogc3RyaW5nO1xuICBwb3N0YWxDb2RlOiBudW1iZXI7XG4gIGNvdW50cnk6IHN0cmluZztcbiAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gIGxhdGl0dWRlOiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIElJbnB1dEFkZHJlc3MgZXh0ZW5kcyBJSW5wdXRQYW5lbCB7fVxuZXhwb3J0IGNsYXNzIElucHV0QWRkcmVzcyBleHRlbmRzIElucHV0UGFuZWwge1xuICBvdmVycmlkZSBjb250cm9sVHlwZSA9ICdhZGRyZXNzJztcblxuICBvdmVycmlkZSBzZXQgdmFsdWUoZGF0YTogSUFkZHJlc3NWYWx1ZSkge1xuICAgIHRoaXMuY2hpbGRyZW4uZmluZCgoeCkgPT4geC5rZXkgPT09IEVBZGRyZXNzVmFsdWVzLnN0cmVldCkhLnZhbHVlID1cbiAgICAgIGRhdGEuc3RyZWV0O1xuICAgIHRoaXMuY2hpbGRyZW4uZmluZCgoeCkgPT4geC5rZXkgPT09IEVBZGRyZXNzVmFsdWVzLnN0cmVldE51bWJlcikhLnZhbHVlID1cbiAgICAgIGRhdGEuc3RyZWV0TnVtYmVyO1xuICAgIHRoaXMuY2hpbGRyZW4uZmluZCgoeCkgPT4geC5rZXkgPT09IEVBZGRyZXNzVmFsdWVzLmNvdW50cnkpIS52YWx1ZSA9XG4gICAgICBkYXRhLmNvdW50cnk7XG4gICAgdGhpcy5jaGlsZHJlbi5maW5kKCh4KSA9PiB4LmtleSA9PT0gRUFkZHJlc3NWYWx1ZXMubG9jYWxpdHkpIS52YWx1ZSA9XG4gICAgICBkYXRhLmxvY2FsaXR5O1xuICAgIHRoaXMuY2hpbGRyZW4uZmluZCgoeCkgPT4geC5rZXkgPT09IEVBZGRyZXNzVmFsdWVzLnBvc3RhbENvZGUpIS52YWx1ZSA9XG4gICAgICBkYXRhLnBvc3RhbENvZGU7XG4gICAgdGhpcy5jaGlsZHJlbi5maW5kKCh4KSA9PiB4LmtleSA9PT0gRUFkZHJlc3NWYWx1ZXMubG9uZ2l0dWRlKSEudmFsdWUgPVxuICAgICAgZGF0YS5sb25naXR1ZGU7XG4gICAgdGhpcy5jaGlsZHJlbi5maW5kKCh4KSA9PiB4LmtleSA9PT0gRUFkZHJlc3NWYWx1ZXMubGF0aXR1ZGUpIS52YWx1ZSA9XG4gICAgICBkYXRhLmxhdGl0dWRlO1xuICB9XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogSUlucHV0QWRkcmVzcyA9IHt9KSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gICAgdGhpcy50eXBlID0gJ2FkZHJlc3MnO1xuICAgIHRoaXMuY2hpbGRyZW4ucHVzaChcbiAgICAgIG5ldyBJbnB1dFRleHRCb3goe1xuICAgICAgICBrZXk6IEVBZGRyZXNzVmFsdWVzLnN0cmVldCxcbiAgICAgIH0pLFxuICAgICAgbmV3IElucHV0VGV4dEJveCh7XG4gICAgICAgIGtleTogRUFkZHJlc3NWYWx1ZXMuc3RyZWV0TnVtYmVyLFxuICAgICAgfSksXG4gICAgICBuZXcgSW5wdXRUZXh0Qm94KHtcbiAgICAgICAga2V5OiBFQWRkcmVzc1ZhbHVlcy5sb2NhbGl0eSxcbiAgICAgIH0pLFxuICAgICAgbmV3IElucHV0VGV4dEJveCh7XG4gICAgICAgIGtleTogRUFkZHJlc3NWYWx1ZXMuY291bnRyeSxcbiAgICAgIH0pLFxuICAgICAgbmV3IElucHV0VGV4dEJveCh7XG4gICAgICAgIGtleTogRUFkZHJlc3NWYWx1ZXMucG9zdGFsQ29kZSxcbiAgICAgIH0pLFxuICAgICAgbmV3IElucHV0VGV4dEJveCh7XG4gICAgICAgIGtleTogRUFkZHJlc3NWYWx1ZXMubG9uZ2l0dWRlLFxuICAgICAgfSksXG4gICAgICBuZXcgSW5wdXRUZXh0Qm94KHtcbiAgICAgICAga2V5OiBFQWRkcmVzc1ZhbHVlcy5sYXRpdHVkZSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuIl19