{"version":3,"file":"ta-form-model.mjs","sources":["../../src/lib/validators/slug.validator.ts","../../src/lib/validators/phone.validator.ts","../../src/lib/models/input/base.ts","../../src/lib/models/input/checkbox.ts","../../src/lib/models/input/textbox.ts","../../src/lib/models/input/colorPicker.ts","../../src/lib/models/input/dropdown.ts","../../src/lib/models/input/images.ts","../../src/lib/models/input/label.ts","../../src/lib/models/input/number.ts","../../src/lib/models/input/panel.ts","../../src/lib/models/input/radio.ts","../../src/lib/models/input/schema.ts","../../src/lib/models/input/textarea.ts","../../src/lib/models/input/upload.ts","../../src/lib/models/input/wysiswyg.ts","../../src/lib/models/factory.ts","../../src/lib/models/input/choices.ts","../../src/lib/models/input/datePicker.ts","../../src/lib/models/input/dynamic.ts","../../src/lib/models/input/email.ts","../../src/lib/models/input/password.ts","../../src/lib/models/input/phone.ts","../../src/lib/models/input/slider.ts","../../src/lib/models/input/switch.ts","../../src/lib/models/input/timePicker.ts","../../src/lib/models/input/address.ts","../../src/lib/models/input/translation.ts","../../src/lib/models/input/culture.ts","../../src/lib/models/input/component.ts","../../src/public-api.ts","../../src/ta-form-model.ts"],"sourcesContent":["import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nexport function slugValidator(): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    const value = control.value as string;\n\n    // Vérifier si la valeur respecte les caractéristiques d'un slug\n    const isValidSlug = /^[a-z0-9]+(?:-[a-z0-9]+)*$/.test(value);\n\n    return isValidSlug ? null : { invalidSlug: true };\n  };\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nexport function phoneValidator(): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    const value = control.value as string;\n\n    // Vérifier si la valeur respecte les caractéristiques d'un slug\n    const isValidSlug = /^[a-z0-9]+(?:-[a-z0-9]+)*$/.test(value);\n\n    return isValidSlug ? null : { validatePhoneNumber: true };\n  };\n}\n","import { AbstractControl, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\n\nimport { ENotificationCode } from '@ta/notification';\nimport { SubscriberHandler } from '@ta/utils';\nimport { Observable, Subject, distinctUntilChanged, of } from 'rxjs';\n\nimport { InputLabel } from './label';\n\nexport interface IInputsError {\n  status: ENotificationCode;\n  message: string;\n}\n\nexport interface IInputBase<T> {\n  value$?: Observable<T>;\n  value?: T;\n  key?: string;\n  label?: string;\n  type?: string;\n  message?: string;\n  controlType?: string;\n  validators?: ValidatorFn[];\n  class?: string;\n  children?: (InputBase<any> | InputLabel)[];\n  disabled?: boolean;\n  visible$?: Observable<boolean>;\n  bindStatusToVisible?: boolean;\n}\n\nexport class InputBase<T> implements IInputBase<T> {\n  key: string;\n  label: string;\n  type: string;\n  message: string;\n  controlType: string;\n  validators: ValidatorFn[];\n  formControl?: AbstractControl;\n  class: string;\n  children: (InputBase<any> | InputLabel)[];\n  disabled: boolean;\n  visible$: Observable<boolean>;\n  changeValue$ = new Subject<T>();\n\n  private _value: T;\n  private _isVisible!: boolean;\n\n  protected _subscriberHandler = new SubscriberHandler();\n\n  get value() {\n    return this._value;\n  }\n  set value(value: T) {\n    this._value = value;\n    this.formControl?.setValue(value);\n  }\n  constructor(options: IInputBase<any> = {}) {\n    if (options.value$) {\n      this._subscriberHandler.registerSubscription(\n        options.value$.subscribe({\n          next: value => {\n            if (this.value) {\n              return;\n            }\n            this.value = value;\n          },\n        })\n      );\n    }\n\n    this._value = options.value === undefined ? null : options.value;\n    this.key = options.key || Math.random().toString();\n    this.label = options.label || '';\n    this.type = options.type || '';\n    this.message = options.message || '';\n    this.controlType = options.controlType || '';\n    this.validators = options.validators || [];\n    this.class = options.class || 'col-12';\n    this.children = [];\n    this.disabled = options.disabled === true;\n\n    this.visible$ = options.visible$ || of(true);\n\n    if (options.bindStatusToVisible !== false) {\n      this._subscriberHandler.registerSubscription(\n        this.visible$.subscribe(visible => {\n          this._isVisible = visible;\n\n          if (options.bindStatusToVisible !== false) {\n            if (!visible) {\n              this.disable();\n            } else {\n              this.enable();\n            }\n          }\n\n          if (!visible) {\n            this.formControl?.setValue(null);\n          }\n        })\n      );\n    }\n  }\n\n  public createFormControl(group?: FormGroup) {\n    if (this.children.length > 0) {\n      for (const child of this.children) {\n        if (child instanceof InputBase) {\n          child.createFormControl(group);\n        }\n      }\n    } else {\n      this.formControl = new FormControl<T>(this.value, this.validators);\n      if (this.disabled) {\n        this.formControl.disable();\n      }\n      this._subscriberHandler.registerSubscription(\n        this.formControl.valueChanges.pipe(distinctUntilChanged()).subscribe(value => {\n          this.value = value;\n          this.launchChangeValue();\n        })\n      );\n      if (group) {\n        group.addControl(this.key, this.formControl);\n      }\n    }\n  }\n\n  public launchChangeValue() {\n    this.changeValue$.next(this.value);\n    this.children.forEach(child => child.launchChangeValue());\n  }\n\n  public disable() {\n    this.formControl?.disable();\n    this.children.forEach(child => child.disable());\n  }\n\n  public enable() {\n    if (!this._isVisible) return;\n    this.formControl?.enable();\n    this.children.forEach(child => child.enable());\n  }\n\n  public destroy() {\n    this.changeValue$.complete();\n    this._subscriberHandler.destroy();\n  }\n}\n","import { IInputBase, InputBase } from './base';\n\nexport interface IInputCheckBox extends IInputBase<boolean> {\n  toggle?: boolean;\n}\n\nexport class InputCheckBox extends InputBase<boolean> {\n  override controlType = 'checkbox';\n\n  constructor(options: IInputCheckBox = {}) {\n    super(options);\n\n    if (options.toggle === true) {\n      this.controlType = 'toggle';\n    }\n\n    if (!this.value) {\n      this.value = false;\n    }\n  }\n}\n","import { TaIconType } from '@ta/icons';\n\nimport { IInputBase, InputBase } from './base';\n\nexport interface IInputTextBox<T> extends IInputBase<T> {\n  type?: string;\n  icon?: TaIconType;\n  iconClicked?: () => void;\n}\n\nexport class InputTextBox<T = string> extends InputBase<T> {\n  override controlType = 'textbox';\n  icon?: TaIconType | null;\n  iconClicked?: () => void;\n\n  constructor(options: IInputTextBox<string> = {}) {\n    super(options);\n    this.type = options.type || 'text';\n    this.icon = options.icon || null;\n    this.iconClicked = options.iconClicked;\n  }\n}\n","import { IInputTextBox, InputTextBox } from './textbox';\n\nexport class InputColorPicker extends InputTextBox {\n  constructor(options: IInputTextBox<string> = {}) {\n    super(options);\n    this.controlType = 'colorPicker';\n  }\n}\n","import { Observable, of } from 'rxjs';\n\nimport { IInputBase, InputBase } from './base';\n\nexport interface IInputDropdown<T> extends IInputBase<T> {\n  options?: Observable<{ id: string; name: string }[]>;\n  multiple?: boolean;\n  showNothingOption?: boolean;\n  withSearch?: boolean;\n  width?: string;\n  valueChanged?: (data?: string) => void;\n}\nexport class InputDropdown<T = string | string[]> extends InputBase<T> {\n  override controlType = 'dropdown';\n  options: Observable<{ id: string; name: string; disabled?: boolean }[]>;\n  multiple: boolean;\n  showNothingOption: boolean = false;\n  withSearch: boolean = false;\n  width?: string;\n\n  constructor(options: IInputDropdown<T> = {}) {\n    super(options);\n    this.options = options['options'] || of([]);\n    this.multiple = options['multiple'] || false;\n    this.showNothingOption = !this.multiple\n      ? !!options.showNothingOption\n      : false;\n    this.width = options.width || '100%';\n    this.withSearch = options.withSearch || false;\n  }\n}\n","import { Picture } from '@ta/services';\nimport { FileData, FileStructure } from '@ta/utils';\nimport { Observable } from 'rxjs';\n\nimport { IInputBase, InputBase } from './base';\n\nexport interface IInputImages extends IInputBase<string[]> {\n  files$?: Observable<FileData[]>;\n  update?: (data: FileStructure[]) => Promise<Picture[]>;\n  onFileDeleted?: (FileData: FileData) => void;\n  removeFile$?: Observable<FileData>;\n}\n\nexport class InputImages extends InputBase<string[]> {\n  public files$!: Observable<FileData[]> | null;\n  public update: ((data: FileStructure[]) => Promise<Picture[]>) | null = null;\n  public fileDeleted?: (FileData: FileData) => void;\n  public removeFile$: Observable<FileData> | null;\n\n  constructor(options: IInputImages = {}) {\n    super(options);\n    if (!this.controlType) {\n      this.controlType = 'images';\n    }\n\n    if (this.value === null) {\n      this.value = [];\n    }\n    this.files$ = options.files$ || null;\n    if (options.update) {\n      this.update = options.update;\n    }\n\n    if (options.onFileDeleted) this.fileDeleted = options.onFileDeleted;\n    this.removeFile$ = options.removeFile$ || null;\n  }\n}\n","import { FormGroup } from '@angular/forms';\n\nimport { IInputBase, InputBase } from './base';\n\nexport interface IInputLabel extends IInputBase<null> {}\nexport class InputLabel extends InputBase<null> implements IInputLabel {\n  constructor(options: IInputLabel = {}) {\n    super(options);\n\n    this.controlType = 'label';\n  }\n\n  public override createFormControl(group?: FormGroup) {}\n}\n","import { IInputTextBox, InputTextBox } from './textbox';\n\nexport class InputNumber extends InputTextBox<number> {\n  override get value() {\n    return Number(super.value);\n  }\n  override set value(value: number) {\n    super.value = Number(value);\n  }\n  constructor(options: IInputTextBox<string> = {}) {\n    super(options);\n    this.type = 'number';\n  }\n}\n","import { IInputBase, InputBase } from './base';\nimport { InputLabel } from './label';\n\ntype classAvailable =\n  | 'with-separator'\n  | 'no-title-space'\n  | 'highlight-title'\n  | string;\n\nexport interface IInputPanel extends IInputBase<null> {\n  children?: (InputBase<any> | InputLabel)[];\n  containerClass?: classAvailable[];\n  contentClass?: string;\n}\n\nexport class InputPanel extends InputBase<any> {\n  containerClass: classAvailable[];\n  contentClass: string;\n  constructor(options: IInputPanel) {\n    super(options);\n    this.controlType = 'panel';\n\n    this.containerClass = options.containerClass || [];\n    this.contentClass = options.contentClass || '';\n    this.children = options.children || [];\n  }\n}\n","import { Observable, of } from 'rxjs';\n\nimport { TaIconType } from '@ta/icons';\n\nimport { IInputBase, InputBase } from './base';\n\nexport interface IInputRadio<T> extends IInputBase<T> {\n  options?: Observable<{ id: T; name?: string; icon?: TaIconType }[]>;\n}\nexport class InputRadio<T> extends InputBase<T> {\n  override controlType = 'radio';\n  options: Observable<{ id: T; name?: string; icon?: TaIconType }[]>;\n\n  constructor(options: IInputRadio<T> = {}) {\n    super(options);\n    this.options = options['options'] || of([]);\n    this.type = 'radioGroup';\n  }\n}\n","import { Picture } from '@ta/services';\nimport { FileStructure } from '@ta/utils';\n\nimport { IInputBase, InputBase } from './base';\n\nexport interface IInputSchema extends IInputBase<string> {\n  update?: (data: FileStructure[]) => Promise<Picture[]>;\n}\n\nexport class InputSchema extends InputBase<string> {\n  public update: ((data: FileStructure[]) => Promise<Picture[]>) | null = null;\n\n  constructor(options: IInputSchema = {}) {\n    super(options);\n    this.controlType = 'schema';\n\n    if (options.update) {\n      this.update = options.update;\n    }\n  }\n}\n","import { IInputBase, InputBase } from './base';\n\nexport interface IInputTextarea<T> extends IInputBase<T> {}\n\nexport class InputTextarea extends InputBase<string> {\n  override controlType = 'textarea';\n\n  constructor(options: IInputTextarea<string> = {}) {\n    super(options);\n  }\n}\n","import { IInputBase, InputBase } from './base';\n\nexport type InputUploadValue = {\n  id: string;\n  url: string;\n  name?: string;\n};\n\nexport interface IInputUpload extends IInputBase<InputUploadValue[]> {\n  confirmButton?: boolean;\n}\n\nexport class InputUpload extends InputBase<InputUploadValue[]> {\n  confirmButton: boolean;\n\n  constructor(options: IInputUpload) {\n    super(options);\n    this.controlType = 'upload';\n    this.confirmButton = options.confirmButton ?? false;\n  }\n\n  public confirmValue(ids: InputUploadValue[]) {\n    this.formControl?.setValue(ids);\n  }\n}\n","import { WysiswgBlockData } from '@ta/wysiswyg';\n\nimport { IInputBase, InputBase } from './base';\n\nexport interface IWysiswyg extends IInputBase<WysiswgBlockData[]> {}\n\nexport class InputWysiswyg extends InputBase<WysiswgBlockData[] | null> {\n  override controlType = 'wysiswyg';\n\n  constructor(options: IWysiswyg = {}) {\n    super(options);\n  }\n}\n","import { InputBase } from './input/base';\nimport { InputCheckBox } from './input/checkbox';\nimport { InputColorPicker } from './input/colorPicker';\nimport { InputDropdown } from './input/dropdown';\nimport { IInputChildrenDynamic } from './input/dynamic';\nimport { InputImages } from './input/images';\nimport { InputLabel } from './input/label';\nimport { InputNumber } from './input/number';\nimport { InputPanel } from './input/panel';\nimport { InputRadio } from './input/radio';\nimport { InputSchema } from './input/schema';\nimport { InputTextarea } from './input/textarea';\nimport { InputTextBox } from './input/textbox';\nimport { InputUpload } from './input/upload';\nimport { InputWysiswyg } from './input/wysiswyg';\n\nexport type FactoryInputType =\n  | 'InputCheckBox'\n  | 'InputRadio'\n  | 'InputColorPicker'\n  | 'InputDropdown'\n  | 'InputImages'\n  | 'InputLabel'\n  | 'InputNumber'\n  | 'InputPanel'\n  | 'InputSchema'\n  | 'InputTextarea'\n  | 'InputTextBox'\n  | 'InputWysiswyg'\n  | 'InputUpload';\nexport class InputFactory {\n  public static getInput(\n    key: FactoryInputType,\n    options: IInputChildrenDynamic\n  ): InputBase<any> {\n    if (options.templateChildren) {\n      options.children = options.templateChildren();\n    }\n\n    switch (key) {\n      case 'InputCheckBox':\n        return new InputCheckBox(options);\n      case 'InputRadio':\n        return new InputRadio(options);\n      case 'InputColorPicker':\n        return new InputColorPicker(options);\n      case 'InputDropdown':\n        return new InputDropdown(options);\n      case 'InputImages':\n        return new InputImages(options);\n      case 'InputLabel':\n        return new InputLabel(options);\n      case 'InputNumber':\n        return new InputNumber(options);\n      case 'InputPanel':\n        return new InputPanel(options);\n      case 'InputSchema':\n        return new InputSchema(options);\n      case 'InputTextarea':\n        return new InputTextarea(options);\n      case 'InputTextBox':\n        return new InputTextBox(options);\n      case 'InputWysiswyg':\n        return new InputWysiswyg(options);\n      case 'InputUpload':\n        return new InputUpload(options);\n      default:\n        return new InputTextBox(options);\n    }\n  }\n}\n","import { TemplateRef } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { IInputDropdown, InputDropdown } from './dropdown';\n\nexport type InputChoicesOption = {\n  id: string;\n  name: string;\n  disabled?: boolean;\n  data: any;\n};\n\nexport interface IInputChoices extends IInputDropdown<string[]> {\n  onlyTemplate?: boolean;\n  options?: Observable<InputChoicesOption[]>;\n  advancedSearch$?: (search?: string) => Observable<InputChoicesOption[]>;\n  choiceTemplate?: {\n    one?: TemplateRef<any>;\n    list?: TemplateRef<any>;\n  };\n  showNullableFields?: boolean;\n}\nexport class InputChoices extends InputDropdown<string[]> {\n  override controlType = 'choices';\n  override options!: Observable<InputChoicesOption[]>;\n\n  public onlyTemplate?: boolean;\n  public advancedSearch$: ((search?: string) => Observable<InputChoicesOption[]>) | null;\n  public choiceTemplate?: {\n    one?: TemplateRef<any>;\n    list?: TemplateRef<any>;\n  };\n  public showNullableFields: boolean;\n\n  constructor(options: IInputChoices = {}) {\n    super(options);\n\n    this.onlyTemplate = options.onlyTemplate;\n    this.advancedSearch$ = options['advancedSearch$'] || null;\n    this.choiceTemplate = options.choiceTemplate;\n    this.showNullableFields = options.showNullableFields ?? false;\n  }\n}\n","import { IInputBase, InputBase } from './base';\n\nexport interface IInputDatePicker\n  extends IInputBase<\n    string | Partial<{ start: Date | null; end: Date | null }>\n  > {\n  minDate?: Date | 'today';\n  maxDate?: Date | 'today';\n  rangeEnabled?: boolean;\n}\n\nexport class InputDatePicker extends InputBase<\n  Date | Partial<{ start: Date | null; end: Date | null }>\n> {\n  minDate: Date | null;\n  maxDate: Date | null;\n  rangeEnabled: boolean;\n\n  constructor(options: IInputDatePicker = {}) {\n    super(options);\n    this.controlType = 'datePicker';\n\n    this.minDate = this.parseDate(options.minDate);\n    this.maxDate = this.parseDate(options.maxDate);\n    this.rangeEnabled = options.rangeEnabled ?? false;\n  }\n\n  public parseDate(date?: Date | 'today'): Date | null {\n    if (!date) {\n      return null;\n    }\n\n    if (date instanceof Date) {\n      return date;\n    }\n\n    switch (date) {\n      case 'today':\n        return new Date();\n      default:\n        return new Date(date);\n    }\n  }\n}\n","import { FormGroup } from '@angular/forms';\n\nimport { Subject } from 'rxjs';\n\nimport { FactoryInputType, InputFactory } from '../factory';\nimport { IInputBase, InputBase } from './base';\n\ninterface IInputTemplateDynamic {\n  type: FactoryInputType;\n  options: IInputChildrenDynamic;\n}\nexport interface IInputChildrenDynamic extends IInputBase<any> {\n  templateChildren?: () => InputBase<any>[];\n}\nexport interface IInputDynamic extends IInputBase<any> {\n  inputsGroup?: { [key: string]: InputBase<any>[] };\n  template?: IInputTemplateDynamic[];\n}\nexport class InputDynamic extends InputBase<{ [index: string]: any }> {\n  listChanged$ = new Subject<void>();\n\n  inputsGroup: { [key: string]: InputBase<any>[] };\n  template: IInputTemplateDynamic[];\n  firstRender: boolean = true;\n  composedKeyForGroup: boolean = true;\n\n  override formControl?: FormGroup;\n\n  constructor(options: IInputDynamic = {}) {\n    super(options);\n    this.inputsGroup = options.inputsGroup || {};\n    this.template = options.template || [];\n\n    this.controlType = 'dynamic';\n  }\n\n  public add(key?: string) {\n    const templates: InputBase<any>[] = [];\n    const value = key && this.value ? this.value[key] : null;\n    for (const template of this.template) {\n      templates.push(\n        InputFactory.getInput(template.type, {\n          ...template.options,\n          ...{ value: value ? value[template.options.key ?? ''] : null },\n        })\n      );\n    }\n    this._addControl(templates, key ?? this._inputKey());\n    this.listChanged$.next();\n  }\n  public remove(id: string) {\n    if (this.inputsGroup[id]) {\n      this.formControl?.removeControl(this.key + '-' + id);\n      delete this.inputsGroup[id];\n    }\n    this.listChanged$.next();\n  }\n  public override createFormControl(group: FormGroup): void {\n    this.formControl = new FormGroup({});\n    const inputGroupKeys = Object.keys(this.inputsGroup);\n    inputGroupKeys.forEach((key) => {\n      this._addControl(this.inputsGroup[key], key);\n    });\n    if (this.firstRender && this.template && inputGroupKeys.length === 0) {\n      this.add();\n    }\n    group.addControl(this.key, this.formControl);\n  }\n\n  private _addControl(inputs: InputBase<any>[], key: string): void {\n    const childGroup = new FormGroup({});\n    inputs.forEach((input) => {\n      input.createFormControl(childGroup);\n    });\n    this.formControl?.addControl(\n      this.composedKeyForGroup ? this.key + '-' + key : key,\n      childGroup\n    );\n    this.inputsGroup[key] = inputs;\n  }\n\n  private _inputKey(): string {\n    return '' + Math.floor(Math.random() * 10000);\n  }\n}\n","import { Validators } from '@angular/forms';\n\nimport { IInputTextBox, InputTextBox } from './textbox';\n\nexport class InputEmail extends InputTextBox {\n  constructor(options: IInputTextBox<string> = {}) {\n    super(options);\n    this.type = 'email';\n    this.validators.push(Validators.email);\n  }\n}\n","import { Validators } from '@angular/forms';\n\nimport { IInputTextBox, InputTextBox } from './textbox';\n\nexport class InputPassword extends InputTextBox {\n  constructor(options: IInputTextBox<string> = {}) {\n    super(options);\n    this.type = 'password';\n    this.validators.push(Validators.required);\n  }\n}\n","import { phoneValidator } from '../../validators/phone.validator';\nimport { InputBase } from './base';\nimport { IInputTextBox } from './textbox';\n\nexport class InputPhone extends InputBase<string> {\n  override controlType = 'phone';\n  preferredCountries: string[];\n\n  constructor(options: IInputTextBox<string> = {}) {\n    super(options);\n    this.type = 'tel';\n    this.preferredCountries = ['be', 'fr'];\n\n    this.validators.push(phoneValidator());\n  }\n}\n","import { IInputBase, InputBase } from './base';\n\nexport interface IInputSlider extends IInputBase<number> {\n  min?: number;\n  max?: number;\n}\n\nexport class InputSlider extends InputBase<number> {\n  public min: number;\n  public max: number;\n\n  override controlType = 'slider';\n\n  constructor(options: IInputSlider = {}) {\n    super(options);\n\n    this.min = options.min || 0;\n    this.max = options.max || 100;\n  }\n}\n","import { signal } from '@angular/core';\n\nimport { tap } from 'rxjs/operators';\n\nimport { Observable } from 'rxjs';\n\nimport { IInputBase, InputBase } from './base';\nimport { IInputDropdown } from './dropdown';\n\nexport interface IFormSwitch extends IInputBase<unknown> {\n  match: Observable<\n    | { type: 'textbox' | 'checkbox' | 'number' | 'datePicker'; prop: unknown }\n    | { type: 'dropdown'; prop: IInputDropdown<string> }\n  >;\n}\n\nexport class InputSwitch extends InputBase<unknown> {\n  matchtype = signal<string>('');\n\n  constructor(options: IFormSwitch) {\n    super(options);\n    this.controlType = 'switch';\n\n    this._subscriberHandler.registerSubscription(\n      options.match\n        .pipe(\n          tap(match => Object.assign(this, match.prop)),\n          tap(match => this.matchtype.set(match.type))\n        )\n        .subscribe()\n    );\n  }\n}\n","import { IInputTextBox, InputTextBox } from './textbox';\n\nexport interface IInputTimePicker extends IInputTextBox<string> {}\n\nexport class InputTimePicker extends InputTextBox {\n  constructor(options: IInputTimePicker = {}) {\n    super(options);\n    this.type = 'time';\n    this.controlType = 'timePicker';\n  }\n}\n","import { IInputPanel, InputPanel } from './panel';\nimport { InputTextBox } from './textbox';\n\nexport enum EAddressValues {\n  street = 'street',\n  streetNumber = 'streetNumber',\n  locality = 'locality',\n  postalCode = 'postalCode',\n  country = 'country',\n  longitude = 'longitude',\n  latitude = 'latitude',\n}\n\nexport interface IAddressValue {\n  street: string;\n  streetNumber: number;\n  locality: string;\n  postalCode: number;\n  country: string;\n  longitude: number;\n  latitude: number;\n}\nexport interface IInputAddress extends IInputPanel {}\nexport class InputAddress extends InputPanel {\n  override controlType = 'address';\n\n  override set value(data: IAddressValue) {\n    this.children.find((x) => x.key === EAddressValues.street)!.value =\n      data.street;\n    this.children.find((x) => x.key === EAddressValues.streetNumber)!.value =\n      data.streetNumber;\n    this.children.find((x) => x.key === EAddressValues.country)!.value =\n      data.country;\n    this.children.find((x) => x.key === EAddressValues.locality)!.value =\n      data.locality;\n    this.children.find((x) => x.key === EAddressValues.postalCode)!.value =\n      data.postalCode;\n    this.children.find((x) => x.key === EAddressValues.longitude)!.value =\n      data.longitude;\n    this.children.find((x) => x.key === EAddressValues.latitude)!.value =\n      data.latitude;\n  }\n\n  constructor(options: IInputAddress = {}) {\n    super(options);\n    this.type = 'address';\n    this.children.push(\n      new InputTextBox({\n        key: EAddressValues.street,\n      }),\n      new InputTextBox({\n        key: EAddressValues.streetNumber,\n      }),\n      new InputTextBox({\n        key: EAddressValues.locality,\n      }),\n      new InputTextBox({\n        key: EAddressValues.country,\n      }),\n      new InputTextBox({\n        key: EAddressValues.postalCode,\n      }),\n      new InputTextBox({\n        key: EAddressValues.longitude,\n      }),\n      new InputTextBox({\n        key: EAddressValues.latitude,\n      })\n    );\n  }\n}\n","import { FormGroup } from '@angular/forms';\n\nimport { Culture } from '@ta/utils';\n\nimport { IInputDynamic, InputDynamic } from './dynamic';\n\nexport interface IInputTranslation extends IInputDynamic {\n  mainCulture?: Culture;\n}\n\nexport class InputTranslation extends InputDynamic {\n  mainCulture: Culture | null;\n\n  constructor(options: IInputTranslation) {\n    super(options);\n    this.controlType = 'translation';\n\n    this.firstRender = false;\n    this.composedKeyForGroup = false;\n    this.mainCulture = options.mainCulture ?? null;\n  }\n\n  public override add(culture: string) {\n    super.add(culture);\n  }\n  public override createFormControl(group: FormGroup) {\n    super.createFormControl(group);\n\n    this._fill();\n  }\n\n  private _fill() {\n    if (this.mainCulture) {\n      this.add(Culture[this.mainCulture]);\n    }\n\n    for (const key of Object.keys(this.value)) {\n      this.add(key);\n    }\n  }\n}\n","import { Culture, extractEnum } from '@ta/utils';\nimport { of } from 'rxjs';\n\nimport { IInputDropdown, InputDropdown } from './dropdown';\n\nexport interface IInputCulture extends Omit<IInputDropdown<string>, 'options'> {}\n\nexport class InputCulture extends InputDropdown<string> {\n  override controlType = 'culture';\n\n  constructor(options: IInputCulture = {}) {\n    super({\n      ...options,\n      options: of(\n        extractEnum(Culture, true).map(item => ({\n          id: item.value.toString(),\n          name: 'ui.culture.long.' + item.value,\n        }))\n      ),\n    });\n  }\n}\n","import { TemplateRef } from '@angular/core';\r\n\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { TaIconType } from '@ta/icons';\r\nimport { Logger } from '@ta/server';\r\n\r\nimport { IInputBase, InputBase } from './base';\r\n\r\nexport type TypeComponentInputToken = {\r\n  selectedValue$: Subject<string>;\r\n};\r\nexport interface IInputComponent<T> extends IInputBase<T> {\r\n  icon?: TaIconType;\r\n  template?: TemplateRef<TypeComponentInputToken>;\r\n}\r\n\r\nexport class InputComponent extends InputBase<string> {\r\n  override controlType = 'component';\r\n  icon?: TaIconType | null;\r\n  template?: TemplateRef<TypeComponentInputToken>;\r\n\r\n  readonly selectedValue$ = new Subject<string>();\r\n\r\n  constructor(options: IInputComponent<string> = {}) {\r\n    super(options);\r\n    this.icon = options.icon || null;\r\n    this.template = options.template;\r\n\r\n    if (!this.template) {\r\n      Logger.LogError('No template for InputComponent');\r\n    }\r\n\r\n    this._subscriberHandler.registerSubscription(\r\n      this.selectedValue$.subscribe({\r\n        next: value => (this.value = value),\r\n      })\r\n    );\r\n  }\r\n}\r\n","/*\n * Public API Surface of form-model\n */\n\nexport * from './lib/validators/slug.validator';\nexport * from './lib/validators/phone.validator';\n\nexport * from './lib/models/public-api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}