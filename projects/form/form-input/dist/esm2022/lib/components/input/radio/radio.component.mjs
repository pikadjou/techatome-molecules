import { AsyncPipe, NgClass, NgFor, NgIf } from '@angular/common';
import { Component } from '@angular/core';
import { LocalIconComponent } from '@ta/icons';
import { TranslatePipe } from '@ta/translation';
import { TaAbstractInputComponent } from '../../abstract.component';
import { FormLabelComponent } from '../../label/label.component';
import * as i0 from "@angular/core";
export class RadioComponent extends TaAbstractInputComponent {
    constructor() {
        super();
    }
    iconSize(option) {
        return this.hasLabel(option) ? 'xs' : 'sm';
    }
    hasLabel(option) {
        return !!option.name && option.name.length > 0;
    }
    onOptionClicked(optionId) {
        if (this.input.disabled)
            return;
        if (this.input.value === optionId) {
            this.input.formControl?.setValue(null);
        }
        else {
            this.input.formControl?.setValue(optionId);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: RadioComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.14", type: RadioComponent, isStandalone: true, selector: "ta-input-radio", usesInheritance: true, ngImport: i0, template: "<div class=\"radio-label\">\n  <ta-form-label [input]=\"this.input\"></ta-form-label>\n</div>\n\n<div class=\"radio-container\">\n  @for (option of this.input.options | async; track option.id) {\n    <div\n      class=\"radio-element\"\n      [ngClass]=\"{\n        validated: this.input.value === option.id,\n        disabled: this.input.disabled,\n      }\"\n      (click)=\"this.onOptionClicked(option.id)\"\n    >\n      <div\n        [ngClass]=\"{\n          'button-with-icon': this.hasLabel(option),\n          'only-icon': !this.hasLabel(option),\n        }\"\n      >\n        @if (option.icon) {\n          <ta-local-icon [type]=\"option.icon\" [size]=\"this.iconSize(option)\"> </ta-local-icon>\n        }\n        @if (option.name) {\n          <span>\n            {{ option.name | translate }}\n          </span>\n        }\n      </div>\n    </div>\n  }\n</div>\n", styles: [".radio-label{display:block;padding-bottom:.5em}.button-with-icon{display:flex;flex-direction:row;justify-content:flex-start;align-items:center;column-gap:8px}.only-icon{margin-left:auto;margin-right:auto}.radio-container{display:flex!important;flex-direction:row;justify-content:space-between}.radio-container .radio-element{display:flex;height:50px;width:45%;border:2px solid var(--ta-neutral-400);border-radius:20px;box-sizing:border-box;align-items:center;gap:8px;justify-content:center;color:var(--ta-neutral-600);font-size:var(--ta-font-body-md-default-size);line-height:var(--ta-font-body-md-default-line);font-weight:var(--ta-font-body-md-default-weight);line-height:28px;font-weight:500}.radio-container .radio-element app-local-icon{opacity:.4}.radio-container .radio-element.validated{border:2px solid var(--ta-surface-brand-primary)}.radio-container .radio-element.validated app-local-icon{opacity:1}.radio-container .radio-element.validated span{color:var(--ta-neutral-900)}.radio-container .radio-element.disabled{opacity:.4}\n"], dependencies: [{ kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "component", type: LocalIconComponent, selector: "ta-local-icon", inputs: ["type", "size", "rotation"] }, { kind: "component", type: FormLabelComponent, selector: "ta-form-label", inputs: ["input", "withMarginBottom"] }, { kind: "pipe", type: TranslatePipe, name: "translate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: RadioComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-input-radio', standalone: true, imports: [NgIf, NgFor, NgClass, AsyncPipe, LocalIconComponent, FormLabelComponent, TranslatePipe], template: "<div class=\"radio-label\">\n  <ta-form-label [input]=\"this.input\"></ta-form-label>\n</div>\n\n<div class=\"radio-container\">\n  @for (option of this.input.options | async; track option.id) {\n    <div\n      class=\"radio-element\"\n      [ngClass]=\"{\n        validated: this.input.value === option.id,\n        disabled: this.input.disabled,\n      }\"\n      (click)=\"this.onOptionClicked(option.id)\"\n    >\n      <div\n        [ngClass]=\"{\n          'button-with-icon': this.hasLabel(option),\n          'only-icon': !this.hasLabel(option),\n        }\"\n      >\n        @if (option.icon) {\n          <ta-local-icon [type]=\"option.icon\" [size]=\"this.iconSize(option)\"> </ta-local-icon>\n        }\n        @if (option.name) {\n          <span>\n            {{ option.name | translate }}\n          </span>\n        }\n      </div>\n    </div>\n  }\n</div>\n", styles: [".radio-label{display:block;padding-bottom:.5em}.button-with-icon{display:flex;flex-direction:row;justify-content:flex-start;align-items:center;column-gap:8px}.only-icon{margin-left:auto;margin-right:auto}.radio-container{display:flex!important;flex-direction:row;justify-content:space-between}.radio-container .radio-element{display:flex;height:50px;width:45%;border:2px solid var(--ta-neutral-400);border-radius:20px;box-sizing:border-box;align-items:center;gap:8px;justify-content:center;color:var(--ta-neutral-600);font-size:var(--ta-font-body-md-default-size);line-height:var(--ta-font-body-md-default-line);font-weight:var(--ta-font-body-md-default-weight);line-height:28px;font-weight:500}.radio-container .radio-element app-local-icon{opacity:.4}.radio-container .radio-element.validated{border:2px solid var(--ta-surface-brand-primary)}.radio-container .radio-element.validated app-local-icon{opacity:1}.radio-container .radio-element.validated span{color:var(--ta-neutral-900)}.radio-container .radio-element.disabled{opacity:.4}\n"] }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb21wb25lbnRzL2lucHV0L3JhZGlvL3JhZGlvLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy9pbnB1dC9yYWRpby9yYWRpby5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUcxQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQVNqRSxNQUFNLE9BQU8sY0FBZSxTQUFRLHdCQUF5QztJQUMzRTtRQUNFLEtBQUssRUFBRSxDQUFDO0lBQ1YsQ0FBQztJQUVNLFFBQVEsQ0FBQyxNQUF5QjtRQUN2QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzdDLENBQUM7SUFFTSxRQUFRLENBQUMsTUFBeUI7UUFDdkMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELGVBQWUsQ0FBQyxRQUFhO1FBQzNCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRO1lBQUUsT0FBTztRQUVoQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxDQUFDO2FBQU0sQ0FBQztZQUNOLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QyxDQUFDO0lBQ0gsQ0FBQzsrR0FyQlUsY0FBYzttR0FBZCxjQUFjLGlHQ2xCM0IsKzJCQWdDQSwwa0NEaEJ5QixPQUFPLCtFQUFFLFNBQVMsOENBQUUsa0JBQWtCLGdHQUFFLGtCQUFrQiw0RkFBRSxhQUFhOzs0RkFFckYsY0FBYztrQkFQMUIsU0FBUzsrQkFDRSxnQkFBZ0IsY0FHZCxJQUFJLFdBQ1AsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsYUFBYSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNQaXBlLCBOZ0NsYXNzLCBOZ0ZvciwgTmdJZiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSW5wdXRSYWRpbyB9IGZyb20gJ0B0YS9mb3JtLW1vZGVsJztcbmltcG9ydCB7IExvY2FsSWNvbkNvbXBvbmVudCB9IGZyb20gJ0B0YS9pY29ucyc7XG5pbXBvcnQgeyBUYVNpemVzIH0gZnJvbSAnQHRhL3N0eWxlcyc7XG5pbXBvcnQgeyBUcmFuc2xhdGVQaXBlIH0gZnJvbSAnQHRhL3RyYW5zbGF0aW9uJztcblxuaW1wb3J0IHsgVGFBYnN0cmFjdElucHV0Q29tcG9uZW50IH0gZnJvbSAnLi4vLi4vYWJzdHJhY3QuY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1MYWJlbENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xhYmVsL2xhYmVsLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhLWlucHV0LXJhZGlvJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3JhZGlvLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vcmFkaW8uY29tcG9uZW50LnNjc3MnXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW05nSWYsIE5nRm9yLCBOZ0NsYXNzLCBBc3luY1BpcGUsIExvY2FsSWNvbkNvbXBvbmVudCwgRm9ybUxhYmVsQ29tcG9uZW50LCBUcmFuc2xhdGVQaXBlXSxcbn0pXG5leHBvcnQgY2xhc3MgUmFkaW9Db21wb25lbnQgZXh0ZW5kcyBUYUFic3RyYWN0SW5wdXRDb21wb25lbnQ8SW5wdXRSYWRpbzxhbnk+PiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgaWNvblNpemUob3B0aW9uOiB7IG5hbWU/OiBzdHJpbmcgfSk6IFRhU2l6ZXMge1xuICAgIHJldHVybiB0aGlzLmhhc0xhYmVsKG9wdGlvbikgPyAneHMnIDogJ3NtJztcbiAgfVxuXG4gIHB1YmxpYyBoYXNMYWJlbChvcHRpb246IHsgbmFtZT86IHN0cmluZyB9KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhb3B0aW9uLm5hbWUgJiYgb3B0aW9uLm5hbWUubGVuZ3RoID4gMDtcbiAgfVxuXG4gIG9uT3B0aW9uQ2xpY2tlZChvcHRpb25JZDogYW55KSB7XG4gICAgaWYgKHRoaXMuaW5wdXQuZGlzYWJsZWQpIHJldHVybjtcblxuICAgIGlmICh0aGlzLmlucHV0LnZhbHVlID09PSBvcHRpb25JZCkge1xuICAgICAgdGhpcy5pbnB1dC5mb3JtQ29udHJvbD8uc2V0VmFsdWUobnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5wdXQuZm9ybUNvbnRyb2w/LnNldFZhbHVlKG9wdGlvbklkKTtcbiAgICB9XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJyYWRpby1sYWJlbFwiPlxuICA8dGEtZm9ybS1sYWJlbCBbaW5wdXRdPVwidGhpcy5pbnB1dFwiPjwvdGEtZm9ybS1sYWJlbD5cbjwvZGl2PlxuXG48ZGl2IGNsYXNzPVwicmFkaW8tY29udGFpbmVyXCI+XG4gIEBmb3IgKG9wdGlvbiBvZiB0aGlzLmlucHV0Lm9wdGlvbnMgfCBhc3luYzsgdHJhY2sgb3B0aW9uLmlkKSB7XG4gICAgPGRpdlxuICAgICAgY2xhc3M9XCJyYWRpby1lbGVtZW50XCJcbiAgICAgIFtuZ0NsYXNzXT1cIntcbiAgICAgICAgdmFsaWRhdGVkOiB0aGlzLmlucHV0LnZhbHVlID09PSBvcHRpb24uaWQsXG4gICAgICAgIGRpc2FibGVkOiB0aGlzLmlucHV0LmRpc2FibGVkLFxuICAgICAgfVwiXG4gICAgICAoY2xpY2spPVwidGhpcy5vbk9wdGlvbkNsaWNrZWQob3B0aW9uLmlkKVwiXG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICBbbmdDbGFzc109XCJ7XG4gICAgICAgICAgJ2J1dHRvbi13aXRoLWljb24nOiB0aGlzLmhhc0xhYmVsKG9wdGlvbiksXG4gICAgICAgICAgJ29ubHktaWNvbic6ICF0aGlzLmhhc0xhYmVsKG9wdGlvbiksXG4gICAgICAgIH1cIlxuICAgICAgPlxuICAgICAgICBAaWYgKG9wdGlvbi5pY29uKSB7XG4gICAgICAgICAgPHRhLWxvY2FsLWljb24gW3R5cGVdPVwib3B0aW9uLmljb25cIiBbc2l6ZV09XCJ0aGlzLmljb25TaXplKG9wdGlvbilcIj4gPC90YS1sb2NhbC1pY29uPlxuICAgICAgICB9XG4gICAgICAgIEBpZiAob3B0aW9uLm5hbWUpIHtcbiAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIHt7IG9wdGlvbi5uYW1lIHwgdHJhbnNsYXRlIH19XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICB9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxuPC9kaXY+XG4iXX0=