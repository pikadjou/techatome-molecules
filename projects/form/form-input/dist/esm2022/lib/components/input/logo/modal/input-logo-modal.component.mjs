import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { map } from 'rxjs';
import { FontIconComponent } from '@ta/icons';
import { TranslatePipe } from '@ta/translation';
import { ButtonComponent, DualButtonComponent, TitleComponent } from '@ta/ui';
import { TaBaseModal, TemporaryFile, pickImages } from '@ta/utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class InputLogoModal extends TaBaseModal {
    constructor(dialogRef, data) {
        super();
        this.dialogRef = dialogRef;
        this.data = data;
        this.selection = null;
        this.tempFiles = new TemporaryFile();
        this.uploadPics = async () => {
            const pics = await pickImages();
            if (pics.length > 0) {
                if (this.data.input.update) {
                    this.tempFiles.addFiles(pics);
                    // For logo, pass only the first image (not an array)
                    this.data.input.update(pics[0]);
                }
                // For logo, automatically select the first uploaded image
                this.selection = pics[0].localUrl;
            }
        };
        this.selected = () => {
            this.dialogRef.close(this.selection);
        };
        this.cancel = () => {
            this.dialogRef.close(undefined);
        };
        this.clearSelection = () => {
            this.selection = null;
        };
        this.dialogRef.addPanelClass(['full-screen-modal', 'forced']);
        this.selection = this.data.selection;
    }
    ngOnInit() {
        if (this.data.input.availableFile$) {
            this._registerSubscription(this.data.input.availableFile$.subscribe(() => this.tempFiles.removeAll()));
        }
    }
    getPics$() {
        return this.data.input.availableFile$?.pipe(map(file => ({
            ...file,
            isSelected: this.selection === file.url,
        })));
    }
    onFileSelected(file) {
        // For logo, only one selection is allowed
        this.selection = this.selection === file.url ? null : file.url;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InputLogoModal, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: InputLogoModal, isStandalone: true, selector: "ng-component", usesInheritance: true, ngImport: i0, template: "<div class=\"p-space-xl flex-column\">\r\n  <div class=\"flex-column align-center\">\r\n    <ta-title [level]=\"3\">{{ 'input.logo.modal.title' | translate }}</ta-title>\r\n    \r\n    @if (this.selection) {\r\n      <div class=\"flex-column align-center mt-space-lg mb-space-lg\">\r\n        <img [src]=\"this.selection\" alt=\"{{ 'input.logo.modal.current-alt' | translate }}\" class=\"selected-logo bdr-radius-rounded\" />\r\n        <p class=\"mt-space-sm\">{{ 'input.logo.modal.current-description' | translate }}</p>\r\n      </div>\r\n    }\r\n\r\n    <div class=\"flex-column g-space-md full-width\" style=\"max-width: 300px;\">\r\n      <ta-button \r\n        type=\"primary\" \r\n        (action)=\"this.uploadPics()\"\r\n        [options]=\"{ class: 'full-width' }\"\r\n        icon=\"add\"\r\n      >\r\n        {{ 'input.logo.modal.choose' | translate }}\r\n      </ta-button>\r\n      \r\n      @if (this.selection) {\r\n        <ta-button \r\n          type=\"secondary\" \r\n          (action)=\"this.clearSelection()\"\r\n          [options]=\"{ class: 'full-width' }\"\r\n        >\r\n          {{ 'input.logo.modal.clear' | translate }}\r\n        </ta-button>\r\n      }\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"mt-space-xl pt-space-lg\" style=\"border-top: 1px solid var(--ta-border-secondary);\">\r\n    <ta-dual-button\r\n      [isFull]=\"true\"\r\n      [first]=\"{\r\n        icon: 'close',\r\n        label: 'input.logo.modal.cancel',\r\n        callback: this.cancel,\r\n      }\"\r\n      [second]=\"{\r\n        icon: 'check-line',\r\n        label: 'input.logo.modal.confirm',\r\n        callback: this.selected,\r\n      }\"\r\n    ></ta-dual-button>\r\n  </div>\r\n</div>", styles: [".selected-logo{width:150px;height:150px;object-fit:cover;border:2px solid var(--ta-border-secondary)}p{margin:0;color:var(--ta-text-secondary);font-size:var(--ta-font-body-sm-default-size);line-height:var(--ta-font-body-sm-default-line);font-weight:var(--ta-font-body-sm-default-weight)}\n"], dependencies: [{ kind: "component", type: ButtonComponent, selector: "ta-button", inputs: ["state", "type", "size", "icon", "options", "stopPropagationActivation"], outputs: ["action"] }, { kind: "component", type: TitleComponent, selector: "ta-title", inputs: ["level", "isTheme", "isBold"] }, { kind: "component", type: DualButtonComponent, selector: "ta-dual-button", inputs: ["isFull", "first", "second", "type"] }, { kind: "pipe", type: TranslatePipe, name: "translate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: InputLogoModal, decorators: [{
            type: Component,
            args: [{ selector: '', standalone: true, imports: [ButtonComponent, FontIconComponent, TitleComponent, DualButtonComponent, TranslatePipe], template: "<div class=\"p-space-xl flex-column\">\r\n  <div class=\"flex-column align-center\">\r\n    <ta-title [level]=\"3\">{{ 'input.logo.modal.title' | translate }}</ta-title>\r\n    \r\n    @if (this.selection) {\r\n      <div class=\"flex-column align-center mt-space-lg mb-space-lg\">\r\n        <img [src]=\"this.selection\" alt=\"{{ 'input.logo.modal.current-alt' | translate }}\" class=\"selected-logo bdr-radius-rounded\" />\r\n        <p class=\"mt-space-sm\">{{ 'input.logo.modal.current-description' | translate }}</p>\r\n      </div>\r\n    }\r\n\r\n    <div class=\"flex-column g-space-md full-width\" style=\"max-width: 300px;\">\r\n      <ta-button \r\n        type=\"primary\" \r\n        (action)=\"this.uploadPics()\"\r\n        [options]=\"{ class: 'full-width' }\"\r\n        icon=\"add\"\r\n      >\r\n        {{ 'input.logo.modal.choose' | translate }}\r\n      </ta-button>\r\n      \r\n      @if (this.selection) {\r\n        <ta-button \r\n          type=\"secondary\" \r\n          (action)=\"this.clearSelection()\"\r\n          [options]=\"{ class: 'full-width' }\"\r\n        >\r\n          {{ 'input.logo.modal.clear' | translate }}\r\n        </ta-button>\r\n      }\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"mt-space-xl pt-space-lg\" style=\"border-top: 1px solid var(--ta-border-secondary);\">\r\n    <ta-dual-button\r\n      [isFull]=\"true\"\r\n      [first]=\"{\r\n        icon: 'close',\r\n        label: 'input.logo.modal.cancel',\r\n        callback: this.cancel,\r\n      }\"\r\n      [second]=\"{\r\n        icon: 'check-line',\r\n        label: 'input.logo.modal.confirm',\r\n        callback: this.selected,\r\n      }\"\r\n    ></ta-dual-button>\r\n  </div>\r\n</div>", styles: [".selected-logo{width:150px;height:150px;object-fit:cover;border:2px solid var(--ta-border-secondary)}p{margin:0;color:var(--ta-text-secondary);font-size:var(--ta-font-body-sm-default-size);line-height:var(--ta-font-body-sm-default-line);font-weight:var(--ta-font-body-sm-default-weight)}\n"] }]
        }], ctorParameters: () => [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }] });
//# sourceMappingURL=data:application/json;base64,