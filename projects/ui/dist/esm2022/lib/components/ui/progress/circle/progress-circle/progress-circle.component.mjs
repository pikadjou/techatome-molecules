import { NgIf, DecimalPipe } from '@angular/common';
import { Component, Input } from '@angular/core';
import { TranslateModule } from '@ngx-translate/core';
import { CamTranslationUI } from '../../../translation.service';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
export class ProgressCircleComponent {
    get circumference() {
        return 2 * Math.PI * 45;
    }
    get canDisplayText() {
        return !Number.isNaN(this.progress);
    }
    constructor() {
        /**
         * Progress in percentage
         */
        this.progress = 50;
        CamTranslationUI.getInstance();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ProgressCircleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: ProgressCircleComponent, isStandalone: true, selector: "ta-progress-circle", inputs: { progress: "progress", upTitle: "upTitle", downTitle: "downTitle" }, ngImport: i0, template: "<div class=\"circle-progress-bar\">\n  @if (this.upTitle) {\n    <div class=\"title\">\n      {{ this.upTitle | translate }}\n    </div>\n  }\n\n  <svg viewBox=\"0 0 100 100\">\n    <circle class=\"circle-progress-bar-bg\" cx=\"50\" cy=\"50\" r=\"45\"></circle>\n\n    <circle\n      class=\"circle-progress-bar-progress\"\n      cx=\"50\"\n      cy=\"50\"\n      r=\"45\"\n      [attr.stroke-dasharray]=\"this.circumference\"\n      [attr.stroke-dashoffset]=\"this.circumference * (1 - this.progress / 100)\"\n    ></circle>\n\n    @if (this.canDisplayText) {\n      <text\n        class=\"circle-progress-bar-text\"\n        x=\"50\"\n        y=\"50\"\n        dominant-baseline=\"middle\"\n        text-anchor=\"middle\"\n      >\n        {{ this.progress | number : \"1.0-0\" }}%\n      </text>\n    }\n  </svg>\n\n  @if (this.downTitle) {\n    <div class=\"title\">\n      {{ this.downTitle | translate }}\n    </div>\n  }\n</div>\n", styles: [".circle-progress-bar .circle-progress-bar-bg{fill:none;stroke:var(--ta-neutral-300);stroke-width:10}.circle-progress-bar .circle-progress-bar-progress{fill:none;stroke:var(--ta-surface-brand-primary);stroke-width:10;stroke-linecap:round;transform:rotate(-90deg);transform-origin:50% 50%;transition:stroke-dashoffset .5s ease-out}.circle-progress-bar .circle-progress-bar-text{font-size:24px}.title{font-size:var(--ta-font-body-md-default-size);line-height:var(--ta-font-body-md-default-line);font-weight:var(--ta-font-body-md-bold-weight);text-align:center;padding:5px}\n"], dependencies: [{ kind: "ngmodule", type: TranslateModule }, { kind: "pipe", type: i1.TranslatePipe, name: "translate" }, { kind: "pipe", type: DecimalPipe, name: "number" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ProgressCircleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-progress-circle', standalone: true, imports: [NgIf, TranslateModule, DecimalPipe], template: "<div class=\"circle-progress-bar\">\n  @if (this.upTitle) {\n    <div class=\"title\">\n      {{ this.upTitle | translate }}\n    </div>\n  }\n\n  <svg viewBox=\"0 0 100 100\">\n    <circle class=\"circle-progress-bar-bg\" cx=\"50\" cy=\"50\" r=\"45\"></circle>\n\n    <circle\n      class=\"circle-progress-bar-progress\"\n      cx=\"50\"\n      cy=\"50\"\n      r=\"45\"\n      [attr.stroke-dasharray]=\"this.circumference\"\n      [attr.stroke-dashoffset]=\"this.circumference * (1 - this.progress / 100)\"\n    ></circle>\n\n    @if (this.canDisplayText) {\n      <text\n        class=\"circle-progress-bar-text\"\n        x=\"50\"\n        y=\"50\"\n        dominant-baseline=\"middle\"\n        text-anchor=\"middle\"\n      >\n        {{ this.progress | number : \"1.0-0\" }}%\n      </text>\n    }\n  </svg>\n\n  @if (this.downTitle) {\n    <div class=\"title\">\n      {{ this.downTitle | translate }}\n    </div>\n  }\n</div>\n", styles: [".circle-progress-bar .circle-progress-bar-bg{fill:none;stroke:var(--ta-neutral-300);stroke-width:10}.circle-progress-bar .circle-progress-bar-progress{fill:none;stroke:var(--ta-surface-brand-primary);stroke-width:10;stroke-linecap:round;transform:rotate(-90deg);transform-origin:50% 50%;transition:stroke-dashoffset .5s ease-out}.circle-progress-bar .circle-progress-bar-text{font-size:24px}.title{font-size:var(--ta-font-body-md-default-size);line-height:var(--ta-font-body-md-default-line);font-weight:var(--ta-font-body-md-bold-weight);text-align:center;padding:5px}\n"] }]
        }], ctorParameters: () => [], propDecorators: { progress: [{
                type: Input
            }], upTitle: [{
                type: Input
            }], downTitle: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtY2lyY2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy91aS9wcm9ncmVzcy9jaXJjbGUvcHJvZ3Jlc3MtY2lyY2xlL3Byb2dyZXNzLWNpcmNsZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvdWkvcHJvZ3Jlc3MvY2lyY2xlL3Byb2dyZXNzLWNpcmNsZS9wcm9ncmVzcy1jaXJjbGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOEJBQThCLENBQUM7OztBQVNoRSxNQUFNLE9BQU8sdUJBQXVCO0lBZ0JsQyxJQUFJLGFBQWE7UUFDZixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7UUF2QkE7O1dBRUc7UUFDTSxhQUFRLEdBQVcsRUFBRSxDQUFDO1FBcUI3QixnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqQyxDQUFDOytHQTFCVSx1QkFBdUI7bUdBQXZCLHVCQUF1Qiw0SkNicEMsMjZCQXNDQSxvbkJEM0JrQixlQUFlLHVGQUFFLFdBQVc7OzRGQUVqQyx1QkFBdUI7a0JBUG5DLFNBQVM7K0JBQ0Esb0JBQW9CLGNBR2hCLElBQUksV0FDUCxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsV0FBVyxDQUFDO3dEQU1wQyxRQUFRO3NCQUFoQixLQUFLO2dCQUtHLE9BQU87c0JBQWYsS0FBSztnQkFLRyxTQUFTO3NCQUFqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdJZiwgRGVjaW1hbFBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNsYXRlTW9kdWxlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5cbmltcG9ydCB7IENhbVRyYW5zbGF0aW9uVUkgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbi5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG5zZWxlY3RvcjogJ3RhLXByb2dyZXNzLWNpcmNsZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9wcm9ncmVzcy1jaXJjbGUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9wcm9ncmVzcy1jaXJjbGUuY29tcG9uZW50LnNjc3MnXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW05nSWYsIFRyYW5zbGF0ZU1vZHVsZSwgRGVjaW1hbFBpcGVdLFxufSlcbmV4cG9ydCBjbGFzcyBQcm9ncmVzc0NpcmNsZUNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBQcm9ncmVzcyBpbiBwZXJjZW50YWdlXG4gICAqL1xuICBASW5wdXQoKSBwcm9ncmVzczogbnVtYmVyID0gNTA7XG5cbiAgLyoqXG4gICAqIFRpdGxlIGxvY2F0ZWQgYWJvdmVcbiAgICovXG4gIEBJbnB1dCgpIHVwVGl0bGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRpdGxlIGxvY2F0ZWQgYmVsb3dcbiAgICovXG4gIEBJbnB1dCgpIGRvd25UaXRsZT86IHN0cmluZztcblxuICBnZXQgY2lyY3VtZmVyZW5jZSgpIHtcbiAgICByZXR1cm4gMiAqIE1hdGguUEkgKiA0NTtcbiAgfVxuXG4gIGdldCBjYW5EaXNwbGF5VGV4dCgpIHtcbiAgICByZXR1cm4gIU51bWJlci5pc05hTih0aGlzLnByb2dyZXNzKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIENhbVRyYW5zbGF0aW9uVUkuZ2V0SW5zdGFuY2UoKTtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cImNpcmNsZS1wcm9ncmVzcy1iYXJcIj5cbiAgQGlmICh0aGlzLnVwVGl0bGUpIHtcbiAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj5cbiAgICAgIHt7IHRoaXMudXBUaXRsZSB8IHRyYW5zbGF0ZSB9fVxuICAgIDwvZGl2PlxuICB9XG5cbiAgPHN2ZyB2aWV3Qm94PVwiMCAwIDEwMCAxMDBcIj5cbiAgICA8Y2lyY2xlIGNsYXNzPVwiY2lyY2xlLXByb2dyZXNzLWJhci1iZ1wiIGN4PVwiNTBcIiBjeT1cIjUwXCIgcj1cIjQ1XCI+PC9jaXJjbGU+XG5cbiAgICA8Y2lyY2xlXG4gICAgICBjbGFzcz1cImNpcmNsZS1wcm9ncmVzcy1iYXItcHJvZ3Jlc3NcIlxuICAgICAgY3g9XCI1MFwiXG4gICAgICBjeT1cIjUwXCJcbiAgICAgIHI9XCI0NVwiXG4gICAgICBbYXR0ci5zdHJva2UtZGFzaGFycmF5XT1cInRoaXMuY2lyY3VtZmVyZW5jZVwiXG4gICAgICBbYXR0ci5zdHJva2UtZGFzaG9mZnNldF09XCJ0aGlzLmNpcmN1bWZlcmVuY2UgKiAoMSAtIHRoaXMucHJvZ3Jlc3MgLyAxMDApXCJcbiAgICA+PC9jaXJjbGU+XG5cbiAgICBAaWYgKHRoaXMuY2FuRGlzcGxheVRleHQpIHtcbiAgICAgIDx0ZXh0XG4gICAgICAgIGNsYXNzPVwiY2lyY2xlLXByb2dyZXNzLWJhci10ZXh0XCJcbiAgICAgICAgeD1cIjUwXCJcbiAgICAgICAgeT1cIjUwXCJcbiAgICAgICAgZG9taW5hbnQtYmFzZWxpbmU9XCJtaWRkbGVcIlxuICAgICAgICB0ZXh0LWFuY2hvcj1cIm1pZGRsZVwiXG4gICAgICA+XG4gICAgICAgIHt7IHRoaXMucHJvZ3Jlc3MgfCBudW1iZXIgOiBcIjEuMC0wXCIgfX0lXG4gICAgICA8L3RleHQ+XG4gICAgfVxuICA8L3N2Zz5cblxuICBAaWYgKHRoaXMuZG93blRpdGxlKSB7XG4gICAgPGRpdiBjbGFzcz1cInRpdGxlXCI+XG4gICAgICB7eyB0aGlzLmRvd25UaXRsZSB8IHRyYW5zbGF0ZSB9fVxuICAgIDwvZGl2PlxuICB9XG48L2Rpdj5cbiJdfQ==