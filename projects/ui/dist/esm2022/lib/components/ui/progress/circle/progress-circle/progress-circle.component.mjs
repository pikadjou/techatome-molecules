import { DecimalPipe, NgIf } from '@angular/common';
import { Component, Input } from '@angular/core';
import { TranslateModule } from '@ngx-translate/core';
import { TaTranslationUI } from '../../../translation.service';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
export class ProgressCircleComponent {
    get circumference() {
        return 2 * Math.PI * 45;
    }
    get canDisplayText() {
        return !Number.isNaN(this.progress);
    }
    constructor() {
        /**
         * Progress in percentage
         */
        this.progress = 50;
        TaTranslationUI.getInstance();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ProgressCircleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: ProgressCircleComponent, isStandalone: true, selector: "ta-progress-circle", inputs: { progress: "progress", upTitle: "upTitle", downTitle: "downTitle" }, ngImport: i0, template: "<div class=\"circle-progress-bar\">\n  @if (this.upTitle) {\n    <div class=\"title\">\n      {{ this.upTitle | translate }}\n    </div>\n  }\n\n  <svg viewBox=\"0 0 100 100\">\n    <circle class=\"circle-progress-bar-bg\" cx=\"50\" cy=\"50\" r=\"45\"></circle>\n\n    <circle\n      class=\"circle-progress-bar-progress\"\n      cx=\"50\"\n      cy=\"50\"\n      r=\"45\"\n      [attr.stroke-dasharray]=\"this.circumference\"\n      [attr.stroke-dashoffset]=\"this.circumference * (1 - this.progress / 100)\"\n    ></circle>\n\n    @if (this.canDisplayText) {\n      <text\n        class=\"circle-progress-bar-text\"\n        x=\"50\"\n        y=\"50\"\n        dominant-baseline=\"middle\"\n        text-anchor=\"middle\"\n      >\n        {{ this.progress | number : \"1.0-0\" }}%\n      </text>\n    }\n  </svg>\n\n  @if (this.downTitle) {\n    <div class=\"title\">\n      {{ this.downTitle | translate }}\n    </div>\n  }\n</div>\n", styles: [".circle-progress-bar .circle-progress-bar-bg{fill:none;stroke:var(--ta-neutral-300);stroke-width:10}.circle-progress-bar .circle-progress-bar-progress{fill:none;stroke:var(--ta-surface-brand-primary);stroke-width:10;stroke-linecap:round;transform:rotate(-90deg);transform-origin:50% 50%;transition:stroke-dashoffset .5s ease-out}.circle-progress-bar .circle-progress-bar-text{font-size:24px}.title{font-size:var(--ta-font-body-md-default-size);line-height:var(--ta-font-body-md-default-line);font-weight:var(--ta-font-body-md-bold-weight);text-align:center;padding:5px}\n"], dependencies: [{ kind: "ngmodule", type: TranslateModule }, { kind: "pipe", type: i1.TranslatePipe, name: "translate" }, { kind: "pipe", type: DecimalPipe, name: "number" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ProgressCircleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-progress-circle', standalone: true, imports: [NgIf, TranslateModule, DecimalPipe], template: "<div class=\"circle-progress-bar\">\n  @if (this.upTitle) {\n    <div class=\"title\">\n      {{ this.upTitle | translate }}\n    </div>\n  }\n\n  <svg viewBox=\"0 0 100 100\">\n    <circle class=\"circle-progress-bar-bg\" cx=\"50\" cy=\"50\" r=\"45\"></circle>\n\n    <circle\n      class=\"circle-progress-bar-progress\"\n      cx=\"50\"\n      cy=\"50\"\n      r=\"45\"\n      [attr.stroke-dasharray]=\"this.circumference\"\n      [attr.stroke-dashoffset]=\"this.circumference * (1 - this.progress / 100)\"\n    ></circle>\n\n    @if (this.canDisplayText) {\n      <text\n        class=\"circle-progress-bar-text\"\n        x=\"50\"\n        y=\"50\"\n        dominant-baseline=\"middle\"\n        text-anchor=\"middle\"\n      >\n        {{ this.progress | number : \"1.0-0\" }}%\n      </text>\n    }\n  </svg>\n\n  @if (this.downTitle) {\n    <div class=\"title\">\n      {{ this.downTitle | translate }}\n    </div>\n  }\n</div>\n", styles: [".circle-progress-bar .circle-progress-bar-bg{fill:none;stroke:var(--ta-neutral-300);stroke-width:10}.circle-progress-bar .circle-progress-bar-progress{fill:none;stroke:var(--ta-surface-brand-primary);stroke-width:10;stroke-linecap:round;transform:rotate(-90deg);transform-origin:50% 50%;transition:stroke-dashoffset .5s ease-out}.circle-progress-bar .circle-progress-bar-text{font-size:24px}.title{font-size:var(--ta-font-body-md-default-size);line-height:var(--ta-font-body-md-default-line);font-weight:var(--ta-font-body-md-bold-weight);text-align:center;padding:5px}\n"] }]
        }], ctorParameters: () => [], propDecorators: { progress: [{
                type: Input
            }], upTitle: [{
                type: Input
            }], downTitle: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtY2lyY2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy91aS9wcm9ncmVzcy9jaXJjbGUvcHJvZ3Jlc3MtY2lyY2xlL3Byb2dyZXNzLWNpcmNsZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvdWkvcHJvZ3Jlc3MvY2lyY2xlL3Byb2dyZXNzLWNpcmNsZS9wcm9ncmVzcy1jaXJjbGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7QUFTL0QsTUFBTSxPQUFPLHVCQUF1QjtJQWdCbEMsSUFBSSxhQUFhO1FBQ2YsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksY0FBYztRQUNoQixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVEO1FBdkJBOztXQUVHO1FBQ00sYUFBUSxHQUFXLEVBQUUsQ0FBQztRQXFCN0IsZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2hDLENBQUM7K0dBMUJVLHVCQUF1QjttR0FBdkIsdUJBQXVCLDRKQ2RwQywyNkJBc0NBLG9uQkQxQmtCLGVBQWUsdUZBQUUsV0FBVzs7NEZBRWpDLHVCQUF1QjtrQkFQbkMsU0FBUzsrQkFDRSxvQkFBb0IsY0FHbEIsSUFBSSxXQUNQLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxXQUFXLENBQUM7d0RBTXBDLFFBQVE7c0JBQWhCLEtBQUs7Z0JBS0csT0FBTztzQkFBZixLQUFLO2dCQUtHLFNBQVM7c0JBQWpCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWNpbWFsUGlwZSwgTmdJZiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFRyYW5zbGF0ZU1vZHVsZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuXG5pbXBvcnQgeyBUYVRyYW5zbGF0aW9uVUkgfSBmcm9tICcuLi8uLi8uLi90cmFuc2xhdGlvbi5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGEtcHJvZ3Jlc3MtY2lyY2xlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Byb2dyZXNzLWNpcmNsZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3Byb2dyZXNzLWNpcmNsZS5jb21wb25lbnQuc2NzcyddLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbTmdJZiwgVHJhbnNsYXRlTW9kdWxlLCBEZWNpbWFsUGlwZV0sXG59KVxuZXhwb3J0IGNsYXNzIFByb2dyZXNzQ2lyY2xlQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFByb2dyZXNzIGluIHBlcmNlbnRhZ2VcbiAgICovXG4gIEBJbnB1dCgpIHByb2dyZXNzOiBudW1iZXIgPSA1MDtcblxuICAvKipcbiAgICogVGl0bGUgbG9jYXRlZCBhYm92ZVxuICAgKi9cbiAgQElucHV0KCkgdXBUaXRsZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGl0bGUgbG9jYXRlZCBiZWxvd1xuICAgKi9cbiAgQElucHV0KCkgZG93blRpdGxlPzogc3RyaW5nO1xuXG4gIGdldCBjaXJjdW1mZXJlbmNlKCkge1xuICAgIHJldHVybiAyICogTWF0aC5QSSAqIDQ1O1xuICB9XG5cbiAgZ2V0IGNhbkRpc3BsYXlUZXh0KCkge1xuICAgIHJldHVybiAhTnVtYmVyLmlzTmFOKHRoaXMucHJvZ3Jlc3MpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgVGFUcmFuc2xhdGlvblVJLmdldEluc3RhbmNlKCk7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJjaXJjbGUtcHJvZ3Jlc3MtYmFyXCI+XG4gIEBpZiAodGhpcy51cFRpdGxlKSB7XG4gICAgPGRpdiBjbGFzcz1cInRpdGxlXCI+XG4gICAgICB7eyB0aGlzLnVwVGl0bGUgfCB0cmFuc2xhdGUgfX1cbiAgICA8L2Rpdj5cbiAgfVxuXG4gIDxzdmcgdmlld0JveD1cIjAgMCAxMDAgMTAwXCI+XG4gICAgPGNpcmNsZSBjbGFzcz1cImNpcmNsZS1wcm9ncmVzcy1iYXItYmdcIiBjeD1cIjUwXCIgY3k9XCI1MFwiIHI9XCI0NVwiPjwvY2lyY2xlPlxuXG4gICAgPGNpcmNsZVxuICAgICAgY2xhc3M9XCJjaXJjbGUtcHJvZ3Jlc3MtYmFyLXByb2dyZXNzXCJcbiAgICAgIGN4PVwiNTBcIlxuICAgICAgY3k9XCI1MFwiXG4gICAgICByPVwiNDVcIlxuICAgICAgW2F0dHIuc3Ryb2tlLWRhc2hhcnJheV09XCJ0aGlzLmNpcmN1bWZlcmVuY2VcIlxuICAgICAgW2F0dHIuc3Ryb2tlLWRhc2hvZmZzZXRdPVwidGhpcy5jaXJjdW1mZXJlbmNlICogKDEgLSB0aGlzLnByb2dyZXNzIC8gMTAwKVwiXG4gICAgPjwvY2lyY2xlPlxuXG4gICAgQGlmICh0aGlzLmNhbkRpc3BsYXlUZXh0KSB7XG4gICAgICA8dGV4dFxuICAgICAgICBjbGFzcz1cImNpcmNsZS1wcm9ncmVzcy1iYXItdGV4dFwiXG4gICAgICAgIHg9XCI1MFwiXG4gICAgICAgIHk9XCI1MFwiXG4gICAgICAgIGRvbWluYW50LWJhc2VsaW5lPVwibWlkZGxlXCJcbiAgICAgICAgdGV4dC1hbmNob3I9XCJtaWRkbGVcIlxuICAgICAgPlxuICAgICAgICB7eyB0aGlzLnByb2dyZXNzIHwgbnVtYmVyIDogXCIxLjAtMFwiIH19JVxuICAgICAgPC90ZXh0PlxuICAgIH1cbiAgPC9zdmc+XG5cbiAgQGlmICh0aGlzLmRvd25UaXRsZSkge1xuICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPlxuICAgICAge3sgdGhpcy5kb3duVGl0bGUgfCB0cmFuc2xhdGUgfX1cbiAgICA8L2Rpdj5cbiAgfVxuPC9kaXY+XG4iXX0=