import { NgClass } from '@angular/common';
import { Component, Input } from '@angular/core';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { getPlaceholderConfig } from '../placeholder/config';
import { PlaceholderComponent } from '../placeholder/placeholder.component';
import * as i0 from "@angular/core";
export class LoaderComponent {
    constructor() {
        this.isLoading = false;
        this.skeleton = null;
        this.size = 'md';
        this.text = 'container.loading.light-message';
        this.isLoading = true;
    }
    getPlaceholder() {
        return getPlaceholderConfig(this.skeleton || 'default');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LoaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: LoaderComponent, isStandalone: true, selector: "ta-loader", inputs: { isLoading: "isLoading", skeleton: "skeleton", size: "size", text: "text" }, ngImport: i0, template: "@if (this.isLoading) {\n  @if (!this.skeleton) {\n    <div class=\"loader\">\n      <div class=\"content\">\n        <div [ngClass]=\"'spinner ' + this.size\">\n          <svg class=\"svg\">\n            <circle \n              class=\"bg\" \n              cx=\"12\" \n              cy=\"12\" \n              r=\"10\" \n              stroke=\"currentColor\" \n              stroke-width=\"4\"/>\n            <path \n              class=\"fill\" \n              fill=\"currentColor\" \n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"/>\n          </svg>\n        </div>\n        @if (this.text) {\n          <p class=\"text\">{{ this.text }}</p>\n        }\n      </div>\n    </div>\n  } @else {\n    <ta-placeholder [placeholder]=\"this.getPlaceholder()\"></ta-placeholder>\n  }\n} @else {\n  <ng-content></ng-content>\n}\n", styles: [".loader,.loader .content{flex-direction:column;display:flex;align-items:center;gap:var(--ta-space-sm)}.loader .spinner{color:var(--ta-brand-600)}.loader .spinner.sm{height:16px;width:16px}.loader .spinner.md{height:24px;width:24px}.loader .spinner.lg{height:32px;width:32px}.loader .spinner .svg{height:100%;width:100%;animation:spin 1s linear infinite}.loader .spinner .svg .bg{opacity:.25}.loader .spinner .svg .fill{opacity:.75}.loader .text{font-size:var(--ta-font-body-sm-default-size);color:var(--ta-text-secondary);animation:pulse 1.5s ease-in-out infinite;margin:0}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes pulse{0%,to{opacity:1}50%{opacity:.5}}\n"], dependencies: [{ kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "component", type: PlaceholderComponent, selector: "ta-placeholder", inputs: ["placeholder"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LoaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-loader', standalone: true, imports: [NgClass, MatProgressSpinnerModule, PlaceholderComponent], template: "@if (this.isLoading) {\n  @if (!this.skeleton) {\n    <div class=\"loader\">\n      <div class=\"content\">\n        <div [ngClass]=\"'spinner ' + this.size\">\n          <svg class=\"svg\">\n            <circle \n              class=\"bg\" \n              cx=\"12\" \n              cy=\"12\" \n              r=\"10\" \n              stroke=\"currentColor\" \n              stroke-width=\"4\"/>\n            <path \n              class=\"fill\" \n              fill=\"currentColor\" \n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"/>\n          </svg>\n        </div>\n        @if (this.text) {\n          <p class=\"text\">{{ this.text }}</p>\n        }\n      </div>\n    </div>\n  } @else {\n    <ta-placeholder [placeholder]=\"this.getPlaceholder()\"></ta-placeholder>\n  }\n} @else {\n  <ng-content></ng-content>\n}\n", styles: [".loader,.loader .content{flex-direction:column;display:flex;align-items:center;gap:var(--ta-space-sm)}.loader .spinner{color:var(--ta-brand-600)}.loader .spinner.sm{height:16px;width:16px}.loader .spinner.md{height:24px;width:24px}.loader .spinner.lg{height:32px;width:32px}.loader .spinner .svg{height:100%;width:100%;animation:spin 1s linear infinite}.loader .spinner .svg .bg{opacity:.25}.loader .spinner .svg .fill{opacity:.75}.loader .text{font-size:var(--ta-font-body-sm-default-size);color:var(--ta-text-secondary);animation:pulse 1.5s ease-in-out infinite;margin:0}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes pulse{0%,to{opacity:1}50%{opacity:.5}}\n"] }]
        }], ctorParameters: () => [], propDecorators: { isLoading: [{
                type: Input
            }], skeleton: [{
                type: Input
            }], size: [{
                type: Input
            }], text: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvbW9kdWxlcy9jb250YWluZXIvbG9hZGVyL2xvYWRlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL21vZHVsZXMvY29udGFpbmVyL2xvYWRlci9sb2FkZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBSTlFLE9BQU8sRUFBa0Msb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQzs7QUFXNUUsTUFBTSxPQUFPLGVBQWU7SUFhMUI7UUFYQSxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBR2xCLGFBQVEsR0FBNkIsSUFBSSxDQUFDO1FBRzFDLFNBQUksR0FBWSxJQUFJLENBQUM7UUFHckIsU0FBSSxHQUFXLGlDQUFpQyxDQUFDO1FBRy9DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFFTSxjQUFjO1FBQ25CLE9BQU8sb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsQ0FBQztJQUMxRCxDQUFDOytHQW5CVSxlQUFlO21HQUFmLGVBQWUsMkpDbEI1Qiw2NEJBOEJBLDh1QkRkWSxPQUFPLG1GQUFFLHdCQUF3QiwrQkFBRSxvQkFBb0I7OzRGQUV0RCxlQUFlO2tCQVAzQixTQUFTOytCQUNFLFdBQVcsY0FHVCxJQUFJLFdBQ1AsQ0FBQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsb0JBQW9CLENBQUM7d0RBSWxFLFNBQVM7c0JBRFIsS0FBSztnQkFJTixRQUFRO3NCQURQLEtBQUs7Z0JBSU4sSUFBSTtzQkFESCxLQUFLO2dCQUlOLElBQUk7c0JBREgsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nQ2xhc3MgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0UHJvZ3Jlc3NTcGlubmVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvcHJvZ3Jlc3Mtc3Bpbm5lcic7XG5cbmltcG9ydCB7IFRhU2l6ZXMgfSBmcm9tICdAdGEvc3R5bGVzJztcblxuaW1wb3J0IHsgUGxhY2Vob2xkZXIsIFBsYWNlaG9sZGVyQ29uZmlnLCBnZXRQbGFjZWhvbGRlckNvbmZpZyB9IGZyb20gJy4uL3BsYWNlaG9sZGVyL2NvbmZpZyc7XG5pbXBvcnQgeyBQbGFjZWhvbGRlckNvbXBvbmVudCB9IGZyb20gJy4uL3BsYWNlaG9sZGVyL3BsYWNlaG9sZGVyLmNvbXBvbmVudCc7XG5cbmV4cG9ydCB0eXBlIExvYWRlclNpemUgPSAnc20nIHwgJ21kJyB8ICdsZyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhLWxvYWRlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9sb2FkZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9sb2FkZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW05nQ2xhc3MsIE1hdFByb2dyZXNzU3Bpbm5lck1vZHVsZSwgUGxhY2Vob2xkZXJDb21wb25lbnRdLFxufSlcbmV4cG9ydCBjbGFzcyBMb2FkZXJDb21wb25lbnQge1xuICBASW5wdXQoKVxuICBpc0xvYWRpbmcgPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBza2VsZXRvbjogUGxhY2Vob2xkZXJDb25maWcgfCBudWxsID0gbnVsbDtcblxuICBASW5wdXQoKVxuICBzaXplOiBUYVNpemVzID0gJ21kJztcblxuICBASW5wdXQoKVxuICB0ZXh0OiBzdHJpbmcgPSAnY29udGFpbmVyLmxvYWRpbmcubGlnaHQtbWVzc2FnZSc7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuICB9XG5cbiAgcHVibGljIGdldFBsYWNlaG9sZGVyKCk6IFBsYWNlaG9sZGVyIHtcbiAgICByZXR1cm4gZ2V0UGxhY2Vob2xkZXJDb25maWcodGhpcy5za2VsZXRvbiB8fCAnZGVmYXVsdCcpO1xuICB9XG59XG4iLCJAaWYgKHRoaXMuaXNMb2FkaW5nKSB7XG4gIEBpZiAoIXRoaXMuc2tlbGV0b24pIHtcbiAgICA8ZGl2IGNsYXNzPVwibG9hZGVyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPlxuICAgICAgICA8ZGl2IFtuZ0NsYXNzXT1cIidzcGlubmVyICcgKyB0aGlzLnNpemVcIj5cbiAgICAgICAgICA8c3ZnIGNsYXNzPVwic3ZnXCI+XG4gICAgICAgICAgICA8Y2lyY2xlIFxuICAgICAgICAgICAgICBjbGFzcz1cImJnXCIgXG4gICAgICAgICAgICAgIGN4PVwiMTJcIiBcbiAgICAgICAgICAgICAgY3k9XCIxMlwiIFxuICAgICAgICAgICAgICByPVwiMTBcIiBcbiAgICAgICAgICAgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgXG4gICAgICAgICAgICAgIHN0cm9rZS13aWR0aD1cIjRcIi8+XG4gICAgICAgICAgICA8cGF0aCBcbiAgICAgICAgICAgICAgY2xhc3M9XCJmaWxsXCIgXG4gICAgICAgICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBcbiAgICAgICAgICAgICAgZD1cIk00IDEyYTggOCAwIDAxOC04VjBDNS4zNzMgMCAwIDUuMzczIDAgMTJoNHptMiA1LjI5MUE3Ljk2MiA3Ljk2MiAwIDAxNCAxMkgwYzAgMy4wNDIgMS4xMzUgNS44MjQgMyA3LjkzOGwzLTIuNjQ3elwiLz5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIEBpZiAodGhpcy50ZXh0KSB7XG4gICAgICAgICAgPHAgY2xhc3M9XCJ0ZXh0XCI+e3sgdGhpcy50ZXh0IH19PC9wPlxuICAgICAgICB9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfSBAZWxzZSB7XG4gICAgPHRhLXBsYWNlaG9sZGVyIFtwbGFjZWhvbGRlcl09XCJ0aGlzLmdldFBsYWNlaG9sZGVyKClcIj48L3RhLXBsYWNlaG9sZGVyPlxuICB9XG59IEBlbHNlIHtcbiAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxufVxuIl19