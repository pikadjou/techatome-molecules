import { NgClass } from '@angular/common';
import { Component, Input } from '@angular/core';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { getPlaceholderConfig } from '../placeholder/config';
import { PlaceholderComponent } from '../placeholder/placeholder.component';
import * as i0 from "@angular/core";
export class LoaderComponent {
    constructor() {
        this.isLoading = false;
        this.skeleton = null;
        this.size = 'lg';
        this.text = 'container.loading.light-message';
        this.isLoading = true;
    }
    getPlaceholder() {
        return getPlaceholderConfig(this.skeleton || 'default');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LoaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: LoaderComponent, isStandalone: true, selector: "ta-loader", inputs: { isLoading: "isLoading", skeleton: "skeleton", size: "size", text: "text" }, ngImport: i0, template: "@if (this.isLoading) {\n  @if (!this.skeleton) {\n    <div class=\"loader\">\n      <div class=\"content\">\n        <div [ngClass]=\"'spinner ' + this.size\">\n          <svg \n            class=\"svg\" \n            xmlns=\"http://www.w3.org/2000/svg\" \n            viewBox=\"0 0 32 32\" \n            fill=\"none\">\n            <!-- D\u00E9finitions pour l'animation -->\n            <defs>\n              <clipPath id=\"fillClip\">\n                <rect class=\"fill-rect\" x=\"0\" y=\"32\" width=\"32\" height=\"32\"/>\n              </clipPath>\n            </defs>\n            \n            <!-- Contour de la maison -->\n            <g class=\"outline\">\n              <!-- Toit -->\n              <path d=\"M16 4L6 12v2h2v12h6v-8h4v8h6V14h2v-2L16 4z\" \n                    stroke=\"currentColor\" \n                    stroke-width=\"2\" \n                    fill=\"none\" \n                    stroke-linejoin=\"round\"/>\n              <!-- Porte -->\n              <rect x=\"13\" y=\"20\" width=\"6\" height=\"6\" \n                    stroke=\"currentColor\" \n                    stroke-width=\"1.5\" \n                    fill=\"none\"/>\n              <!-- Poign\u00E9e de porte -->\n              <circle cx=\"17.5\" cy=\"23\" r=\"0.5\" \n                      fill=\"currentColor\"/>\n              <!-- Fen\u00EAtres -->\n              <rect x=\"9\" y=\"16\" width=\"3\" height=\"3\" \n                    stroke=\"currentColor\" \n                    stroke-width=\"1.5\" \n                    fill=\"none\"/>\n              <rect x=\"20\" y=\"16\" width=\"3\" height=\"3\" \n                    stroke=\"currentColor\" \n                    stroke-width=\"1.5\" \n                    fill=\"none\"/>\n              <!-- Chemin\u00E9e -->\n              <rect x=\"21\" y=\"8\" width=\"2\" height=\"4\" \n                    stroke=\"currentColor\" \n                    stroke-width=\"1.5\" \n                    fill=\"none\"/>\n            </g>\n            \n            <!-- Remplissage progressif -->\n            <g class=\"fill\" clip-path=\"url(#fillClip)\">\n              <!-- Corps de la maison -->\n              <path d=\"M8 14h16v12H8V14z\" fill=\"currentColor\" opacity=\"0.7\"/>\n              <!-- Toit rempli -->\n              <path d=\"M16 4L6 12v2h20v-2L16 4z\" fill=\"currentColor\" opacity=\"0.8\"/>\n              <!-- Porte remplie -->\n              <rect x=\"13\" y=\"20\" width=\"6\" height=\"6\" fill=\"currentColor\" opacity=\"0.6\"/>\n              <!-- Fen\u00EAtres remplies -->\n              <rect x=\"9\" y=\"16\" width=\"3\" height=\"3\" fill=\"currentColor\" opacity=\"0.5\"/>\n              <rect x=\"20\" y=\"16\" width=\"3\" height=\"3\" fill=\"currentColor\" opacity=\"0.5\"/>\n              <!-- Chemin\u00E9e remplie -->\n              <rect x=\"21\" y=\"8\" width=\"2\" height=\"4\" fill=\"currentColor\" opacity=\"0.6\"/>\n            </g>\n          </svg>\n        </div>\n        @if (this.text) {\n          <p class=\"text\">{{ this.text }}</p>\n        }\n      </div>\n    </div>\n  } @else {\n    <ta-placeholder [placeholder]=\"this.getPlaceholder()\"></ta-placeholder>\n  }\n} @else {\n  <ng-content></ng-content>\n}\n", styles: [".loader{flex-direction:column;display:flex;align-items:center;gap:var(--ta-space-sm)}.loader .content{flex-direction:column;display:flex;align-items:center;gap:var(--ta-space-md)}.loader .spinner{color:var(--ta-brand-600)}.loader .spinner.sm{height:32px;width:32px}.loader .spinner.md{height:48px;width:48px}.loader .spinner.lg{height:64px;width:64px}.loader .spinner .svg{height:100%;width:100%}.loader .spinner .svg .outline{opacity:.4;stroke-width:2}.loader .spinner .svg .fill{opacity:.9}.loader .spinner .svg .fill-rect{animation:house-fill 5s ease-in-out infinite}.loader .text{font-size:var(--ta-font-body-md-default-size);color:var(--ta-text-secondary);animation:pulse 2s ease-in-out infinite;margin:0;text-align:center}@keyframes house-fill{0%{y:32;height:0}10%{y:32;height:0}90%{y:0;height:32}to{y:0;height:32}}@keyframes pulse{0%,to{opacity:1}50%{opacity:.6}}\n"], dependencies: [{ kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "component", type: PlaceholderComponent, selector: "ta-placeholder", inputs: ["placeholder"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: LoaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-loader', standalone: true, imports: [NgClass, MatProgressSpinnerModule, PlaceholderComponent], template: "@if (this.isLoading) {\n  @if (!this.skeleton) {\n    <div class=\"loader\">\n      <div class=\"content\">\n        <div [ngClass]=\"'spinner ' + this.size\">\n          <svg \n            class=\"svg\" \n            xmlns=\"http://www.w3.org/2000/svg\" \n            viewBox=\"0 0 32 32\" \n            fill=\"none\">\n            <!-- D\u00E9finitions pour l'animation -->\n            <defs>\n              <clipPath id=\"fillClip\">\n                <rect class=\"fill-rect\" x=\"0\" y=\"32\" width=\"32\" height=\"32\"/>\n              </clipPath>\n            </defs>\n            \n            <!-- Contour de la maison -->\n            <g class=\"outline\">\n              <!-- Toit -->\n              <path d=\"M16 4L6 12v2h2v12h6v-8h4v8h6V14h2v-2L16 4z\" \n                    stroke=\"currentColor\" \n                    stroke-width=\"2\" \n                    fill=\"none\" \n                    stroke-linejoin=\"round\"/>\n              <!-- Porte -->\n              <rect x=\"13\" y=\"20\" width=\"6\" height=\"6\" \n                    stroke=\"currentColor\" \n                    stroke-width=\"1.5\" \n                    fill=\"none\"/>\n              <!-- Poign\u00E9e de porte -->\n              <circle cx=\"17.5\" cy=\"23\" r=\"0.5\" \n                      fill=\"currentColor\"/>\n              <!-- Fen\u00EAtres -->\n              <rect x=\"9\" y=\"16\" width=\"3\" height=\"3\" \n                    stroke=\"currentColor\" \n                    stroke-width=\"1.5\" \n                    fill=\"none\"/>\n              <rect x=\"20\" y=\"16\" width=\"3\" height=\"3\" \n                    stroke=\"currentColor\" \n                    stroke-width=\"1.5\" \n                    fill=\"none\"/>\n              <!-- Chemin\u00E9e -->\n              <rect x=\"21\" y=\"8\" width=\"2\" height=\"4\" \n                    stroke=\"currentColor\" \n                    stroke-width=\"1.5\" \n                    fill=\"none\"/>\n            </g>\n            \n            <!-- Remplissage progressif -->\n            <g class=\"fill\" clip-path=\"url(#fillClip)\">\n              <!-- Corps de la maison -->\n              <path d=\"M8 14h16v12H8V14z\" fill=\"currentColor\" opacity=\"0.7\"/>\n              <!-- Toit rempli -->\n              <path d=\"M16 4L6 12v2h20v-2L16 4z\" fill=\"currentColor\" opacity=\"0.8\"/>\n              <!-- Porte remplie -->\n              <rect x=\"13\" y=\"20\" width=\"6\" height=\"6\" fill=\"currentColor\" opacity=\"0.6\"/>\n              <!-- Fen\u00EAtres remplies -->\n              <rect x=\"9\" y=\"16\" width=\"3\" height=\"3\" fill=\"currentColor\" opacity=\"0.5\"/>\n              <rect x=\"20\" y=\"16\" width=\"3\" height=\"3\" fill=\"currentColor\" opacity=\"0.5\"/>\n              <!-- Chemin\u00E9e remplie -->\n              <rect x=\"21\" y=\"8\" width=\"2\" height=\"4\" fill=\"currentColor\" opacity=\"0.6\"/>\n            </g>\n          </svg>\n        </div>\n        @if (this.text) {\n          <p class=\"text\">{{ this.text }}</p>\n        }\n      </div>\n    </div>\n  } @else {\n    <ta-placeholder [placeholder]=\"this.getPlaceholder()\"></ta-placeholder>\n  }\n} @else {\n  <ng-content></ng-content>\n}\n", styles: [".loader{flex-direction:column;display:flex;align-items:center;gap:var(--ta-space-sm)}.loader .content{flex-direction:column;display:flex;align-items:center;gap:var(--ta-space-md)}.loader .spinner{color:var(--ta-brand-600)}.loader .spinner.sm{height:32px;width:32px}.loader .spinner.md{height:48px;width:48px}.loader .spinner.lg{height:64px;width:64px}.loader .spinner .svg{height:100%;width:100%}.loader .spinner .svg .outline{opacity:.4;stroke-width:2}.loader .spinner .svg .fill{opacity:.9}.loader .spinner .svg .fill-rect{animation:house-fill 5s ease-in-out infinite}.loader .text{font-size:var(--ta-font-body-md-default-size);color:var(--ta-text-secondary);animation:pulse 2s ease-in-out infinite;margin:0;text-align:center}@keyframes house-fill{0%{y:32;height:0}10%{y:32;height:0}90%{y:0;height:32}to{y:0;height:32}}@keyframes pulse{0%,to{opacity:1}50%{opacity:.6}}\n"] }]
        }], ctorParameters: () => [], propDecorators: { isLoading: [{
                type: Input
            }], skeleton: [{
                type: Input
            }], size: [{
                type: Input
            }], text: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvbW9kdWxlcy9jb250YWluZXIvbG9hZGVyL2xvYWRlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL21vZHVsZXMvY29udGFpbmVyL2xvYWRlci9sb2FkZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBSTlFLE9BQU8sRUFBa0Msb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQzs7QUFXNUUsTUFBTSxPQUFPLGVBQWU7SUFhMUI7UUFYQSxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBR2xCLGFBQVEsR0FBNkIsSUFBSSxDQUFDO1FBRzFDLFNBQUksR0FBWSxJQUFJLENBQUM7UUFHckIsU0FBSSxHQUFXLGlDQUFpQyxDQUFDO1FBRy9DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFFTSxjQUFjO1FBQ25CLE9BQU8sb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsQ0FBQztJQUMxRCxDQUFDOytHQW5CVSxlQUFlO21HQUFmLGVBQWUsMkpDbEI1Qixtb0dBNEVBLGs2QkQ1RFksT0FBTyxtRkFBRSx3QkFBd0IsK0JBQUUsb0JBQW9COzs0RkFFdEQsZUFBZTtrQkFQM0IsU0FBUzsrQkFDRSxXQUFXLGNBR1QsSUFBSSxXQUNQLENBQUMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLG9CQUFvQixDQUFDO3dEQUlsRSxTQUFTO3NCQURSLEtBQUs7Z0JBSU4sUUFBUTtzQkFEUCxLQUFLO2dCQUlOLElBQUk7c0JBREgsS0FBSztnQkFJTixJQUFJO3NCQURILEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ0NsYXNzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdFByb2dyZXNzU3Bpbm5lck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3Byb2dyZXNzLXNwaW5uZXInO1xuXG5pbXBvcnQgeyBUYVNpemVzIH0gZnJvbSAnQHRhL3N0eWxlcyc7XG5cbmltcG9ydCB7IFBsYWNlaG9sZGVyLCBQbGFjZWhvbGRlckNvbmZpZywgZ2V0UGxhY2Vob2xkZXJDb25maWcgfSBmcm9tICcuLi9wbGFjZWhvbGRlci9jb25maWcnO1xuaW1wb3J0IHsgUGxhY2Vob2xkZXJDb21wb25lbnQgfSBmcm9tICcuLi9wbGFjZWhvbGRlci9wbGFjZWhvbGRlci5jb21wb25lbnQnO1xuXG5leHBvcnQgdHlwZSBMb2FkZXJTaXplID0gJ3NtJyB8ICdtZCcgfCAnbGcnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0YS1sb2FkZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vbG9hZGVyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbG9hZGVyLmNvbXBvbmVudC5zY3NzJ10sXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtOZ0NsYXNzLCBNYXRQcm9ncmVzc1NwaW5uZXJNb2R1bGUsIFBsYWNlaG9sZGVyQ29tcG9uZW50XSxcbn0pXG5leHBvcnQgY2xhc3MgTG9hZGVyQ29tcG9uZW50IHtcbiAgQElucHV0KClcbiAgaXNMb2FkaW5nID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgc2tlbGV0b246IFBsYWNlaG9sZGVyQ29uZmlnIHwgbnVsbCA9IG51bGw7XG5cbiAgQElucHV0KClcbiAgc2l6ZTogVGFTaXplcyA9ICdsZyc7XG5cbiAgQElucHV0KClcbiAgdGV4dDogc3RyaW5nID0gJ2NvbnRhaW5lci5sb2FkaW5nLmxpZ2h0LW1lc3NhZ2UnO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRQbGFjZWhvbGRlcigpOiBQbGFjZWhvbGRlciB7XG4gICAgcmV0dXJuIGdldFBsYWNlaG9sZGVyQ29uZmlnKHRoaXMuc2tlbGV0b24gfHwgJ2RlZmF1bHQnKTtcbiAgfVxufVxuIiwiQGlmICh0aGlzLmlzTG9hZGluZykge1xuICBAaWYgKCF0aGlzLnNrZWxldG9uKSB7XG4gICAgPGRpdiBjbGFzcz1cImxvYWRlclwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cbiAgICAgICAgPGRpdiBbbmdDbGFzc109XCInc3Bpbm5lciAnICsgdGhpcy5zaXplXCI+XG4gICAgICAgICAgPHN2ZyBcbiAgICAgICAgICAgIGNsYXNzPVwic3ZnXCIgXG4gICAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgXG4gICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgXG4gICAgICAgICAgICBmaWxsPVwibm9uZVwiPlxuICAgICAgICAgICAgPCEtLSBEw6lmaW5pdGlvbnMgcG91ciBsJ2FuaW1hdGlvbiAtLT5cbiAgICAgICAgICAgIDxkZWZzPlxuICAgICAgICAgICAgICA8Y2xpcFBhdGggaWQ9XCJmaWxsQ2xpcFwiPlxuICAgICAgICAgICAgICAgIDxyZWN0IGNsYXNzPVwiZmlsbC1yZWN0XCIgeD1cIjBcIiB5PVwiMzJcIiB3aWR0aD1cIjMyXCIgaGVpZ2h0PVwiMzJcIi8+XG4gICAgICAgICAgICAgIDwvY2xpcFBhdGg+XG4gICAgICAgICAgICA8L2RlZnM+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDwhLS0gQ29udG91ciBkZSBsYSBtYWlzb24gLS0+XG4gICAgICAgICAgICA8ZyBjbGFzcz1cIm91dGxpbmVcIj5cbiAgICAgICAgICAgICAgPCEtLSBUb2l0IC0tPlxuICAgICAgICAgICAgICA8cGF0aCBkPVwiTTE2IDRMNiAxMnYyaDJ2MTJoNnYtOGg0djhoNlYxNGgydi0yTDE2IDR6XCIgXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIFxuICAgICAgICAgICAgICAgICAgICBzdHJva2Utd2lkdGg9XCIyXCIgXG4gICAgICAgICAgICAgICAgICAgIGZpbGw9XCJub25lXCIgXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIvPlxuICAgICAgICAgICAgICA8IS0tIFBvcnRlIC0tPlxuICAgICAgICAgICAgICA8cmVjdCB4PVwiMTNcIiB5PVwiMjBcIiB3aWR0aD1cIjZcIiBoZWlnaHQ9XCI2XCIgXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIFxuICAgICAgICAgICAgICAgICAgICBzdHJva2Utd2lkdGg9XCIxLjVcIiBcbiAgICAgICAgICAgICAgICAgICAgZmlsbD1cIm5vbmVcIi8+XG4gICAgICAgICAgICAgIDwhLS0gUG9pZ27DqWUgZGUgcG9ydGUgLS0+XG4gICAgICAgICAgICAgIDxjaXJjbGUgY3g9XCIxNy41XCIgY3k9XCIyM1wiIHI9XCIwLjVcIiBcbiAgICAgICAgICAgICAgICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCIvPlxuICAgICAgICAgICAgICA8IS0tIEZlbsOqdHJlcyAtLT5cbiAgICAgICAgICAgICAgPHJlY3QgeD1cIjlcIiB5PVwiMTZcIiB3aWR0aD1cIjNcIiBoZWlnaHQ9XCIzXCIgXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIFxuICAgICAgICAgICAgICAgICAgICBzdHJva2Utd2lkdGg9XCIxLjVcIiBcbiAgICAgICAgICAgICAgICAgICAgZmlsbD1cIm5vbmVcIi8+XG4gICAgICAgICAgICAgIDxyZWN0IHg9XCIyMFwiIHk9XCIxNlwiIHdpZHRoPVwiM1wiIGhlaWdodD1cIjNcIiBcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZS13aWR0aD1cIjEuNVwiIFxuICAgICAgICAgICAgICAgICAgICBmaWxsPVwibm9uZVwiLz5cbiAgICAgICAgICAgICAgPCEtLSBDaGVtaW7DqWUgLS0+XG4gICAgICAgICAgICAgIDxyZWN0IHg9XCIyMVwiIHk9XCI4XCIgd2lkdGg9XCIyXCIgaGVpZ2h0PVwiNFwiIFxuICAgICAgICAgICAgICAgICAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlLXdpZHRoPVwiMS41XCIgXG4gICAgICAgICAgICAgICAgICAgIGZpbGw9XCJub25lXCIvPlxuICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8IS0tIFJlbXBsaXNzYWdlIHByb2dyZXNzaWYgLS0+XG4gICAgICAgICAgICA8ZyBjbGFzcz1cImZpbGxcIiBjbGlwLXBhdGg9XCJ1cmwoI2ZpbGxDbGlwKVwiPlxuICAgICAgICAgICAgICA8IS0tIENvcnBzIGRlIGxhIG1haXNvbiAtLT5cbiAgICAgICAgICAgICAgPHBhdGggZD1cIk04IDE0aDE2djEySDhWMTR6XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIG9wYWNpdHk9XCIwLjdcIi8+XG4gICAgICAgICAgICAgIDwhLS0gVG9pdCByZW1wbGkgLS0+XG4gICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTYgNEw2IDEydjJoMjB2LTJMMTYgNHpcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgb3BhY2l0eT1cIjAuOFwiLz5cbiAgICAgICAgICAgICAgPCEtLSBQb3J0ZSByZW1wbGllIC0tPlxuICAgICAgICAgICAgICA8cmVjdCB4PVwiMTNcIiB5PVwiMjBcIiB3aWR0aD1cIjZcIiBoZWlnaHQ9XCI2XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIG9wYWNpdHk9XCIwLjZcIi8+XG4gICAgICAgICAgICAgIDwhLS0gRmVuw6p0cmVzIHJlbXBsaWVzIC0tPlxuICAgICAgICAgICAgICA8cmVjdCB4PVwiOVwiIHk9XCIxNlwiIHdpZHRoPVwiM1wiIGhlaWdodD1cIjNcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgb3BhY2l0eT1cIjAuNVwiLz5cbiAgICAgICAgICAgICAgPHJlY3QgeD1cIjIwXCIgeT1cIjE2XCIgd2lkdGg9XCIzXCIgaGVpZ2h0PVwiM1wiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBvcGFjaXR5PVwiMC41XCIvPlxuICAgICAgICAgICAgICA8IS0tIENoZW1pbsOpZSByZW1wbGllIC0tPlxuICAgICAgICAgICAgICA8cmVjdCB4PVwiMjFcIiB5PVwiOFwiIHdpZHRoPVwiMlwiIGhlaWdodD1cIjRcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgb3BhY2l0eT1cIjAuNlwiLz5cbiAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIEBpZiAodGhpcy50ZXh0KSB7XG4gICAgICAgICAgPHAgY2xhc3M9XCJ0ZXh0XCI+e3sgdGhpcy50ZXh0IH19PC9wPlxuICAgICAgICB9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfSBAZWxzZSB7XG4gICAgPHRhLXBsYWNlaG9sZGVyIFtwbGFjZWhvbGRlcl09XCJ0aGlzLmdldFBsYWNlaG9sZGVyKClcIj48L3RhLXBsYWNlaG9sZGVyPlxuICB9XG59IEBlbHNlIHtcbiAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxufVxuIl19