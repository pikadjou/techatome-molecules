{"version":3,"file":"ta-services.mjs","sources":["../../src/lib/services/common/configuration.service.ts","../../src/lib/services/translated-enumeration/translated-enumeration-helpers.ts","../../src/lib/services/translated-enumeration/enumeration.service.ts","../../src/lib/services/menu/menu.service.ts","../../src/lib/services/projects/dto/project.ts","../../src/lib/services/projects/dto/status.ts","../../src/lib/services/projects/dto/address.ts","../../src/lib/services/projects/dto/tenant.ts","../../src/lib/services/projects/queries.ts","../../src/lib/services/projects/projects.service.ts","../../src/lib/services/files/dto/document.ts","../../src/lib/services/files/dto/file-type.ts","../../src/lib/services/files/queries.ts","../../src/lib/services/files/documents.service.ts","../../src/public-api.ts","../../src/ta-services.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { User } from '@auth0/auth0-angular';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CamConfigurationService {\n  public organizationName$ = new BehaviorSubject<string>('');\n\n  constructor() {}\n\n  public set(user: User) {\n    this.organizationName$.next(user['merlinsoftware/orgname']);\n  }\n}\n","import { compare } from '@ta/utils';\n\nimport { TranslatedEnumeration } from '../common/dto/translated-enumeration';\n\nexport const sortByTranslatedValue = (translated: TranslatedEnumeration[]) => {\n  return translated.sort((a, b) => compare(a.translatedValue || '', b.translatedValue || '', true));\n};\n","import { Injectable } from '@angular/core';\n\nimport { filter, map, tap } from 'rxjs/operators';\n\nimport { CamBaseService, MappingApiType, Request } from '@ta/server';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nimport { TranslatedEnumeration } from '../common/dto/translated-enumeration';\nimport { sortByTranslatedValue } from './translated-enumeration-helpers';\n\nconst apiRoutes: MappingApiType = {\n  GetWontDoReasons: {\n    type: 'GET',\n    url: '{ApiUrl}/wontdoreason',\n  },\n  GetWorkerJustifications: {\n    type: 'GET',\n    url: '{ApiUrl}/workerjustifications',\n  },\n  GetIncidentTypes: {\n    type: 'GET',\n    url: '{ApiUrl}/incidenttypes',\n  },\n  GetAbandonReasons: {\n    type: 'GET',\n    url: '{ApiUrl}/abandonreasons',\n  },\n  GetFileTypes: {\n    type: 'GET',\n    url: '{ApiUrl}/FileTypes',\n  },\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CamEnumerationService extends CamBaseService {\n  public getAbandonReasons$ = new BehaviorSubject<TranslatedEnumeration[]>([]);\n  public wontDoReasons$ = new BehaviorSubject<TranslatedEnumeration[]>([]);\n  public incidentTypes$ = new BehaviorSubject<TranslatedEnumeration[]>([]);\n  public workerJustifications$ = new BehaviorSubject<TranslatedEnumeration[]>([]);\n\n  private _getFileTypes$ = new BehaviorSubject<{\n    [index: string]: TranslatedEnumeration[];\n  }>({});\n\n  constructor() {\n    super(apiRoutes);\n  }\n\n  public fetchWontDoReasons$(): Observable<TranslatedEnumeration[]> {\n    return this._serverService\n      .request<TranslatedEnumeration[]>(new Request({ type: 'GetWontDoReasons', content: {}, cacheTime: 60 }))\n      .pipe(\n        filter(data => !!data),\n        tap(data => {\n          this.wontDoReasons$.next(data);\n        })\n      );\n  }\n\n  public fetchWorkerJustifications$(): Observable<TranslatedEnumeration[]> {\n    return this._serverService\n      .request<TranslatedEnumeration[]>(\n        new Request({\n          type: 'GetWorkerJustifications',\n          content: {},\n          cacheTime: 60,\n        })\n      )\n      .pipe(\n        filter(data => !!data),\n        tap(data => {\n          this.workerJustifications$.next(data);\n        })\n      );\n  }\n\n  public fetchIncidentTypes$(): Observable<TranslatedEnumeration[]> {\n    return this._serverService\n      .request<TranslatedEnumeration[]>(new Request({ type: 'GetIncidentTypes', content: {}, cacheTime: 60 }))\n      .pipe(\n        filter(data => !!data),\n        tap(data => {\n          this.incidentTypes$.next(data);\n        })\n      );\n  }\n  public fetchAbandonReasons(): Observable<TranslatedEnumeration[]> {\n    return this._serverService\n      .request<TranslatedEnumeration[]>(new Request({ type: 'GetAbandonReasons', cacheTime: -1 }))\n      .pipe(\n        filter(myData => !!myData),\n        map(reasons => sortByTranslatedValue(reasons)),\n        tap(reasons => this.getAbandonReasons$.next(reasons))\n      );\n  }\n\n  public getFileTypes = (id: number) => (fileTypeId: number) => {\n    return this._getFileTypes$.getValue()[id].find(document => document.id === fileTypeId);\n  };\n\n  public getFileTypes$ = (id: number): Observable<TranslatedEnumeration[]> =>\n    this._getFileTypes$.pipe(\n      map(data => data[id]),\n      filter(myData => !!myData),\n      map(fileTypes => sortByTranslatedValue(fileTypes))\n    );\n\n  public fetchFileTypes(): Observable<TranslatedEnumeration[]> {\n    return this._serverService\n      .request<TranslatedEnumeration[]>(new Request({ type: 'GetFileTypes', cacheTime: -1 }))\n      .pipe(\n        filter(myData => !!myData),\n        map(fileTypes => sortByTranslatedValue(fileTypes))\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs';\n\nconst isMinimizedKey = 'isMinimizedMenu';\n@Injectable({\n  providedIn: 'root',\n})\nexport class CamSharedMenuService {\n  public isMinimized$ = new BehaviorSubject<boolean>(\n    localStorage.getItem(isMinimizedKey) === '1' ? true : false\n  );\n\n  constructor() {\n    this.isMinimized$.subscribe((isMinimized) =>\n      localStorage.setItem(isMinimizedKey, isMinimized ? '1' : '0')\n    );\n  }\n}\n","import { GraphSchema } from '@ta/server';\n\nimport { Address } from './address';\nimport { ProjectStatus } from './status';\nimport { Tenant } from './tenant';\n\nexport interface Project {\n  id: string;\n  name: string;\n  status: ProjectStatus;\n  projectAddress: Address;\n  tenantInformation: Tenant;\n  projectPictureUrl: string;\n}\n\nexport const projectProps = new GraphSchema<Project>([\n  'id',\n  'name',\n  'status',\n  'projectAddress',\n  'tenantInformation',\n  'projectPictureUrl',\n]);\n","export enum ProjectStatus {\n  Unknown = 0,\n  InProgress = 1,\n  Pending = 2,\n  Done = 3,\n  Cancelled = 4,\n}\n","import { GraphSchema } from '@ta/server';\n\nexport interface Address {\n  id: string;\n  country: string;\n  city: string;\n  postCode: number;\n  street: string;\n}\n\nexport const addressProps = new GraphSchema<Address>(['id', 'country', 'city', 'postCode', 'street']);\n","import { GraphSchema } from '@ta/server';\n\nexport interface Tenant {\n  id: string;\n  tenantName: string;\n  projectId: number;\n  tenantId?: number;\n  customerId?: number;\n}\n\nexport const tenantProps = new GraphSchema<Tenant>(['id', 'tenantId', 'tenantName', 'customerId', 'projectId']);\n","import { Apollo_gql, GraphQueryPayload, graphQlPaginationFields, graphQlTake } from '@ta/server';\n\nimport { addressProps } from './dto/address';\nimport { projectProps } from './dto/project';\nimport { ProjectStatus } from './dto/status';\nimport { tenantProps } from './dto/tenant';\n\nexport function GET_MY_PROJECTS(filters?: { statusList?: ProjectStatus[]; take?: number }): GraphQueryPayload {\n  const where =\n    filters?.statusList && filters.statusList.length > 0 ? `where: { status: { in: [${filters.statusList}] } }` : '';\n  return {\n    query: Apollo_gql`\n        query Projects {\n          projects(${graphQlTake(filters?.take)}, ${where}) {\n            items {\n              ${projectProps.get('id')}\n              ${projectProps.get('name')}\n              ${projectProps.get('status')}\n              ${projectProps.get('projectPictureUrl')}\n              ${projectProps.get('projectAddress')} {\n                ${addressProps.get('city')}\n                ${addressProps.get('postCode')}\n                ${addressProps.get('street')}\n              }\n              ${projectProps.get('tenantInformation')} {\n                ${tenantProps.get('id')}\n                ${tenantProps.get('tenantName')}\n                ${tenantProps.get('projectId')}\n              }\n            }\n            ${filters?.take ? graphQlPaginationFields() : ''}\n          }\n        }\n      `,\n    variables: {},\n  };\n}\nexport function GET_PROJECT_BY_ID(id: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n        query GetProjectById($id: UUID!) {\n          projectById(id: $id) {\n            ${projectProps.get('id')}\n            ${projectProps.get('name')}\n            ${projectProps.get('status')}\n            ${projectProps.get('projectPictureUrl')}\n            ${projectProps.get('projectAddress')} {\n              ${addressProps.get('city')}\n              ${addressProps.get('postCode')}\n              ${addressProps.get('street')}\n            }\n            ${projectProps.get('tenantInformation')} {\n              ${tenantProps.get('id')}\n              ${tenantProps.get('tenantName')}\n              ${tenantProps.get('projectId')}\n            }\n          }\n        }\n      `,\n    variables: {\n      id: id,\n    },\n  };\n}\n\nexport function GET_LIGHT_PROJECTS(ids: string[]): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n        query Projects($ids: [UUID]!) {\n         projects(where: { id: { in: $ids } }, ${graphQlTake()}) {\n            items {\n              ${projectProps.get('id')}\n              ${projectProps.get('name')}\n            }\n          }\n        }\n      `,\n    variables: {\n      ids: ids,\n    },\n  };\n}\n\nexport function GET_PROJECTS(where: string, props: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n        query Projects {\n         projects(${where}, ${graphQlTake()}) {\n            items {\n              ${props}\n            }\n          }\n        }\n      `,\n    variables: {},\n  };\n}\n","import { Injectable } from '@angular/core';\n\nimport { CamBaseService, GraphEndpoint, HandleComplexRequest, HandleSimpleRequest } from '@ta/server';\nimport { map } from 'rxjs';\n\nimport { Project, projectProps } from './dto/project';\nimport { GET_LIGHT_PROJECTS, GET_MY_PROJECTS, GET_PROJECTS, GET_PROJECT_BY_ID } from './queries';\n\nconst graphEndpoint: GraphEndpoint = {\n  clientName: 'projectService',\n  endpoint: 'project',\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CamProjectsService extends CamBaseService {\n  protected _graphEndpoint = graphEndpoint;\n  public projects = new HandleSimpleRequest<Project[]>();\n  public project = new HandleComplexRequest<Project>();\n\n  public projectByContact = new HandleComplexRequest<Project[]>();\n\n  constructor() {\n    super();\n    super.registerRoutes({ graphEndpoint: graphEndpoint });\n  }\n\n  public getProjectsLightInfo$(ids: string[]) {\n    return this._graphService\n      .fetchPagedQueryList<Project>(GET_LIGHT_PROJECTS(ids), 'projects', graphEndpoint.clientName)\n      .pipe(map(data => data.items ?? []));\n  }\n\n  public fetchProjectsByContact$(contactId: string) {\n    return this.projectByContact.fetch(\n      contactId,\n      this._graphService\n        .fetchPagedQueryList<Project>(\n          GET_PROJECTS(\n            `where: { contactId: { eq: \"${contactId}\" } }`,\n            `\n              ${projectProps.get('id')}\n              ${projectProps.get('name')}\n            `\n          ),\n          'projects',\n          graphEndpoint.clientName\n        )\n        .pipe(map(data => data.items ?? []))\n    );\n  }\n\n  public fetchProjects$() {\n    return this.projects.fetch(\n      this._graphService\n        .fetchPagedQueryList<Project>(GET_MY_PROJECTS(), 'projects', graphEndpoint.clientName)\n        .pipe(map(data => data.items))\n    );\n  }\n\n  public fetchProject$(id: string) {\n    return this.project.fetch(\n      id,\n      this._graphService.fetchQuery<Project>(GET_PROJECT_BY_ID(id), 'projectById', graphEndpoint.clientName)\n    );\n  }\n}\n","import { GraphSchema } from '@ta/server';\n\nimport { FileType } from './file-type';\n\nexport interface DocumentDto {\n  id: string;\n  name?: string;\n  url: string;\n  fileType: FileType;\n  size: number;\n  description?: string;\n  uploadedDate: string;\n  tenantId: number;\n  tenantName: string;\n  tenantDocumentId: number;\n  projectId?: string;\n  project?: { id: string; name: string };\n}\n\nexport const documentProps = new GraphSchema<DocumentDto>([\n  'id',\n  'name',\n  'url',\n  'fileType',\n  'size',\n  'description',\n  'uploadedDate',\n  'tenantId',\n  'tenantName',\n  'tenantDocumentId',\n  'projectId',\n]);\n","export enum FileType {\n  Unknown = 0,\n  PriceOfferVersion = 1,\n  SingleLineDiagram = 2,\n  GRDFolder = 3,\n  ExternalEmail = 4,\n  Invoice = 5,\n  PurchaseOrder = 6,\n  Checklist = 7,\n  SignedPriceOffer = 8,\n  ExitVoucher = 9,\n  Picture = 10,\n}\n","import { Apollo_gql, GraphQueryPayload, graphQlTake } from '@ta/server';\n\nimport { documentProps } from './dto/document';\n\nexport function GET_DOCUMENTS(filters: { ids?: string[]; take?: number }): GraphQueryPayload {\n  const where =\n    filters.ids && filters.ids.length > 0\n      ? `where: { id: { in: [${filters.ids.map(id => `\"${id}\"`).join(', ')}] } }`\n      : '';\n  return {\n    query: Apollo_gql`\n        query Documents {\n          documents(${graphQlTake(filters.take)}, order: { isNew: DESC, uploadedDate: DESC }, ${where}) {\n            items {\n              ${documentProps.get('id')}\n              ${documentProps.get('name')}\n              ${documentProps.get('url')}\n              ${documentProps.get('projectId')}\n              ${documentProps.get('fileType')}\n              ${documentProps.get('size')}\n              ${documentProps.get('uploadedDate')}\n            }\n          }\n        }\n      `,\n    variables: {},\n  };\n}\n","import { Injectable } from '@angular/core';\n\nimport { CamBaseService, GraphEndpoint, HandleSimpleRequest, MappingApiType, Request } from '@ta/server';\nimport { isNonNullable, keepUniqueObjectByProperty } from '@ta/utils';\nimport { filter, map } from 'rxjs';\n\nimport { DocumentDto } from './dto/document';\nimport { UploadFilePayloadInput } from './dto/post/UploadFilePayloadInput';\nimport { GET_DOCUMENTS } from './queries';\n\nconst graphEndpoint: GraphEndpoint = {\n  clientName: 'documentService',\n  endpoint: 'document',\n};\n\nconst apiRoutes: MappingApiType = {\n  UploadDocument: {\n    type: 'FILES',\n    url: '{ApiUrl}/document-rest/upload',\n  },\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CamDocumentsService extends CamBaseService {\n  public documents = new HandleSimpleRequest<DocumentDto[]>();\n\n  constructor() {\n    super();\n    super.registerRoutes({\n      apiRoutes: apiRoutes,\n      graphEndpoint: graphEndpoint,\n    });\n  }\n\n  public getDocuments(ids: string[]) {\n    return this.documents.get()?.filter(doc => ids.includes(doc.id));\n  }\n\n  public getDocuments$(ids: string[]) {\n    return this.documents.get$().pipe(map(list => list?.filter(doc => ids.includes(doc.id))));\n  }\n  public fetchDocuments$(ids: string[]) {\n    return this.documents.fetch(\n      this._graphService\n        .fetchPagedQueryList<DocumentDto>(GET_DOCUMENTS({ ids }), 'documents', graphEndpoint.clientName)\n        .pipe(\n          map(data => data.items ?? []),\n          filter(isNonNullable),\n          map(list => [...(list ?? []), ...(this.documents.get() ?? [])]),\n          map(list => keepUniqueObjectByProperty(list, item => item.id))\n        )\n    );\n  }\n\n  public addDocument$(doc: UploadFilePayloadInput) {\n    const formData = new FormData();\n    formData.append('file', doc.file, doc.file.name);\n\n    return this._serverService.request<DocumentDto>(\n      new Request({\n        type: 'UploadDocument',\n        content: {\n          files: formData,\n        },\n      })\n    );\n  }\n}\n","/*\n * Public API Surface of services\n */\n\nexport * from './lib/services/common/public-api';\n\nexport * from './lib/services/translated-enumeration/translated-enumeration-helpers';\nexport * from './lib/services/translated-enumeration/enumeration.service';\n\nexport * from './lib/services/menu/menu.service';\n\nexport * from './lib/services/projects/public-api';\n\nexport * from './lib/services/files/dto/post/UploadFilePayloadInput';\nexport * from './lib/services/files/dto/document';\nexport * from './lib/services/files/dto/file-type';\nexport * from './lib/services/files/documents.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["apiRoutes","graphEndpoint","map","filter"],"mappings":"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"}