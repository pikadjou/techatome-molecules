import { Injectable } from '@angular/core';
import { filter, map } from 'rxjs';
import { HandleSimpleRequest, Request, TaBaseService } from '@ta/server';
import { isNonNullable, keepUniqueObjectByProperty } from '@ta/utils';
import { GET_DOCUMENTS } from './queries';
import * as i0 from "@angular/core";
const graphEndpoint = {
    clientName: 'documentService',
    endpoint: 'document',
};
const apiRoutes = {
    UploadDocument: {
        type: 'FILES',
        url: '{ApiUrl}/Media/upload',
    },
};
export class TaDocumentsService extends TaBaseService {
    constructor() {
        super();
        this.documents = new HandleSimpleRequest();
        super.registerRoutes({
            apiRoutes: apiRoutes,
            graphEndpoint: graphEndpoint,
        });
    }
    getDocuments(ids) {
        return this.documents.get()?.filter(doc => ids.includes(doc.id));
    }
    getDocuments$(ids) {
        return this.documents.get$().pipe(map(list => list?.filter(doc => ids.includes(doc.id))));
    }
    fetchDocuments$(ids) {
        return this.documents.fetch(this._graphService
            .fetchPagedQueryList(GET_DOCUMENTS({ ids }), 'documents', graphEndpoint.clientName)
            .pipe(map(data => data.items ?? []), filter(isNonNullable), map(list => [...(list ?? []), ...(this.documents.get() ?? [])]), map(list => keepUniqueObjectByProperty(list, item => item.id))));
    }
    addDocument$(doc) {
        const formData = new FormData();
        formData.append('file', doc.file, doc.file.name);
        return this._serverService.request(new Request({
            type: 'UploadDocument',
            content: {
                files: formData,
            },
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: TaDocumentsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: TaDocumentsService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: TaDocumentsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3NlcnZpY2VzL2ZpbGVzL2RvY3VtZW50cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFbkMsT0FBTyxFQUFpQixtQkFBbUIsRUFBa0IsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN4RyxPQUFPLEVBQUUsYUFBYSxFQUFFLDBCQUEwQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBSXRFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUM7O0FBRTFDLE1BQU0sYUFBYSxHQUFrQjtJQUNuQyxVQUFVLEVBQUUsaUJBQWlCO0lBQzdCLFFBQVEsRUFBRSxVQUFVO0NBQ3JCLENBQUM7QUFFRixNQUFNLFNBQVMsR0FBbUI7SUFDaEMsY0FBYyxFQUFFO1FBQ2QsSUFBSSxFQUFFLE9BQU87UUFDYixHQUFHLEVBQUUsdUJBQXVCO0tBQzdCO0NBQ0YsQ0FBQztBQUtGLE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxhQUFhO0lBR25EO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFISCxjQUFTLEdBQUcsSUFBSSxtQkFBbUIsRUFBaUIsQ0FBQztRQUkxRCxLQUFLLENBQUMsY0FBYyxDQUFDO1lBQ25CLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLGFBQWEsRUFBRSxhQUFhO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxZQUFZLENBQUMsR0FBYTtRQUMvQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRU0sYUFBYSxDQUFDLEdBQWE7UUFDaEMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUYsQ0FBQztJQUNNLGVBQWUsQ0FBQyxHQUFhO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQ3pCLElBQUksQ0FBQyxhQUFhO2FBQ2YsbUJBQW1CLENBQWMsYUFBYSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsYUFBYSxDQUFDLFVBQVUsQ0FBQzthQUMvRixJQUFJLENBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsRUFDN0IsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUMvRCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDL0QsQ0FDSixDQUFDO0lBQ0osQ0FBQztJQUVNLFlBQVksQ0FBQyxHQUEyQjtRQUM3QyxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQ2hDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVqRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUNoQyxJQUFJLE9BQU8sQ0FBQztZQUNWLElBQUksRUFBRSxnQkFBZ0I7WUFDdEIsT0FBTyxFQUFFO2dCQUNQLEtBQUssRUFBRSxRQUFRO2FBQ2hCO1NBQ0YsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOytHQTNDVSxrQkFBa0I7bUhBQWxCLGtCQUFrQixjQUZqQixNQUFNOzs0RkFFUCxrQkFBa0I7a0JBSDlCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBHcmFwaEVuZHBvaW50LCBIYW5kbGVTaW1wbGVSZXF1ZXN0LCBNYXBwaW5nQXBpVHlwZSwgUmVxdWVzdCwgVGFCYXNlU2VydmljZSB9IGZyb20gJ0B0YS9zZXJ2ZXInO1xuaW1wb3J0IHsgaXNOb25OdWxsYWJsZSwga2VlcFVuaXF1ZU9iamVjdEJ5UHJvcGVydHkgfSBmcm9tICdAdGEvdXRpbHMnO1xuXG5pbXBvcnQgeyBEb2N1bWVudER0byB9IGZyb20gJy4vZHRvL2RvY3VtZW50JztcbmltcG9ydCB7IFVwbG9hZEZpbGVQYXlsb2FkSW5wdXQgfSBmcm9tICcuL2R0by9wb3N0L1VwbG9hZEZpbGVQYXlsb2FkSW5wdXQnO1xuaW1wb3J0IHsgR0VUX0RPQ1VNRU5UUyB9IGZyb20gJy4vcXVlcmllcyc7XG5cbmNvbnN0IGdyYXBoRW5kcG9pbnQ6IEdyYXBoRW5kcG9pbnQgPSB7XG4gIGNsaWVudE5hbWU6ICdkb2N1bWVudFNlcnZpY2UnLFxuICBlbmRwb2ludDogJ2RvY3VtZW50Jyxcbn07XG5cbmNvbnN0IGFwaVJvdXRlczogTWFwcGluZ0FwaVR5cGUgPSB7XG4gIFVwbG9hZERvY3VtZW50OiB7XG4gICAgdHlwZTogJ0ZJTEVTJyxcbiAgICB1cmw6ICd7QXBpVXJsfS9NZWRpYS91cGxvYWQnLFxuICB9LFxufTtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFRhRG9jdW1lbnRzU2VydmljZSBleHRlbmRzIFRhQmFzZVNlcnZpY2Uge1xuICBwdWJsaWMgZG9jdW1lbnRzID0gbmV3IEhhbmRsZVNpbXBsZVJlcXVlc3Q8RG9jdW1lbnREdG9bXT4oKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHN1cGVyLnJlZ2lzdGVyUm91dGVzKHtcbiAgICAgIGFwaVJvdXRlczogYXBpUm91dGVzLFxuICAgICAgZ3JhcGhFbmRwb2ludDogZ3JhcGhFbmRwb2ludCxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXREb2N1bWVudHMoaWRzOiBzdHJpbmdbXSkge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50cy5nZXQoKT8uZmlsdGVyKGRvYyA9PiBpZHMuaW5jbHVkZXMoZG9jLmlkKSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0RG9jdW1lbnRzJChpZHM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRzLmdldCQoKS5waXBlKG1hcChsaXN0ID0+IGxpc3Q/LmZpbHRlcihkb2MgPT4gaWRzLmluY2x1ZGVzKGRvYy5pZCkpKSk7XG4gIH1cbiAgcHVibGljIGZldGNoRG9jdW1lbnRzJChpZHM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRzLmZldGNoKFxuICAgICAgdGhpcy5fZ3JhcGhTZXJ2aWNlXG4gICAgICAgIC5mZXRjaFBhZ2VkUXVlcnlMaXN0PERvY3VtZW50RHRvPihHRVRfRE9DVU1FTlRTKHsgaWRzIH0pLCAnZG9jdW1lbnRzJywgZ3JhcGhFbmRwb2ludC5jbGllbnROYW1lKVxuICAgICAgICAucGlwZShcbiAgICAgICAgICBtYXAoZGF0YSA9PiBkYXRhLml0ZW1zID8/IFtdKSxcbiAgICAgICAgICBmaWx0ZXIoaXNOb25OdWxsYWJsZSksXG4gICAgICAgICAgbWFwKGxpc3QgPT4gWy4uLihsaXN0ID8/IFtdKSwgLi4uKHRoaXMuZG9jdW1lbnRzLmdldCgpID8/IFtdKV0pLFxuICAgICAgICAgIG1hcChsaXN0ID0+IGtlZXBVbmlxdWVPYmplY3RCeVByb3BlcnR5KGxpc3QsIGl0ZW0gPT4gaXRlbS5pZCkpXG4gICAgICAgIClcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGFkZERvY3VtZW50JChkb2M6IFVwbG9hZEZpbGVQYXlsb2FkSW5wdXQpIHtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIGRvYy5maWxlLCBkb2MuZmlsZS5uYW1lKTtcblxuICAgIHJldHVybiB0aGlzLl9zZXJ2ZXJTZXJ2aWNlLnJlcXVlc3Q8RG9jdW1lbnREdG8+KFxuICAgICAgbmV3IFJlcXVlc3Qoe1xuICAgICAgICB0eXBlOiAnVXBsb2FkRG9jdW1lbnQnLFxuICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgZmlsZXM6IGZvcm1EYXRhLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG4iXX0=