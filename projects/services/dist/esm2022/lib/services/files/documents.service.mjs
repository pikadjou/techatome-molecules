import { Injectable } from '@angular/core';
import { filter, map } from 'rxjs';
import { HandleSimpleRequest, Request, TaBaseService } from '@ta/server';
import { isNonNullable, keepUniqueObjectByProperty } from '@ta/utils';
import { GET_DOCUMENTS } from './queries';
import * as i0 from "@angular/core";
const graphEndpoint = {
    clientName: 'documentService',
    endpoint: 'document',
};
const apiRoutes = {
    UploadDocument: {
        type: 'FILES',
        url: '{ApiUrl}/document-rest/upload',
    },
};
export class TaDocumentsService extends TaBaseService {
    constructor() {
        super();
        this.documents = new HandleSimpleRequest();
        super.registerRoutes({
            apiRoutes: apiRoutes,
            graphEndpoint: graphEndpoint,
        });
    }
    getDocuments(ids) {
        return this.documents.get()?.filter(doc => ids.includes(doc.id));
    }
    getDocuments$(ids) {
        return this.documents.get$().pipe(map(list => list?.filter(doc => ids.includes(doc.id))));
    }
    fetchDocuments$(ids) {
        return this.documents.fetch(this._graphService
            .fetchPagedQueryList(GET_DOCUMENTS({ ids }), 'documents', graphEndpoint.clientName)
            .pipe(map(data => data.items ?? []), filter(isNonNullable), map(list => [...(list ?? []), ...(this.documents.get() ?? [])]), map(list => keepUniqueObjectByProperty(list, item => item.id))));
    }
    addDocument$(doc) {
        const formData = new FormData();
        formData.append('file', doc.file, doc.file.name);
        return this._serverService.request(new Request({
            type: 'UploadDocument',
            content: {
                files: formData,
            },
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TaDocumentsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TaDocumentsService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TaDocumentsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbGliL3NlcnZpY2VzL2ZpbGVzL2RvY3VtZW50cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFbkMsT0FBTyxFQUFpQixtQkFBbUIsRUFBa0IsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN4RyxPQUFPLEVBQUUsYUFBYSxFQUFFLDBCQUEwQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBSXRFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUM7O0FBRTFDLE1BQU0sYUFBYSxHQUFrQjtJQUNuQyxVQUFVLEVBQUUsaUJBQWlCO0lBQzdCLFFBQVEsRUFBRSxVQUFVO0NBQ3JCLENBQUM7QUFFRixNQUFNLFNBQVMsR0FBbUI7SUFDaEMsY0FBYyxFQUFFO1FBQ2QsSUFBSSxFQUFFLE9BQU87UUFDYixHQUFHLEVBQUUsK0JBQStCO0tBQ3JDO0NBQ0YsQ0FBQztBQUtGLE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxhQUFhO0lBR25EO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFISCxjQUFTLEdBQUcsSUFBSSxtQkFBbUIsRUFBaUIsQ0FBQztRQUkxRCxLQUFLLENBQUMsY0FBYyxDQUFDO1lBQ25CLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLGFBQWEsRUFBRSxhQUFhO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxZQUFZLENBQUMsR0FBYTtRQUMvQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRU0sYUFBYSxDQUFDLEdBQWE7UUFDaEMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUYsQ0FBQztJQUNNLGVBQWUsQ0FBQyxHQUFhO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQ3pCLElBQUksQ0FBQyxhQUFhO2FBQ2YsbUJBQW1CLENBQWMsYUFBYSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsYUFBYSxDQUFDLFVBQVUsQ0FBQzthQUMvRixJQUFJLENBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsRUFDN0IsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUMvRCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDL0QsQ0FDSixDQUFDO0lBQ0osQ0FBQztJQUVNLFlBQVksQ0FBQyxHQUEyQjtRQUM3QyxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQ2hDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVqRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUNoQyxJQUFJLE9BQU8sQ0FBQztZQUNWLElBQUksRUFBRSxnQkFBZ0I7WUFDdEIsT0FBTyxFQUFFO2dCQUNQLEtBQUssRUFBRSxRQUFRO2FBQ2hCO1NBQ0YsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOytHQTNDVSxrQkFBa0I7bUhBQWxCLGtCQUFrQixjQUZqQixNQUFNOzs0RkFFUCxrQkFBa0I7a0JBSDlCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBHcmFwaEVuZHBvaW50LCBIYW5kbGVTaW1wbGVSZXF1ZXN0LCBNYXBwaW5nQXBpVHlwZSwgUmVxdWVzdCwgVGFCYXNlU2VydmljZSB9IGZyb20gJ0B0YS9zZXJ2ZXInO1xuaW1wb3J0IHsgaXNOb25OdWxsYWJsZSwga2VlcFVuaXF1ZU9iamVjdEJ5UHJvcGVydHkgfSBmcm9tICdAdGEvdXRpbHMnO1xuXG5pbXBvcnQgeyBEb2N1bWVudER0byB9IGZyb20gJy4vZHRvL2RvY3VtZW50JztcbmltcG9ydCB7IFVwbG9hZEZpbGVQYXlsb2FkSW5wdXQgfSBmcm9tICcuL2R0by9wb3N0L1VwbG9hZEZpbGVQYXlsb2FkSW5wdXQnO1xuaW1wb3J0IHsgR0VUX0RPQ1VNRU5UUyB9IGZyb20gJy4vcXVlcmllcyc7XG5cbmNvbnN0IGdyYXBoRW5kcG9pbnQ6IEdyYXBoRW5kcG9pbnQgPSB7XG4gIGNsaWVudE5hbWU6ICdkb2N1bWVudFNlcnZpY2UnLFxuICBlbmRwb2ludDogJ2RvY3VtZW50Jyxcbn07XG5cbmNvbnN0IGFwaVJvdXRlczogTWFwcGluZ0FwaVR5cGUgPSB7XG4gIFVwbG9hZERvY3VtZW50OiB7XG4gICAgdHlwZTogJ0ZJTEVTJyxcbiAgICB1cmw6ICd7QXBpVXJsfS9kb2N1bWVudC1yZXN0L3VwbG9hZCcsXG4gIH0sXG59O1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVGFEb2N1bWVudHNTZXJ2aWNlIGV4dGVuZHMgVGFCYXNlU2VydmljZSB7XG4gIHB1YmxpYyBkb2N1bWVudHMgPSBuZXcgSGFuZGxlU2ltcGxlUmVxdWVzdDxEb2N1bWVudER0b1tdPigpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgc3VwZXIucmVnaXN0ZXJSb3V0ZXMoe1xuICAgICAgYXBpUm91dGVzOiBhcGlSb3V0ZXMsXG4gICAgICBncmFwaEVuZHBvaW50OiBncmFwaEVuZHBvaW50LFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldERvY3VtZW50cyhpZHM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRzLmdldCgpPy5maWx0ZXIoZG9jID0+IGlkcy5pbmNsdWRlcyhkb2MuaWQpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXREb2N1bWVudHMkKGlkczogc3RyaW5nW10pIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudHMuZ2V0JCgpLnBpcGUobWFwKGxpc3QgPT4gbGlzdD8uZmlsdGVyKGRvYyA9PiBpZHMuaW5jbHVkZXMoZG9jLmlkKSkpKTtcbiAgfVxuICBwdWJsaWMgZmV0Y2hEb2N1bWVudHMkKGlkczogc3RyaW5nW10pIHtcbiAgICByZXR1cm4gdGhpcy5kb2N1bWVudHMuZmV0Y2goXG4gICAgICB0aGlzLl9ncmFwaFNlcnZpY2VcbiAgICAgICAgLmZldGNoUGFnZWRRdWVyeUxpc3Q8RG9jdW1lbnREdG8+KEdFVF9ET0NVTUVOVFMoeyBpZHMgfSksICdkb2N1bWVudHMnLCBncmFwaEVuZHBvaW50LmNsaWVudE5hbWUpXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIG1hcChkYXRhID0+IGRhdGEuaXRlbXMgPz8gW10pLFxuICAgICAgICAgIGZpbHRlcihpc05vbk51bGxhYmxlKSxcbiAgICAgICAgICBtYXAobGlzdCA9PiBbLi4uKGxpc3QgPz8gW10pLCAuLi4odGhpcy5kb2N1bWVudHMuZ2V0KCkgPz8gW10pXSksXG4gICAgICAgICAgbWFwKGxpc3QgPT4ga2VlcFVuaXF1ZU9iamVjdEJ5UHJvcGVydHkobGlzdCwgaXRlbSA9PiBpdGVtLmlkKSlcbiAgICAgICAgKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgYWRkRG9jdW1lbnQkKGRvYzogVXBsb2FkRmlsZVBheWxvYWRJbnB1dCkge1xuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZG9jLmZpbGUsIGRvYy5maWxlLm5hbWUpO1xuXG4gICAgcmV0dXJuIHRoaXMuX3NlcnZlclNlcnZpY2UucmVxdWVzdDxEb2N1bWVudER0bz4oXG4gICAgICBuZXcgUmVxdWVzdCh7XG4gICAgICAgIHR5cGU6ICdVcGxvYWREb2N1bWVudCcsXG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICBmaWxlczogZm9ybURhdGEsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==