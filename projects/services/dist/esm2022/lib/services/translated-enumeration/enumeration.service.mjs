import { Injectable } from '@angular/core';
import { filter, map, tap } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
import { Request, TaBaseService } from '@ta/server';
import { sortByTranslatedValue } from './translated-enumeration-helpers';
import * as i0 from "@angular/core";
const apiRoutes = {
    GetWontDoReasons: {
        type: 'GET',
        url: '{ApiUrl}/wontdoreason',
    },
    GetWorkerJustifications: {
        type: 'GET',
        url: '{ApiUrl}/workerjustifications',
    },
    GetIncidentTypes: {
        type: 'GET',
        url: '{ApiUrl}/incidenttypes',
    },
    GetAbandonReasons: {
        type: 'GET',
        url: '{ApiUrl}/abandonreasons',
    },
    GetFileTypes: {
        type: 'GET',
        url: '{ApiUrl}/FileTypes',
    },
};
export class TaEnumerationService extends TaBaseService {
    constructor() {
        super(apiRoutes);
        this.getAbandonReasons$ = new BehaviorSubject([]);
        this.wontDoReasons$ = new BehaviorSubject([]);
        this.incidentTypes$ = new BehaviorSubject([]);
        this.workerJustifications$ = new BehaviorSubject([]);
        this._getFileTypes$ = new BehaviorSubject({});
        this.getFileTypes = (id) => (fileTypeId) => {
            return this._getFileTypes$.getValue()[id].find(document => document.id === fileTypeId);
        };
        this.getFileTypes$ = (id) => this._getFileTypes$.pipe(map(data => data[id]), filter(myData => !!myData), map(fileTypes => sortByTranslatedValue(fileTypes)));
    }
    fetchWontDoReasons$() {
        return this._serverService
            .request(new Request({ type: 'GetWontDoReasons', content: {}, cacheTime: 60 }))
            .pipe(filter(data => !!data), tap(data => {
            this.wontDoReasons$.next(data);
        }));
    }
    fetchWorkerJustifications$() {
        return this._serverService
            .request(new Request({
            type: 'GetWorkerJustifications',
            content: {},
            cacheTime: 60,
        }))
            .pipe(filter(data => !!data), tap(data => {
            this.workerJustifications$.next(data);
        }));
    }
    fetchIncidentTypes$() {
        return this._serverService
            .request(new Request({ type: 'GetIncidentTypes', content: {}, cacheTime: 60 }))
            .pipe(filter(data => !!data), tap(data => {
            this.incidentTypes$.next(data);
        }));
    }
    fetchAbandonReasons() {
        return this._serverService
            .request(new Request({ type: 'GetAbandonReasons', cacheTime: -1 }))
            .pipe(filter(myData => !!myData), map(reasons => sortByTranslatedValue(reasons)), tap(reasons => this.getAbandonReasons$.next(reasons)));
    }
    fetchFileTypes() {
        return this._serverService
            .request(new Request({ type: 'GetFileTypes', cacheTime: -1 }))
            .pipe(filter(myData => !!myData), map(fileTypes => sortByTranslatedValue(fileTypes)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: TaEnumerationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: TaEnumerationService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: TaEnumerationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,