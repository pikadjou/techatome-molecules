export var TaMainRoute;
(function (TaMainRoute) {
    TaMainRoute["HOME"] = "HOME";
    TaMainRoute["USERLOGIN"] = "USERLOGIN";
    TaMainRoute["SINGIN"] = "SINGIN";
    TaMainRoute["USERLOGOUT"] = "USERLOGOUT";
    TaMainRoute["NOTIFICATIONS"] = "NOTIFICATIONS";
    TaMainRoute["REDIRECT"] = "REDIRECT";
})(TaMainRoute || (TaMainRoute = {}));
export class TaRoutesCore {
    constructor() {
        this.routes = [
            {
                key: TaMainRoute.HOME,
                url: '',
            },
            {
                key: TaMainRoute.USERLOGIN,
                url: 'login',
            },
            {
                key: TaMainRoute.SINGIN,
                url: 'signin',
            },
            {
                key: TaMainRoute.USERLOGOUT,
                url: 'logout',
            },
            {
                key: TaMainRoute.NOTIFICATIONS,
                url: 'notifications',
            },
            {
                key: TaMainRoute.REDIRECT,
                url: 'redirect',
            },
        ];
    }
    addRoute(route) {
        this.routes.push(route);
    }
    addRoutes(routes) {
        routes.forEach(route => this.addRoute(route));
    }
    getHome() {
        return this.getAbsoluteUrl([TaMainRoute.HOME]);
    }
    getLogin() {
        return this.getAbsoluteUrl([TaMainRoute.USERLOGIN]);
    }
    getSign() {
        return this.getAbsoluteUrl([TaMainRoute.SINGIN]);
    }
    getLogout() {
        return this.getAbsoluteUrl([TaMainRoute.USERLOGOUT]);
    }
    getUrl(eNums, params = {}, strict = false) {
        const url = this._replaceParams(this._getUrl(eNums), params);
        return strict ? this._removeParams(url) : url;
    }
    getAbsoluteUrl(eNums, params = {}, strict = false) {
        const url = this._replaceParams(this._getUrl(eNums, true), params);
        return strict ? this._removeParams(url) : url;
    }
    addQueryParamsToUrl(route, params = {}) {
        const keys = Object.keys(params);
        for (let key of keys) {
            route.params[key] = params[key];
        }
        return route.toString();
    }
    getPermission(eNums) {
        const route = this._getRouteByENum(eNums);
        if (route === null) {
            return true;
        }
        else {
            return route.canActivate === undefined ? true : route.canActivate;
        }
    }
    _replaceParams(url, params) {
        if (!params || Object.keys(params).length === 0) {
            return url;
        }
        // Create regex using the keys of the replacement object.
        const regex = new RegExp(':(' + Object.keys(params).join('|') + ')', 'g');
        // Replace the string by the value in object
        return url.replace(regex, (m, $1) => params[$1] || m);
    }
    _removeParams(url) {
        const regex = new RegExp('/:([a-zA-Z0-9_]*)', 'g');
        return url.replace(regex, '');
    }
    _getRouteByENum(eNums) {
        let route = null;
        for (const eNum of eNums) {
            route = this._getByENum(route === null ? this.routes : route.children, eNum);
            if (route === null) {
                return null;
            }
        }
        return route;
    }
    _getUrl(eNums, absolute = false) {
        let route = null;
        let url = '';
        for (const eNum of eNums) {
            route = this._getByENum(route === null ? this.routes : route.children, eNum);
            if (route === null) {
                break;
            }
            url += (url === '' ? '' : '/') + route.url;
        }
        return route === null ? '' : absolute === false ? route.url : '/' + url;
    }
    _getByENum(routes, eNum) {
        if (!routes) {
            return null;
        }
        for (const route of routes) {
            if (route.key === eNum) {
                return route;
            }
        }
        return null;
    }
}
export const TaRoutes = new TaRoutesCore();
//# sourceMappingURL=data:application/json;base64,