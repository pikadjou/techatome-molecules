import { BehaviorSubject } from 'rxjs';
import { Menu, MenuBase } from '../models/public-api';
export class FilterHelper {
    get filter() {
        return this._filter;
    }
    set filter(filter) {
        this._filter = filter;
        this.refresh$.next(this._filter);
    }
    constructor(items) {
        this.refresh$ = new BehaviorSubject('');
        this._filter = '';
        this._items = items;
    }
    getMenu() {
        return new Menu({
            elements: this._items.map(item => {
                const key = this._getKey(item.label);
                return new MenuBase({
                    key: key,
                    label: item.label,
                    callback: () => (this.filter = key),
                    defaultOpen: item.defaultOpen,
                    order: item.order,
                    visible$: item.visible$,
                    translationData: item.translationData,
                    options: item.options,
                });
            }),
            direction: 'responsive',
        });
    }
    updateMenuDatas(data) {
        for (const item of data) {
            const itemToModify = this._items.find(x => this._getKey(x.label) === item.key);
            if (itemToModify) {
                itemToModify.translationData = item.translationData;
                itemToModify.options = item.options;
                if (item.visible$) {
                    itemToModify.visible$ = item.visible$;
                }
            }
        }
    }
    _getKey(label) {
        const lastDot = label.lastIndexOf('.');
        if (lastDot !== -1) {
            return label.substring(lastDot + 1);
        }
        else {
            return label;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9oZWxwZXJzL2ZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFdEQsTUFBTSxPQUFPLFlBQVk7SUFHdkIsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFDRCxJQUFJLE1BQU0sQ0FBQyxNQUFjO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBRXRCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBV0QsWUFDRSxLQU9HO1FBNUJFLGFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQVVsQyxZQUFPLEdBQVcsRUFBRSxDQUFDO1FBb0IzQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBQ00sT0FBTztRQUNaLE9BQU8sSUFBSSxJQUFJLENBQUM7WUFDZCxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQy9CLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNyQyxPQUFPLElBQUksUUFBUSxDQUFDO29CQUNsQixHQUFHLEVBQUUsR0FBRztvQkFDUixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7b0JBQ2pCLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO29CQUNuQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7b0JBQzdCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztvQkFDakIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO29CQUN2QixlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWU7b0JBQ3JDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztpQkFDdEIsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDO1lBQ0YsU0FBUyxFQUFFLFlBQVk7U0FDeEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLGVBQWUsQ0FDcEIsSUFLRztRQUVILEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxFQUFFLENBQUM7WUFDeEIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0UsSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDakIsWUFBWSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO2dCQUNwRCxZQUFZLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ3BDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO29CQUNsQixZQUFZLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ3hDLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFTyxPQUFPLENBQUMsS0FBYTtRQUMzQixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDbkIsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBNZW51LCBNZW51QmFzZSB9IGZyb20gJy4uL21vZGVscy9wdWJsaWMtYXBpJztcblxuZXhwb3J0IGNsYXNzIEZpbHRlckhlbHBlciB7XG4gIHB1YmxpYyByZWZyZXNoJCA9IG5ldyBCZWhhdmlvclN1YmplY3QoJycpO1xuXG4gIGdldCBmaWx0ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbHRlcjtcbiAgfVxuICBzZXQgZmlsdGVyKGZpbHRlcjogc3RyaW5nKSB7XG4gICAgdGhpcy5fZmlsdGVyID0gZmlsdGVyO1xuXG4gICAgdGhpcy5yZWZyZXNoJC5uZXh0KHRoaXMuX2ZpbHRlcik7XG4gIH1cbiAgcHJpdmF0ZSBfZmlsdGVyOiBzdHJpbmcgPSAnJztcblxuICBwcml2YXRlIF9pdGVtczoge1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgZGVmYXVsdE9wZW46IGJvb2xlYW47XG4gICAgb3JkZXI/OiBudW1iZXI7XG4gICAgdmlzaWJsZSQ/OiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIHRyYW5zbGF0aW9uRGF0YT86IHt9O1xuICAgIG9wdGlvbnM/OiB7IG5vdGlmaWNhdGlvbkJhZGdlOiB7IGxhYmVsOiBudW1iZXI7IHN0eWxlPzogc3RyaW5nIH0gfTtcbiAgfVtdO1xuICBjb25zdHJ1Y3RvcihcbiAgICBpdGVtczoge1xuICAgICAgbGFiZWw6IHN0cmluZztcbiAgICAgIGRlZmF1bHRPcGVuOiBib29sZWFuO1xuICAgICAgb3JkZXI/OiBudW1iZXI7XG4gICAgICB2aXNpYmxlJD86IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gICAgICB0cmFuc2xhdGlvbkRhdGE/OiB7fTtcbiAgICAgIG9wdGlvbnM/OiB7IG5vdGlmaWNhdGlvbkJhZGdlOiB7IGxhYmVsOiBudW1iZXI7IHN0eWxlPzogc3RyaW5nIH0gfTtcbiAgICB9W11cbiAgKSB7XG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcbiAgfVxuICBwdWJsaWMgZ2V0TWVudSgpIHtcbiAgICByZXR1cm4gbmV3IE1lbnUoe1xuICAgICAgZWxlbWVudHM6IHRoaXMuX2l0ZW1zLm1hcChpdGVtID0+IHtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5fZ2V0S2V5KGl0ZW0ubGFiZWwpO1xuICAgICAgICByZXR1cm4gbmV3IE1lbnVCYXNlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBsYWJlbDogaXRlbS5sYWJlbCxcbiAgICAgICAgICBjYWxsYmFjazogKCkgPT4gKHRoaXMuZmlsdGVyID0ga2V5KSxcbiAgICAgICAgICBkZWZhdWx0T3BlbjogaXRlbS5kZWZhdWx0T3BlbixcbiAgICAgICAgICBvcmRlcjogaXRlbS5vcmRlcixcbiAgICAgICAgICB2aXNpYmxlJDogaXRlbS52aXNpYmxlJCxcbiAgICAgICAgICB0cmFuc2xhdGlvbkRhdGE6IGl0ZW0udHJhbnNsYXRpb25EYXRhLFxuICAgICAgICAgIG9wdGlvbnM6IGl0ZW0ub3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICAgIGRpcmVjdGlvbjogJ3Jlc3BvbnNpdmUnLFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZU1lbnVEYXRhcyhcbiAgICBkYXRhOiB7XG4gICAgICBrZXk6IHN0cmluZztcbiAgICAgIHRyYW5zbGF0aW9uRGF0YT86IG9iamVjdDtcbiAgICAgIG9wdGlvbnM/OiB7IG5vdGlmaWNhdGlvbkJhZGdlOiB7IGxhYmVsOiBudW1iZXI7IHN0eWxlPzogc3RyaW5nIH0gfTtcbiAgICAgIHZpc2libGUkPzogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgICB9W11cbiAgKSB7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGRhdGEpIHtcbiAgICAgIGNvbnN0IGl0ZW1Ub01vZGlmeSA9IHRoaXMuX2l0ZW1zLmZpbmQoeCA9PiB0aGlzLl9nZXRLZXkoeC5sYWJlbCkgPT09IGl0ZW0ua2V5KTtcbiAgICAgIGlmIChpdGVtVG9Nb2RpZnkpIHtcbiAgICAgICAgaXRlbVRvTW9kaWZ5LnRyYW5zbGF0aW9uRGF0YSA9IGl0ZW0udHJhbnNsYXRpb25EYXRhO1xuICAgICAgICBpdGVtVG9Nb2RpZnkub3B0aW9ucyA9IGl0ZW0ub3B0aW9ucztcbiAgICAgICAgaWYgKGl0ZW0udmlzaWJsZSQpIHtcbiAgICAgICAgICBpdGVtVG9Nb2RpZnkudmlzaWJsZSQgPSBpdGVtLnZpc2libGUkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0S2V5KGxhYmVsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxhc3REb3QgPSBsYWJlbC5sYXN0SW5kZXhPZignLicpO1xuICAgIGlmIChsYXN0RG90ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGxhYmVsLnN1YnN0cmluZyhsYXN0RG90ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==