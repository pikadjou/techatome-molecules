export const isObject = (variable) => {
    return typeof variable === 'object' && variable !== null && !Array.isArray(variable);
};
export const isNotEmptyObject = (variable) => {
    return Object.keys(variable).length > 0;
};
/**
 * Performs a deep merge of objects and returns new object. Does not modify
 * objects (immutable) and merges arrays via concatenation.
 * @param init object - Initial Object
 * @param {...object} objects - Objects to merge
 * @returns {object} New object with merged key/values
 */
export const merge = (override = true) => (init, ...objects) => {
    // RecursivePartial<T>
    const isObject = (obj) => obj && typeof obj === 'object';
    return objects.reduce((prev, obj) => {
        Object.keys(obj).forEach(key => {
            const pVal = prev[key];
            const oVal = obj[key];
            if (Array.isArray(pVal) && Array.isArray(oVal)) {
                prev[key] = pVal.concat(...oVal);
            }
            else if (isObject(pVal) && isObject(oVal)) {
                prev[key] = merge(override)(pVal, oVal);
            }
            else {
                if (!pVal || (pVal && override)) {
                    prev[key] = oVal;
                }
            }
        });
        return prev;
    }, init);
};
export const getPropertyTypes = (obj) => {
    const propertyTypes = {};
    for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
            propertyTypes[key] = typeof obj[key];
        }
    }
    return propertyTypes;
};
export const ObjectKeys = (object) => (object instanceof Object ? Object.keys(object) : []);
export const ObjectKeysReOrder = (base, keysOrder) => {
    return keysOrder.reduce((final, key) => {
        if (base.hasOwnProperty(key)) {
            final[key] = base[key];
        }
        return final;
    }, {});
};
export const removeObjectKeys = (obj, keysToRemove) => {
    return Object.keys(obj).reduce((acc, key) => {
        if (!keysToRemove.includes(key)) {
            acc[key] = obj[key];
        }
        return acc;
    }, {});
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi91dGlscy9vYmplY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsUUFBaUIsRUFBVyxFQUFFO0lBQ3JELE9BQU8sT0FBTyxRQUFRLEtBQUssUUFBUSxJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZGLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsUUFBYSxFQUFXLEVBQUU7SUFDekQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBQ0Y7Ozs7OztHQU1HO0FBQ0gsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUNoQixDQUFDLFFBQVEsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUNwQixDQUFJLElBQU8sRUFBRSxHQUFHLE9BQW1CLEVBQUUsRUFBRTtJQUNyQyxzQkFBc0I7SUFDdEIsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUM7SUFFOUQsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQy9DLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQVEsQ0FBQztZQUM5QixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFRLENBQUM7WUFFN0IsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztnQkFDL0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUN4QyxDQUFDO2lCQUFNLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUM1QyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQVEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMvQyxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsRUFBRSxDQUFDO29CQUNoQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO2dCQUNuQixDQUFDO1lBQ0gsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDWCxDQUFDLENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFtQixHQUFNLEVBQThCLEVBQUU7SUFDdkYsTUFBTSxhQUFhLEdBQStCLEVBRWpELENBQUM7SUFFRixLQUFLLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzVCLGFBQWEsQ0FBQyxHQUFjLENBQUMsR0FBRyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsRCxDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU8sYUFBYSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFJLE1BQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLFlBQVksTUFBTSxDQUFDLENBQUMsQ0FBaUIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFbEgsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBSSxJQUFPLEVBQUUsU0FBeUIsRUFBSyxFQUFFO0lBQzVFLE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBSSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUN4QyxJQUFVLElBQUssQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNwQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsRUFBRSxFQUFTLENBQUMsQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFnQyxHQUFNLEVBQUUsWUFBeUIsRUFBYyxFQUFFO0lBQy9HLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQWEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDdEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNoQyxHQUFHLENBQUMsR0FBYyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLENBQUM7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNULENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc09iamVjdCA9ICh2YXJpYWJsZTogdW5rbm93bik6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09PSAnb2JqZWN0JyAmJiB2YXJpYWJsZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YXJpYWJsZSk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNOb3RFbXB0eU9iamVjdCA9ICh2YXJpYWJsZTogYW55KTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiBPYmplY3Qua2V5cyh2YXJpYWJsZSkubGVuZ3RoID4gMDtcbn07XG4vKipcbiAqIFBlcmZvcm1zIGEgZGVlcCBtZXJnZSBvZiBvYmplY3RzIGFuZCByZXR1cm5zIG5ldyBvYmplY3QuIERvZXMgbm90IG1vZGlmeVxuICogb2JqZWN0cyAoaW1tdXRhYmxlKSBhbmQgbWVyZ2VzIGFycmF5cyB2aWEgY29uY2F0ZW5hdGlvbi5cbiAqIEBwYXJhbSBpbml0IG9iamVjdCAtIEluaXRpYWwgT2JqZWN0XG4gKiBAcGFyYW0gey4uLm9iamVjdH0gb2JqZWN0cyAtIE9iamVjdHMgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtvYmplY3R9IE5ldyBvYmplY3Qgd2l0aCBtZXJnZWQga2V5L3ZhbHVlc1xuICovXG5leHBvcnQgY29uc3QgbWVyZ2UgPVxuICAob3ZlcnJpZGUgPSB0cnVlKSA9PlxuICA8VD4oaW5pdDogVCwgLi4ub2JqZWN0czogQXJyYXk8YW55PikgPT4ge1xuICAgIC8vIFJlY3Vyc2l2ZVBhcnRpYWw8VD5cbiAgICBjb25zdCBpc09iamVjdCA9IChvYmo6IGFueSkgPT4gb2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnO1xuXG4gICAgcmV0dXJuIG9iamVjdHMucmVkdWNlPFQ+KChwcmV2LCBvYmopID0+IHtcbiAgICAgICg8QXJyYXk8a2V5b2YgVD4+T2JqZWN0LmtleXMob2JqKSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBjb25zdCBwVmFsID0gcHJldltrZXldIGFzIGFueTtcbiAgICAgICAgY29uc3Qgb1ZhbCA9IG9ialtrZXldIGFzIGFueTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwVmFsKSAmJiBBcnJheS5pc0FycmF5KG9WYWwpKSB7XG4gICAgICAgICAgcHJldltrZXldID0gPGFueT5wVmFsLmNvbmNhdCguLi5vVmFsKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwVmFsKSAmJiBpc09iamVjdChvVmFsKSkge1xuICAgICAgICAgIHByZXZba2V5XSA9IDxhbnk+bWVyZ2Uob3ZlcnJpZGUpKHBWYWwsIG9WYWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghcFZhbCB8fCAocFZhbCAmJiBvdmVycmlkZSkpIHtcbiAgICAgICAgICAgIHByZXZba2V5XSA9IG9WYWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHByZXY7XG4gICAgfSwgaW5pdCk7XG4gIH07XG5cbmV4cG9ydCBjb25zdCBnZXRQcm9wZXJ0eVR5cGVzID0gPFQgZXh0ZW5kcyBvYmplY3Q+KG9iajogVCk6IHsgW0sgaW4ga2V5b2YgVF06IHN0cmluZyB9ID0+IHtcbiAgY29uc3QgcHJvcGVydHlUeXBlczogeyBbSyBpbiBrZXlvZiBUXTogc3RyaW5nIH0gPSB7fSBhcyB7XG4gICAgW0sgaW4ga2V5b2YgVF06IHN0cmluZztcbiAgfTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHByb3BlcnR5VHlwZXNba2V5IGFzIGtleW9mIFRdID0gdHlwZW9mIG9ialtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcm9wZXJ0eVR5cGVzO1xufTtcblxuZXhwb3J0IGNvbnN0IE9iamVjdEtleXMgPSA8VD4ob2JqZWN0OiBUKSA9PiAob2JqZWN0IGluc3RhbmNlb2YgT2JqZWN0ID8gPEFycmF5PGtleW9mIFQ+Pk9iamVjdC5rZXlzKG9iamVjdCkgOiBbXSk7XG5cbmV4cG9ydCBjb25zdCBPYmplY3RLZXlzUmVPcmRlciA9IDxUPihiYXNlOiBULCBrZXlzT3JkZXI6IEFycmF5PGtleW9mIFQ+KTogVCA9PiB7XG4gIHJldHVybiBrZXlzT3JkZXIucmVkdWNlPFQ+KChmaW5hbCwga2V5KSA9PiB7XG4gICAgaWYgKCg8YW55PmJhc2UpLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGZpbmFsW2tleV0gPSBiYXNlW2tleV07XG4gICAgfVxuICAgIHJldHVybiBmaW5hbDtcbiAgfSwge30gYXMgYW55KTtcbn07XG5cbmV4cG9ydCBjb25zdCByZW1vdmVPYmplY3RLZXlzID0gPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+PihvYmo6IFQsIGtleXNUb1JlbW92ZTogKGtleW9mIFQpW10pOiBQYXJ0aWFsPFQ+ID0+IHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlPFBhcnRpYWw8VD4+KChhY2MsIGtleSkgPT4ge1xuICAgIGlmICgha2V5c1RvUmVtb3ZlLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIGFjY1trZXkgYXMga2V5b2YgVF0gPSBvYmpba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufTtcbiJdfQ==