import { EFileExtension } from '../types/files/file-extension';
export const getFileExtension = (filePath) => {
    const extension = getFullFileNameFromUrl(filePath)?.split('.').pop()?.toLowerCase() || null;
    switch (extension) {
        case 'pdf':
            return EFileExtension.PDF;
        case 'docx':
            return EFileExtension.Word;
        case 'xls':
        case 'xlsx':
            return EFileExtension.Excel;
        case 'jpg':
        case 'jpeg':
        case 'png':
            return EFileExtension.Image;
    }
    return EFileExtension.Unknown;
};
export const getFullFileNameFromUrl = (url) => {
    return url.split('/').pop() || null;
};
export const trigram = (name) => {
    if (!name) {
        return '';
    }
    if (name.length < 4) {
        return name;
    }
    return (name[0] + name[2] + name[3]).toUpperCase();
};
export const capitalizeFirstLetter = (value) => {
    if (value.length === 0)
        return value;
    return value.charAt(0).toUpperCase() + value.slice(1);
};
export const convertToNumber = (values) => values?.map((value) => Number(value)) || [];
export const isURL = (str) => {
    // Expression régulière pour vérifier une URL
    const pattern = /^https?:\/\//; // Fragment d'URL
    return !!pattern.test(str);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi91dGlscy9zdHJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRS9ELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsUUFBZ0IsRUFBa0IsRUFBRTtJQUNuRSxNQUFNLFNBQVMsR0FDYixzQkFBc0IsQ0FBQyxRQUFRLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksSUFBSSxDQUFDO0lBRTVFLFFBQVEsU0FBUyxFQUFFLENBQUM7UUFDbEIsS0FBSyxLQUFLO1lBQ1IsT0FBTyxjQUFjLENBQUMsR0FBRyxDQUFDO1FBQzVCLEtBQUssTUFBTTtZQUNULE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQztRQUM3QixLQUFLLEtBQUssQ0FBQztRQUNYLEtBQUssTUFBTTtZQUNULE9BQU8sY0FBYyxDQUFDLEtBQUssQ0FBQztRQUM5QixLQUFLLEtBQUssQ0FBQztRQUNYLEtBQUssTUFBTSxDQUFDO1FBQ1osS0FBSyxLQUFLO1lBQ1IsT0FBTyxjQUFjLENBQUMsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxPQUFPLGNBQWMsQ0FBQyxPQUFPLENBQUM7QUFDaEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxHQUFXLEVBQWlCLEVBQUU7SUFDbkUsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUErQixFQUFFLEVBQUU7SUFDekQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1YsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3BCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3JELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQUMsS0FBYSxFQUFVLEVBQUU7SUFDN0QsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUNyQyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4RCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxNQUFpQixFQUFZLEVBQUUsQ0FDN0QsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBRTlDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQVcsRUFBRSxFQUFFO0lBQ25DLDZDQUE2QztJQUM3QyxNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsQ0FBQyxpQkFBaUI7SUFFakQsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM3QixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFRmlsZUV4dGVuc2lvbiB9IGZyb20gJy4uL3R5cGVzL2ZpbGVzL2ZpbGUtZXh0ZW5zaW9uJztcblxuZXhwb3J0IGNvbnN0IGdldEZpbGVFeHRlbnNpb24gPSAoZmlsZVBhdGg6IHN0cmluZyk6IEVGaWxlRXh0ZW5zaW9uID0+IHtcbiAgY29uc3QgZXh0ZW5zaW9uOiBzdHJpbmcgfCBudWxsID1cbiAgICBnZXRGdWxsRmlsZU5hbWVGcm9tVXJsKGZpbGVQYXRoKT8uc3BsaXQoJy4nKS5wb3AoKT8udG9Mb3dlckNhc2UoKSB8fCBudWxsO1xuXG4gIHN3aXRjaCAoZXh0ZW5zaW9uKSB7XG4gICAgY2FzZSAncGRmJzpcbiAgICAgIHJldHVybiBFRmlsZUV4dGVuc2lvbi5QREY7XG4gICAgY2FzZSAnZG9jeCc6XG4gICAgICByZXR1cm4gRUZpbGVFeHRlbnNpb24uV29yZDtcbiAgICBjYXNlICd4bHMnOlxuICAgIGNhc2UgJ3hsc3gnOlxuICAgICAgcmV0dXJuIEVGaWxlRXh0ZW5zaW9uLkV4Y2VsO1xuICAgIGNhc2UgJ2pwZyc6XG4gICAgY2FzZSAnanBlZyc6XG4gICAgY2FzZSAncG5nJzpcbiAgICAgIHJldHVybiBFRmlsZUV4dGVuc2lvbi5JbWFnZTtcbiAgfVxuXG4gIHJldHVybiBFRmlsZUV4dGVuc2lvbi5Vbmtub3duO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEZ1bGxGaWxlTmFtZUZyb21VcmwgPSAodXJsOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgcmV0dXJuIHVybC5zcGxpdCgnLycpLnBvcCgpIHx8IG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgdHJpZ3JhbSA9IChuYW1lOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkKSA9PiB7XG4gIGlmICghbmFtZSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBpZiAobmFtZS5sZW5ndGggPCA0KSB7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH1cblxuICByZXR1cm4gKG5hbWVbMF0gKyBuYW1lWzJdICsgbmFtZVszXSkudG9VcHBlckNhc2UoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjYXBpdGFsaXplRmlyc3RMZXR0ZXIgPSAodmFsdWU6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHJldHVybiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdmFsdWUuc2xpY2UoMSk7XG59O1xuXG5leHBvcnQgY29uc3QgY29udmVydFRvTnVtYmVyID0gKHZhbHVlcz86IHN0cmluZ1tdKTogbnVtYmVyW10gPT5cbiAgdmFsdWVzPy5tYXAoKHZhbHVlKSA9PiBOdW1iZXIodmFsdWUpKSB8fCBbXTtcblxuZXhwb3J0IGNvbnN0IGlzVVJMID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIC8vIEV4cHJlc3Npb24gcsOpZ3VsacOocmUgcG91ciB2w6lyaWZpZXIgdW5lIFVSTFxuICBjb25zdCBwYXR0ZXJuID0gL15odHRwcz86XFwvXFwvLzsgLy8gRnJhZ21lbnQgZCdVUkxcblxuICByZXR1cm4gISFwYXR0ZXJuLnRlc3Qoc3RyKTtcbn07XG4iXX0=