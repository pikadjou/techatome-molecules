import { differenceInMinutes, isValid, parseISO } from 'date-fns';
export const toLocalDateString = (utcDateString) => {
    return toLocalDate(utcDateString).toString();
};
export const toLocalDate = (utcDateString) => {
    const utcDate = new Date(utcDateString);
    return new Date(utcDate.getTime() - utcDate.getTimezoneOffset() * 60 * 1000);
};
export const toUtcDate = (localDateString) => {
    return new Date(localDateString.getTime() - localDateString.getTimezoneOffset() * 60 * 1000);
};
export const diffInHourAndMinutes = (start, end) => {
    const diff = differenceInMinutes(new Date(end), new Date(start));
    const hours = Math.floor(diff / 60);
    const minutes = Math.round(diff - hours * 60);
    return {
        h: hours.toString().padStart(2, '0'),
        m: minutes.toString().padStart(2, '0'),
    };
};
export const isStrictISODateString = (value) => {
    // VÃ©rifie le format complet ISO 8601 (YYYY-MM-DD ou YYYY-MM-DDTHH:mm:ss.sssZ)
    const isoRegex = /^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d{3})?(Z|([+-]\d{2}:\d{2})))?$/;
    if (!isoRegex.test(value))
        return false;
    const date = parseISO(value);
    return isValid(date) && value === date.toISOString().slice(0, value.length);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvdXRpbHMvZGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsRSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLGFBQXFCLEVBQVUsRUFBRTtJQUNqRSxPQUFPLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUMvQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxhQUFxQixFQUFRLEVBQUU7SUFDekQsTUFBTSxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDeEMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQy9FLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLGVBQXFCLEVBQVEsRUFBRTtJQUN2RCxPQUFPLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxlQUFlLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDL0YsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxLQUFhLEVBQUUsR0FBVyxFQUE0QixFQUFFO0lBQzNGLE1BQU0sSUFBSSxHQUFHLG1CQUFtQixDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFakUsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDcEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRTlDLE9BQU87UUFDTCxDQUFDLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO1FBQ3BDLENBQUMsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7S0FDdkMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUU7SUFDckQsOEVBQThFO0lBQzlFLE1BQU0sUUFBUSxHQUFHLHlFQUF5RSxDQUFDO0lBRTNGLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBRXhDLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRpZmZlcmVuY2VJbk1pbnV0ZXMsIGlzVmFsaWQsIHBhcnNlSVNPIH0gZnJvbSAnZGF0ZS1mbnMnO1xuXG5leHBvcnQgY29uc3QgdG9Mb2NhbERhdGVTdHJpbmcgPSAodXRjRGF0ZVN0cmluZzogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHRvTG9jYWxEYXRlKHV0Y0RhdGVTdHJpbmcpLnRvU3RyaW5nKCk7XG59O1xuXG5leHBvcnQgY29uc3QgdG9Mb2NhbERhdGUgPSAodXRjRGF0ZVN0cmluZzogc3RyaW5nKTogRGF0ZSA9PiB7XG4gIGNvbnN0IHV0Y0RhdGUgPSBuZXcgRGF0ZSh1dGNEYXRlU3RyaW5nKTtcbiAgcmV0dXJuIG5ldyBEYXRlKHV0Y0RhdGUuZ2V0VGltZSgpIC0gdXRjRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpICogNjAgKiAxMDAwKTtcbn07XG5cbmV4cG9ydCBjb25zdCB0b1V0Y0RhdGUgPSAobG9jYWxEYXRlU3RyaW5nOiBEYXRlKTogRGF0ZSA9PiB7XG4gIHJldHVybiBuZXcgRGF0ZShsb2NhbERhdGVTdHJpbmcuZ2V0VGltZSgpIC0gbG9jYWxEYXRlU3RyaW5nLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MCAqIDEwMDApO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpZmZJbkhvdXJBbmRNaW51dGVzID0gKHN0YXJ0OiBzdHJpbmcsIGVuZDogc3RyaW5nKTogeyBoOiBzdHJpbmc7IG06IHN0cmluZyB9ID0+IHtcbiAgY29uc3QgZGlmZiA9IGRpZmZlcmVuY2VJbk1pbnV0ZXMobmV3IERhdGUoZW5kKSwgbmV3IERhdGUoc3RhcnQpKTtcblxuICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IoZGlmZiAvIDYwKTtcbiAgY29uc3QgbWludXRlcyA9IE1hdGgucm91bmQoZGlmZiAtIGhvdXJzICogNjApO1xuXG4gIHJldHVybiB7XG4gICAgaDogaG91cnMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpLFxuICAgIG06IG1pbnV0ZXMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU3RyaWN0SVNPRGF0ZVN0cmluZyA9ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIC8vIFbDqXJpZmllIGxlIGZvcm1hdCBjb21wbGV0IElTTyA4NjAxIChZWVlZLU1NLUREIG91IFlZWVktTU0tRERUSEg6bW06c3Muc3NzWilcbiAgY29uc3QgaXNvUmVnZXggPSAvXlxcZHs0fS1cXGR7Mn0tXFxkezJ9KFRcXGR7Mn06XFxkezJ9OlxcZHsyfShcXC5cXGR7M30pPyhafChbKy1dXFxkezJ9OlxcZHsyfSkpKT8kLztcblxuICBpZiAoIWlzb1JlZ2V4LnRlc3QodmFsdWUpKSByZXR1cm4gZmFsc2U7XG5cbiAgY29uc3QgZGF0ZSA9IHBhcnNlSVNPKHZhbHVlKTtcbiAgcmV0dXJuIGlzVmFsaWQoZGF0ZSkgJiYgdmFsdWUgPT09IGRhdGUudG9JU09TdHJpbmcoKS5zbGljZSgwLCB2YWx1ZS5sZW5ndGgpO1xufTtcbiJdfQ==