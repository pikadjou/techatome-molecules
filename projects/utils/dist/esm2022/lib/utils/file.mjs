import { Camera } from '@capacitor/camera';
import Compressor from 'compressorjs';
import { newGuid } from './identifier';
export const octetsToMo = (octets) => {
    return octets / (1024 * 1024);
};
export const extractExtension = (name) => {
    // Séparer le nom du fichier en parties en fonction du point (.)
    var parties = name.split('.');
    // Récupérer la dernière partie (qui est l'extension)
    var extension = parties[parties.length - 1];
    return extension;
};
export const getBase64FromFile = (file) => {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
            if (reader.result) {
                resolve(reader.result.toString());
            }
            reject(null);
        };
        reader.readAsDataURL(file);
    });
};
export const getBlobImage = async (base64) => {
    const blob = await fetch(base64).then(res => res.blob());
    return await compressImage(blob);
};
export const compressImage = async (blob) => {
    return new Promise((resolve, reject) => {
        new Compressor(blob, {
            quality: 0.4,
            convertSize: 1000000, // 1MB
            success: (blob) => {
                resolve(blob);
            },
            error: (error) => {
                reject(error);
            },
        });
    });
};
export const downloadFile = (url) => {
    const imageRegex = /\.(jpg|jpeg|png|gif|bmp|webp|svg)$/i;
    if (imageRegex.test(url)) {
        window.open(url, '_blank');
    }
    else {
        window.open('https://docs.google.com/a/google.com/viewer?url=' + url.replaceAll('&', '%26') + '&embedded=false', '_blank');
    }
};
export const pickImages = async () => {
    const gallery = await Camera.pickImages({
        quality: 60,
    });
    const pics = [];
    for (let pic of gallery.photos) {
        const file = {
            file: await pathToFile(pic),
            localUrl: pic.webPath,
        };
        if (!file.file) {
            continue;
        }
        pics.push(file);
    }
    return pics;
};
export const pathToFile = async (pic) => {
    if (!pic.webPath)
        return null;
    const response = await fetch(pic.webPath);
    const blob = await compressImage(await response.blob());
    return new File([blob], newGuid(), { type: blob.type });
};
/**
 * Calculates the proper height of an image with a custom width, preserving the original aspect ratio.
 *
 * @param originalHeight
 * @param originalWidth
 * @param newWidth
 */
export const determineNewHeight = (originalHeight, originalWidth, newWidth) => {
    return (originalHeight / originalWidth) * newWidth;
};
/**
 * Calculates the proper width of an image with a custom height, preserving the original aspect ratio.
 *
 * @param originalWidth
 * @param originalHeight
 * @param newWidth
 */
export const determineNewWidth = (originalWidth, originalHeight, newHeight) => {
    return (originalWidth / originalHeight) * newHeight;
};
/**
 * Calculates the proper height of an image with a custom width, preserving the original aspect ratio.
 *
 * @param originalHeight
 * @param originalWidth
 * @param newWidth
 */
export const determineNewSize = (originalHeight, originalWidth, newWidth, newHeight) => {
    if (newHeight < originalHeight || newWidth < originalWidth) {
        var ratio = Math.min(newWidth / originalWidth, newHeight / originalHeight);
        return { width: originalWidth * ratio, height: originalHeight * ratio };
    }
    return { width: originalWidth, height: originalHeight };
};
//# sourceMappingURL=data:application/json;base64,