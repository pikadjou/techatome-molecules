export const isArray = (variable) => {
    return Array.isArray(variable);
};
export const getUniqueValues = (inputArray, propName) => {
    return [...new Map(inputArray.map((x) => [propName(x), x])).values()];
};
export const getUniqueArray = (array) => {
    return [...new Set(array)].filter(isNonNullable);
};
export const isNonNullable = (value) => {
    return value !== null && value !== undefined;
};
export const filterNonNullableItems = (list) => {
    return list.filter((value) => value !== null && value !== undefined);
};
export const toArray = (value) => {
    return Array.isArray(value) ? value : [value];
};
export const keepUniqueObjectByProperty = (list, property) => {
    const unique = getUniqueArray(list.map(property));
    return unique
        .map((u) => list.find((item) => property(item) === u))
        .filter(isNonNullable);
};
/**
 * @deprecated
 */
export const removeElementsWithSameProperty = (arrayA, arrayB, property) => {
    const idsToDelete = arrayB.map(property);
    return arrayA.filter((item) => !idsToDelete.includes(property(item)));
};
/**
 * @deprecated
 */
export const removeElement = (array, elementToRemove) => {
    let indexOfElement = array.indexOf(elementToRemove);
    if (indexOfElement > -1)
        array.splice(indexOfElement, 1);
    return array;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3V0aWxzL2FycmF5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFDLFFBQWlCLEVBQVcsRUFBRTtJQUNwRCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQzdCLFVBQWUsRUFDZixRQUF1QixFQUNsQixFQUFFO0lBQ1AsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDeEUsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUksS0FBVSxFQUFPLEVBQUU7SUFDbkQsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDbkQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUksS0FBUSxFQUEyQixFQUFFO0lBQ3BFLE9BQU8sS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssU0FBUyxDQUFDO0FBQy9DLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQUksSUFBUyxFQUF5QixFQUFFO0lBQzVFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FDaEIsQ0FBQyxLQUFLLEVBQTJCLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTLENBQzFFLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBSSxLQUFjLEVBQUUsRUFBRTtJQUMzQyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxDQUN4QyxJQUFTLEVBQ1QsUUFBMEIsRUFDckIsRUFBRTtJQUNQLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbEQsT0FBTyxNQUFNO1NBQ1YsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDckQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzNCLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsQ0FDNUMsTUFBVyxFQUNYLE1BQVcsRUFDWCxRQUE0QixFQUN2QixFQUFFO0lBQ1AsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hFLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUksS0FBVSxFQUFFLGVBQWtCLEVBQU8sRUFBRTtJQUN0RSxJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRXBELElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQztRQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXpELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGlzQXJyYXkgPSAodmFyaWFibGU6IHVua25vd24pOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFyaWFibGUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFVuaXF1ZVZhbHVlcyA9IDxUPihcbiAgaW5wdXRBcnJheTogVFtdLFxuICBwcm9wTmFtZTogKHg6IFQpID0+IGFueVxuKTogVFtdID0+IHtcbiAgcmV0dXJuIFsuLi5uZXcgTWFwKGlucHV0QXJyYXkubWFwKCh4KSA9PiBbcHJvcE5hbWUoeCksIHhdKSkudmFsdWVzKCldO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFVuaXF1ZUFycmF5ID0gPFQ+KGFycmF5OiBUW10pOiBUW10gPT4ge1xuICByZXR1cm4gWy4uLm5ldyBTZXQoYXJyYXkpXS5maWx0ZXIoaXNOb25OdWxsYWJsZSk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNOb25OdWxsYWJsZSA9IDxUPih2YWx1ZTogVCk6IHZhbHVlIGlzIE5vbk51bGxhYmxlPFQ+ID0+IHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgZmlsdGVyTm9uTnVsbGFibGVJdGVtcyA9IDxUPihsaXN0OiBUW10pOiBBcnJheTxOb25OdWxsYWJsZTxUPj4gPT4ge1xuICByZXR1cm4gbGlzdC5maWx0ZXIoXG4gICAgKHZhbHVlKTogdmFsdWUgaXMgTm9uTnVsbGFibGU8VD4gPT4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZFxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IHRvQXJyYXkgPSA8VD4odmFsdWU6IFQgfCBUW10pID0+IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xufTtcblxuZXhwb3J0IGNvbnN0IGtlZXBVbmlxdWVPYmplY3RCeVByb3BlcnR5ID0gPFQ+KFxuICBsaXN0OiBUW10sXG4gIHByb3BlcnR5OiAoaXRlbTogVCkgPT4gYW55XG4pOiBUW10gPT4ge1xuICBjb25zdCB1bmlxdWUgPSBnZXRVbmlxdWVBcnJheShsaXN0Lm1hcChwcm9wZXJ0eSkpO1xuICByZXR1cm4gdW5pcXVlXG4gICAgLm1hcCgodSkgPT4gbGlzdC5maW5kKChpdGVtKSA9PiBwcm9wZXJ0eShpdGVtKSA9PT0gdSkpXG4gICAgLmZpbHRlcihpc05vbk51bGxhYmxlKTtcbn07XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGNvbnN0IHJlbW92ZUVsZW1lbnRzV2l0aFNhbWVQcm9wZXJ0eSA9IDxUPihcbiAgYXJyYXlBOiBUW10sXG4gIGFycmF5QjogVFtdLFxuICBwcm9wZXJ0eTogKGl0ZW06IGFueSkgPT4gYW55XG4pOiBUW10gPT4ge1xuICBjb25zdCBpZHNUb0RlbGV0ZSA9IGFycmF5Qi5tYXAocHJvcGVydHkpO1xuICByZXR1cm4gYXJyYXlBLmZpbHRlcigoaXRlbSkgPT4gIWlkc1RvRGVsZXRlLmluY2x1ZGVzKHByb3BlcnR5KGl0ZW0pKSk7XG59O1xuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmV4cG9ydCBjb25zdCByZW1vdmVFbGVtZW50ID0gPFQ+KGFycmF5OiBUW10sIGVsZW1lbnRUb1JlbW92ZTogVCk6IFRbXSA9PiB7XG4gIGxldCBpbmRleE9mRWxlbWVudCA9IGFycmF5LmluZGV4T2YoZWxlbWVudFRvUmVtb3ZlKTtcblxuICBpZiAoaW5kZXhPZkVsZW1lbnQgPiAtMSkgYXJyYXkuc3BsaWNlKGluZGV4T2ZFbGVtZW50LCAxKTtcblxuICByZXR1cm4gYXJyYXk7XG59O1xuIl19