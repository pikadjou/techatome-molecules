import { AfterViewInit, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { InputSlider } from '@ta/form-model';
import { TaBaseComponent } from '@ta/utils';
import { Observable } from 'rxjs';
import ImageEditor from 'tui-image-editor';
import * as i0 from "@angular/core";
type Selection = 'line' | 'shape' | 'text' | '';
type ShapeSelection = 'rect' | 'triangle' | 'circle' | 'line' | '';
export declare class FileEditComponent extends TaBaseComponent implements OnInit, AfterViewInit, OnDestroy {
    imagePath: string;
    saveImage$: Observable<null>;
    savedImage: EventEmitter<Blob>;
    tuiImageEditor: ImageEditor;
    selection: Selection;
    shapeSelection: ShapeSelection;
    colorHexa: string;
    colorList: string[];
    objectActivated: null;
    brushSize: number;
    slider: InputSlider;
    readonly isLight: (color: string) => boolean;
    private _containerRef;
    private _tuiRef;
    private _canvasSize;
    private _intoDrawing;
    constructor();
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    getHeight(): string;
    getWidth(): string;
    keyPress(event: KeyboardEvent): void;
    showPanel(): boolean;
    changeSelection(newSelection: Selection): void;
    changeShapeSelection(newSelection: ShapeSelection): void;
    undo(): void;
    redo(): void;
    shape(type: 'rect' | 'circle' | 'triangle'): void;
    drawing(type: 'LINE_DRAWING' | 'FREE_DRAWING'): void;
    text(): void;
    changeColor(color: string): void;
    changeBrushSize(size: number): void;
    clear(): void;
    validation(): void;
    onSaveClick: () => Promise<void>;
    private _createImageEditor;
    private _stopDrawing;
    private _reflow;
    private _getSettings;
    static ɵfac: i0.ɵɵFactoryDeclaration<FileEditComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FileEditComponent, "ta-files-edit", never, { "imagePath": { "alias": "imagePath"; "required": false; }; "saveImage$": { "alias": "saveImage$"; "required": false; }; }, { "savedImage": "savedImage"; }, never, never, true, never>;
}
export {};
