import { NgFor } from '@angular/common';
import { Component } from '@angular/core';
import { tap } from 'rxjs/operators';
import { ToastComponent } from '@ta/ui';
import { TaBaseComponent } from '@ta/utils';
import { NotificationInlineComponent } from '../inline/notification-inline.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/notification.service";
export class NotificationBoxComponent extends TaBaseComponent {
    constructor(_notificationService) {
        super();
        this._notificationService = _notificationService;
        this.list = [];
        this._registerSubscription(this._notificationService.newNotification$
            .pipe(tap(notification => {
            this.list.push(notification);
        }), tap(notification => {
            setTimeout(() => {
                this.list = this.list.filter(item => item !== notification);
            }, 3000);
        }))
            .subscribe());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: NotificationBoxComponent, deps: [{ token: i1.TaNotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.14", type: NotificationBoxComponent, isStandalone: true, selector: "ta-notification-box", usesInheritance: true, ngImport: i0, template: "<div class=\"notification-box_container flex-column g-space-sm\">\n  @for (item of this.list; track item) {\n    <div>\n      <ta-toast [code]=\"item.code\">\n        <ta-notification-inline [message]=\"item.message\" [code]=\"item.code\" [showClose]=\"false\"></ta-notification-inline>\n      </ta-toast>\n    </div>\n  }\n</div>\n", styles: [".notification-box_container{position:fixed;bottom:calc(24px + env(safe-area-inset-bottom));width:90%;right:5%;z-index:5000}@media (min-width: 768px){.notification-box_container{width:auto;min-width:200px;max-width:500px}}\n"], dependencies: [{ kind: "component", type: NotificationInlineComponent, selector: "ta-notification-inline", inputs: ["message", "code", "showClose"], outputs: ["askClose"] }, { kind: "component", type: ToastComponent, selector: "ta-toast", inputs: ["code"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: NotificationBoxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-notification-box', standalone: true, imports: [NgFor, NotificationInlineComponent, ToastComponent], template: "<div class=\"notification-box_container flex-column g-space-sm\">\n  @for (item of this.list; track item) {\n    <div>\n      <ta-toast [code]=\"item.code\">\n        <ta-notification-inline [message]=\"item.message\" [code]=\"item.code\" [showClose]=\"false\"></ta-notification-inline>\n      </ta-toast>\n    </div>\n  }\n</div>\n", styles: [".notification-box_container{position:fixed;bottom:calc(24px + env(safe-area-inset-bottom));width:90%;right:5%;z-index:5000}@media (min-width: 768px){.notification-box_container{width:auto;min-width:200px;max-width:500px}}\n"] }]
        }], ctorParameters: () => [{ type: i1.TaNotificationService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLWJveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvcG9wdXAvYm94L25vdGlmaWNhdGlvbi1ib3guY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb21wb25lbnRzL3BvcHVwL2JveC9ub3RpZmljYXRpb24tYm94LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFJNUMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0seUNBQXlDLENBQUM7OztBQVN0RixNQUFNLE9BQU8sd0JBQXlCLFNBQVEsZUFBZTtJQUczRCxZQUFvQixvQkFBMkM7UUFDN0QsS0FBSyxFQUFFLENBQUM7UUFEVSx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXVCO1FBRnhELFNBQUksR0FBbUQsRUFBRSxDQUFDO1FBSy9ELElBQUksQ0FBQyxxQkFBcUIsQ0FDeEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQjthQUN2QyxJQUFJLENBQ0gsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNqQixVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLENBQUM7WUFDOUQsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQ0g7YUFDQSxTQUFTLEVBQUUsQ0FDZixDQUFDO0lBQ0osQ0FBQzsrR0FwQlUsd0JBQXdCO21HQUF4Qix3QkFBd0Isc0dDbkJyQyw4VUFTQSx5UkRRbUIsMkJBQTJCLG9JQUFFLGNBQWM7OzRGQUVqRCx3QkFBd0I7a0JBUHBDLFNBQVM7K0JBQ0UscUJBQXFCLGNBR25CLElBQUksV0FDUCxDQUFDLEtBQUssRUFBRSwyQkFBMkIsRUFBRSxjQUFjLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ0ZvciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBUb2FzdENvbXBvbmVudCB9IGZyb20gJ0B0YS91aSc7XG5pbXBvcnQgeyBUYUJhc2VDb21wb25lbnQgfSBmcm9tICdAdGEvdXRpbHMnO1xuXG5pbXBvcnQgeyBFTm90aWZpY2F0aW9uQ29kZSB9IGZyb20gJy4uLy4uLy4uL2VudW0nO1xuaW1wb3J0IHsgVGFOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uSW5saW5lQ29tcG9uZW50IH0gZnJvbSAnLi4vaW5saW5lL25vdGlmaWNhdGlvbi1pbmxpbmUuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGEtbm90aWZpY2F0aW9uLWJveCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9ub3RpZmljYXRpb24tYm94LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbm90aWZpY2F0aW9uLWJveC5jb21wb25lbnQuc2NzcyddLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbTmdGb3IsIE5vdGlmaWNhdGlvbklubGluZUNvbXBvbmVudCwgVG9hc3RDb21wb25lbnRdLFxufSlcbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25Cb3hDb21wb25lbnQgZXh0ZW5kcyBUYUJhc2VDb21wb25lbnQge1xuICBwdWJsaWMgbGlzdDogeyBtZXNzYWdlOiBzdHJpbmc7IGNvZGU6IEVOb3RpZmljYXRpb25Db2RlIH1bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX25vdGlmaWNhdGlvblNlcnZpY2U6IFRhTm90aWZpY2F0aW9uU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9yZWdpc3RlclN1YnNjcmlwdGlvbihcbiAgICAgIHRoaXMuX25vdGlmaWNhdGlvblNlcnZpY2UubmV3Tm90aWZpY2F0aW9uJFxuICAgICAgICAucGlwZShcbiAgICAgICAgICB0YXAobm90aWZpY2F0aW9uID0+IHtcbiAgICAgICAgICAgIHRoaXMubGlzdC5wdXNoKG5vdGlmaWNhdGlvbik7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgdGFwKG5vdGlmaWNhdGlvbiA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5saXN0ID0gdGhpcy5saXN0LmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IG5vdGlmaWNhdGlvbik7XG4gICAgICAgICAgICB9LCAzMDAwKTtcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUoKVxuICAgICk7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJub3RpZmljYXRpb24tYm94X2NvbnRhaW5lciBmbGV4LWNvbHVtbiBnLXNwYWNlLXNtXCI+XG4gIEBmb3IgKGl0ZW0gb2YgdGhpcy5saXN0OyB0cmFjayBpdGVtKSB7XG4gICAgPGRpdj5cbiAgICAgIDx0YS10b2FzdCBbY29kZV09XCJpdGVtLmNvZGVcIj5cbiAgICAgICAgPHRhLW5vdGlmaWNhdGlvbi1pbmxpbmUgW21lc3NhZ2VdPVwiaXRlbS5tZXNzYWdlXCIgW2NvZGVdPVwiaXRlbS5jb2RlXCIgW3Nob3dDbG9zZV09XCJmYWxzZVwiPjwvdGEtbm90aWZpY2F0aW9uLWlubGluZT5cbiAgICAgIDwvdGEtdG9hc3Q+XG4gICAgPC9kaXY+XG4gIH1cbjwvZGl2PlxuIl19