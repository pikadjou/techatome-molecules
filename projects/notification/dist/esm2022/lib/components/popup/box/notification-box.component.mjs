import { NotificationInlineComponent } from '../inline/notification-inline.component';
import { NgFor } from '@angular/common';
import { Component } from '@angular/core';
import { ToastComponent } from '@ta/ui';
import { TaBaseComponent } from '@ta/utils';
import { tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/notification.service";
export class NotificationBoxComponent extends TaBaseComponent {
    constructor(_notificationService) {
        super();
        this._notificationService = _notificationService;
        this.list = [];
        this._registerSubscription(this._notificationService.newNotification$
            .pipe(tap(notification => {
            this.list.push(notification);
        }), tap(notification => {
            setTimeout(() => {
                this.list = this.list.filter(item => item !== notification);
            }, 3000);
        }))
            .subscribe());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NotificationBoxComponent, deps: [{ token: i1.CamNotificationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: NotificationBoxComponent, isStandalone: true, selector: "ta-notification-box", usesInheritance: true, ngImport: i0, template: "<div class=\"notification-box_container flex-column g-space-sm\">\n  @for (item of this.list; track item) {\n    <div>\n      <ta-toast [code]=\"item.code\">\n        <ta-notification-inline [message]=\"item.message\" [code]=\"item.code\" [showClose]=\"false\"></ta-notification-inline>\n      </ta-toast>\n    </div>\n  }\n</div>\n", styles: [".notification-box_container{position:fixed;bottom:calc(24px + env(safe-area-inset-bottom));width:90%;right:5%;z-index:5000}@media (min-width: 768px){.notification-box_container{width:auto;min-width:200px;max-width:500px}}\n"], dependencies: [{ kind: "component", type: NotificationInlineComponent, selector: "ta-notification-inline", inputs: ["message", "code", "showClose"], outputs: ["askClose"] }, { kind: "component", type: ToastComponent, selector: "ta-toast", inputs: ["code"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: NotificationBoxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-notification-box', standalone: true, imports: [
                        NgFor,
                        NotificationInlineComponent,
                        ToastComponent
                    ], template: "<div class=\"notification-box_container flex-column g-space-sm\">\n  @for (item of this.list; track item) {\n    <div>\n      <ta-toast [code]=\"item.code\">\n        <ta-notification-inline [message]=\"item.message\" [code]=\"item.code\" [showClose]=\"false\"></ta-notification-inline>\n      </ta-toast>\n    </div>\n  }\n</div>\n", styles: [".notification-box_container{position:fixed;bottom:calc(24px + env(safe-area-inset-bottom));width:90%;right:5%;z-index:5000}@media (min-width: 768px){.notification-box_container{width:auto;min-width:200px;max-width:500px}}\n"] }]
        }], ctorParameters: () => [{ type: i1.CamNotificationService }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLWJveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL2NvbXBvbmVudHMvcG9wdXAvYm94L25vdGlmaWNhdGlvbi1ib3guY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb21wb25lbnRzL3BvcHVwL2JveC9ub3RpZmljYXRpb24tYm94LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDeEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUM1QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQWFyQyxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsZUFBZTtJQUczRCxZQUFvQixvQkFBNEM7UUFDOUQsS0FBSyxFQUFFLENBQUM7UUFEVSx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXdCO1FBRnpELFNBQUksR0FBbUQsRUFBRSxDQUFDO1FBSy9ELElBQUksQ0FBQyxxQkFBcUIsQ0FDeEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQjthQUN2QyxJQUFJLENBQ0gsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUNqQixVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLENBQUM7WUFDOUQsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQ0g7YUFDQSxTQUFTLEVBQUUsQ0FDZixDQUFDO0lBQ0osQ0FBQzsrR0FwQlUsd0JBQXdCO21HQUF4Qix3QkFBd0Isc0dDcEJyQyw4VUFTQSx5UkRPSSwyQkFBMkIsb0lBQzNCLGNBQWM7OzRGQUdMLHdCQUF3QjtrQkFYcEMsU0FBUzsrQkFDRSxxQkFBcUIsY0FHbkIsSUFBSSxXQUNQO3dCQUNQLEtBQUs7d0JBQ0wsMkJBQTJCO3dCQUMzQixjQUFjO3FCQUNmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRU5vdGlmaWNhdGlvbkNvZGUgfSBmcm9tICcuLi8uLi8uLi9lbnVtJztcbmltcG9ydCB7IENhbU5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9ub3RpZmljYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25JbmxpbmVDb21wb25lbnQgfSBmcm9tICcuLi9pbmxpbmUvbm90aWZpY2F0aW9uLWlubGluZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmdGb3IgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUb2FzdENvbXBvbmVudCB9IGZyb20gJ0B0YS91aSc7XG5pbXBvcnQgeyBUYUJhc2VDb21wb25lbnQgfSBmcm9tICdAdGEvdXRpbHMnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0YS1ub3RpZmljYXRpb24tYm94JyxcbiAgdGVtcGxhdGVVcmw6ICcuL25vdGlmaWNhdGlvbi1ib3guY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9ub3RpZmljYXRpb24tYm94LmNvbXBvbmVudC5zY3NzJ10sXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtcbiAgICBOZ0ZvcixcbiAgICBOb3RpZmljYXRpb25JbmxpbmVDb21wb25lbnQsXG4gICAgVG9hc3RDb21wb25lbnRcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uQm94Q29tcG9uZW50IGV4dGVuZHMgVGFCYXNlQ29tcG9uZW50IHtcbiAgcHVibGljIGxpc3Q6IHsgbWVzc2FnZTogc3RyaW5nOyBjb2RlOiBFTm90aWZpY2F0aW9uQ29kZSB9W10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9ub3RpZmljYXRpb25TZXJ2aWNlOiBDYW1Ob3RpZmljYXRpb25TZXJ2aWNlKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX3JlZ2lzdGVyU3Vic2NyaXB0aW9uKFxuICAgICAgdGhpcy5fbm90aWZpY2F0aW9uU2VydmljZS5uZXdOb3RpZmljYXRpb24kXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIHRhcChub3RpZmljYXRpb24gPT4ge1xuICAgICAgICAgICAgdGhpcy5saXN0LnB1c2gobm90aWZpY2F0aW9uKTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0YXAobm90aWZpY2F0aW9uID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmxpc3QgPSB0aGlzLmxpc3QuZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gbm90aWZpY2F0aW9uKTtcbiAgICAgICAgICAgIH0sIDMwMDApO1xuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZSgpXG4gICAgKTtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cIm5vdGlmaWNhdGlvbi1ib3hfY29udGFpbmVyIGZsZXgtY29sdW1uIGctc3BhY2Utc21cIj5cbiAgQGZvciAoaXRlbSBvZiB0aGlzLmxpc3Q7IHRyYWNrIGl0ZW0pIHtcbiAgICA8ZGl2PlxuICAgICAgPHRhLXRvYXN0IFtjb2RlXT1cIml0ZW0uY29kZVwiPlxuICAgICAgICA8dGEtbm90aWZpY2F0aW9uLWlubGluZSBbbWVzc2FnZV09XCJpdGVtLm1lc3NhZ2VcIiBbY29kZV09XCJpdGVtLmNvZGVcIiBbc2hvd0Nsb3NlXT1cImZhbHNlXCI+PC90YS1ub3RpZmljYXRpb24taW5saW5lPlxuICAgICAgPC90YS10b2FzdD5cbiAgICA8L2Rpdj5cbiAgfVxuPC9kaXY+XG4iXX0=