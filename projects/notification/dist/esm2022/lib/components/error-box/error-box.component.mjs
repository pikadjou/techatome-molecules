import { JsonPipe } from '@angular/common';
import { Component, inject } from '@angular/core';
import { TaServerErrorService } from '@ta/server';
import { ButtonComponent, ExpandableTextComponent, LayoutModalComponent, TextComponent, TitleComponent } from '@ta/ui';
import { TaBaseModal, copyTextToClipboard } from '@ta/utils';
import { ENotificationCode } from '../../enum';
import { LAZY_SERVICE_TOKEN } from '../../services/notification.service';
import * as i0 from "@angular/core";
export class ErrorBoxModal extends TaBaseModal {
    constructor() {
        super(...arguments);
        this._notificationService = inject(LAZY_SERVICE_TOKEN);
        this._errorService = inject(TaServerErrorService);
        this.errorList = this._errorService.notifications;
        this.copyContent = async (entity) => {
            const successNotification = (message) => {
                this._notificationService.addNotification(message, ENotificationCode.success);
            };
            const errorNotification = (message) => {
                this._notificationService.addNotification(message, ENotificationCode.error);
            };
            await copyTextToClipboard(this._formatEntityForClipboard(entity), successNotification, errorNotification);
        };
    }
    _formatEntityForClipboard(entity) {
        const errorMessages = entity.errorsMessage?.map(m => `- ${m.message}`).join('\n') ?? 'No error messages';
        return `
      ðŸ”´ Error Name:
      ${entity.error?.name ?? 'N/A'}
      
      ðŸ’¬ Message:
      ${entity.error?.message ?? 'N/A'}
      
      ðŸ“œ Stack:
      ${entity.error?.stack ?? 'N/A'}
      
      ðŸ“„ Query:
      ${entity.query ?? 'N/A'}
      
      ðŸ“¦ Variables:
      ${JSON.stringify(entity.variables, null, 2)}
      
      ðŸ§¾ Error Messages:
      ${errorMessages}
      `.trim();
    }
    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: ErrorBoxModal, deps: null, target: i0.ÉµÉµFactoryTarget.Component }); }
    static { this.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "17.0.0", version: "18.2.14", type: ErrorBoxModal, isStandalone: true, selector: "ta-error-box", usesInheritance: true, ngImport: i0, template: "<ta-layout-modal>\r\n  <div class=\"flex-column\">\r\n    @for (entity of this.errorList(); track entity; let i = $index) {\r\n      <ta-title [level]=\"3\">{{ entity.error.name }}</ta-title>\r\n      <div class=\"row\">\r\n        <div class=\"col-6\">\r\n          @for (message of entity.errorsMessage; track message) {\r\n            <ta-text>{{ message.message }}</ta-text>\r\n          }\r\n        </div>\r\n        <div class=\"col-6\">\r\n          <ta-text size=\"sm\">{{ entity.query }}</ta-text>\r\n          <ta-text size=\"sm\">{{ entity.variables | json }}</ta-text>\r\n        </div>\r\n      </div>\r\n      <div class=\"extra\">\r\n        <ta-text size=\"sm\" [isBold]=\"true\"> {{ entity.error.message }}</ta-text>\r\n        <ta-expandable-text size=\"sm\" [height]=\"20\">{{ entity.error.stack }}</ta-expandable-text>\r\n      </div>\r\n      <ta-button class=\"ml-a\" (action)=\"this.copyContent(entity)\">copy</ta-button>\r\n      <div class=\"sep\"></div>\r\n    }\r\n  </div>\r\n</ta-layout-modal>\r\n", styles: [".sep{height:1px;border-bottom:1px solid var(--ta-border-secondary);margin:var(--ta-space-xl) 0}\n"], dependencies: [{ kind: "component", type: ButtonComponent, selector: "ta-button", inputs: ["state", "type", "size", "icon", "options", "stopPropagationActivation"], outputs: ["action"] }, { kind: "component", type: ExpandableTextComponent, selector: "ta-expandable-text", inputs: ["height"] }, { kind: "pipe", type: JsonPipe, name: "json" }, { kind: "component", type: LayoutModalComponent, selector: "ta-layout-modal", inputs: ["style", "title"] }, { kind: "component", type: TextComponent, selector: "ta-text", inputs: ["size", "isBold", "color"] }, { kind: "component", type: TitleComponent, selector: "ta-title", inputs: ["level", "isTheme", "isBold", "icon"] }] }); }
}
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: ErrorBoxModal, decorators: [{
            type: Component,
            args: [{ selector: 'ta-error-box', standalone: true, imports: [ButtonComponent, ExpandableTextComponent, JsonPipe, LayoutModalComponent, TextComponent, TitleComponent], template: "<ta-layout-modal>\r\n  <div class=\"flex-column\">\r\n    @for (entity of this.errorList(); track entity; let i = $index) {\r\n      <ta-title [level]=\"3\">{{ entity.error.name }}</ta-title>\r\n      <div class=\"row\">\r\n        <div class=\"col-6\">\r\n          @for (message of entity.errorsMessage; track message) {\r\n            <ta-text>{{ message.message }}</ta-text>\r\n          }\r\n        </div>\r\n        <div class=\"col-6\">\r\n          <ta-text size=\"sm\">{{ entity.query }}</ta-text>\r\n          <ta-text size=\"sm\">{{ entity.variables | json }}</ta-text>\r\n        </div>\r\n      </div>\r\n      <div class=\"extra\">\r\n        <ta-text size=\"sm\" [isBold]=\"true\"> {{ entity.error.message }}</ta-text>\r\n        <ta-expandable-text size=\"sm\" [height]=\"20\">{{ entity.error.stack }}</ta-expandable-text>\r\n      </div>\r\n      <ta-button class=\"ml-a\" (action)=\"this.copyContent(entity)\">copy</ta-button>\r\n      <div class=\"sep\"></div>\r\n    }\r\n  </div>\r\n</ta-layout-modal>\r\n", styles: [".sep{height:1px;border-bottom:1px solid var(--ta-border-secondary);margin:var(--ta-space-xl) 0}\n"] }]
        }] });
export function openErrorModal(dialog) {
    return dialog.open(ErrorBoxModal, {
        width: '600px',
        maxHeight: '80vh',
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy9lcnJvci1ib3gvZXJyb3ItYm94LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy9lcnJvci1ib3gvZXJyb3ItYm94LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdsRCxPQUFPLEVBQWUsb0JBQW9CLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDL0QsT0FBTyxFQUFFLGVBQWUsRUFBRSx1QkFBdUIsRUFBRSxvQkFBb0IsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3ZILE9BQU8sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDOztBQVN6RSxNQUFNLE9BQU8sYUFBYyxTQUFRLFdBQVc7SUFQOUM7O1FBUVkseUJBQW9CLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFM0Msa0JBQWEsR0FBRyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUU5QyxjQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUM7UUFFdEQsZ0JBQVcsR0FBRyxLQUFLLEVBQUUsTUFBbUIsRUFBRSxFQUFFO1lBQ2pELE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRTtnQkFDOUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDaEYsQ0FBQyxDQUFDO1lBQ0YsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO2dCQUM1QyxJQUFJLENBQUMsb0JBQW9CLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5RSxDQUFDLENBQUM7WUFFRixNQUFNLG1CQUFtQixDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzVHLENBQUMsQ0FBQztLQXlCSDtJQXZCUyx5QkFBeUIsQ0FBQyxNQUFtQjtRQUNuRCxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLG1CQUFtQixDQUFDO1FBRXpHLE9BQU87O1FBRUgsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLElBQUksS0FBSzs7O1FBRzNCLE1BQU0sQ0FBQyxLQUFLLEVBQUUsT0FBTyxJQUFJLEtBQUs7OztRQUc5QixNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssSUFBSSxLQUFLOzs7UUFHNUIsTUFBTSxDQUFDLEtBQUssSUFBSSxLQUFLOzs7UUFHckIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7OztRQUd6QyxhQUFhO09BQ2QsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNiLENBQUM7K0dBeENVLGFBQWE7bUdBQWIsYUFBYSwrRkNsQjFCLHFnQ0F3QkEsMkpEUlksZUFBZSw4SkFBRSx1QkFBdUIsOEVBQUUsUUFBUSw2Q0FBRSxvQkFBb0Isd0ZBQUUsYUFBYSx5RkFBRSxjQUFjOzs0RkFFdEcsYUFBYTtrQkFQekIsU0FBUzsrQkFDRSxjQUFjLGNBR1osSUFBSSxXQUNQLENBQUMsZUFBZSxFQUFFLHVCQUF1QixFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxhQUFhLEVBQUUsY0FBYyxDQUFDOztBQTZDcEgsTUFBTSxVQUFVLGNBQWMsQ0FBQyxNQUFpQjtJQUM5QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ2hDLEtBQUssRUFBRSxPQUFPO1FBQ2QsU0FBUyxFQUFFLE1BQU07S0FDbEIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpzb25QaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENvbXBvbmVudCwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2cgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuXG5pbXBvcnQgeyBTZXJ2ZXJFcnJvciwgVGFTZXJ2ZXJFcnJvclNlcnZpY2UgfSBmcm9tICdAdGEvc2VydmVyJztcbmltcG9ydCB7IEJ1dHRvbkNvbXBvbmVudCwgRXhwYW5kYWJsZVRleHRDb21wb25lbnQsIExheW91dE1vZGFsQ29tcG9uZW50LCBUZXh0Q29tcG9uZW50LCBUaXRsZUNvbXBvbmVudCB9IGZyb20gJ0B0YS91aSc7XG5pbXBvcnQgeyBUYUJhc2VNb2RhbCwgY29weVRleHRUb0NsaXBib2FyZCB9IGZyb20gJ0B0YS91dGlscyc7XG5cbmltcG9ydCB7IEVOb3RpZmljYXRpb25Db2RlIH0gZnJvbSAnLi4vLi4vZW51bSc7XG5pbXBvcnQgeyBMQVpZX1NFUlZJQ0VfVE9LRU4gfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9ub3RpZmljYXRpb24uc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhLWVycm9yLWJveCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9lcnJvci1ib3guY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9lcnJvci1ib3guY29tcG9uZW50LnNjc3MnXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0J1dHRvbkNvbXBvbmVudCwgRXhwYW5kYWJsZVRleHRDb21wb25lbnQsIEpzb25QaXBlLCBMYXlvdXRNb2RhbENvbXBvbmVudCwgVGV4dENvbXBvbmVudCwgVGl0bGVDb21wb25lbnRdLFxufSlcbmV4cG9ydCBjbGFzcyBFcnJvckJveE1vZGFsIGV4dGVuZHMgVGFCYXNlTW9kYWwge1xuICBwcm90ZWN0ZWQgX25vdGlmaWNhdGlvblNlcnZpY2UgPSBpbmplY3QoTEFaWV9TRVJWSUNFX1RPS0VOKTtcblxuICBwcml2YXRlIHJlYWRvbmx5IF9lcnJvclNlcnZpY2UgPSBpbmplY3QoVGFTZXJ2ZXJFcnJvclNlcnZpY2UpO1xuXG4gIHB1YmxpYyByZWFkb25seSBlcnJvckxpc3QgPSB0aGlzLl9lcnJvclNlcnZpY2Uubm90aWZpY2F0aW9ucztcblxuICBwdWJsaWMgY29weUNvbnRlbnQgPSBhc3luYyAoZW50aXR5OiBTZXJ2ZXJFcnJvcikgPT4ge1xuICAgIGNvbnN0IHN1Y2Nlc3NOb3RpZmljYXRpb24gPSAobWVzc2FnZTogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLl9ub3RpZmljYXRpb25TZXJ2aWNlLmFkZE5vdGlmaWNhdGlvbihtZXNzYWdlLCBFTm90aWZpY2F0aW9uQ29kZS5zdWNjZXNzKTtcbiAgICB9O1xuICAgIGNvbnN0IGVycm9yTm90aWZpY2F0aW9uID0gKG1lc3NhZ2U6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5fbm90aWZpY2F0aW9uU2VydmljZS5hZGROb3RpZmljYXRpb24obWVzc2FnZSwgRU5vdGlmaWNhdGlvbkNvZGUuZXJyb3IpO1xuICAgIH07XG5cbiAgICBhd2FpdCBjb3B5VGV4dFRvQ2xpcGJvYXJkKHRoaXMuX2Zvcm1hdEVudGl0eUZvckNsaXBib2FyZChlbnRpdHkpLCBzdWNjZXNzTm90aWZpY2F0aW9uLCBlcnJvck5vdGlmaWNhdGlvbik7XG4gIH07XG5cbiAgcHJpdmF0ZSBfZm9ybWF0RW50aXR5Rm9yQ2xpcGJvYXJkKGVudGl0eTogU2VydmVyRXJyb3IpOiBzdHJpbmcge1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZXMgPSBlbnRpdHkuZXJyb3JzTWVzc2FnZT8ubWFwKG0gPT4gYC0gJHttLm1lc3NhZ2V9YCkuam9pbignXFxuJykgPz8gJ05vIGVycm9yIG1lc3NhZ2VzJztcblxuICAgIHJldHVybiBgXG4gICAgICDwn5S0IEVycm9yIE5hbWU6XG4gICAgICAke2VudGl0eS5lcnJvcj8ubmFtZSA/PyAnTi9BJ31cbiAgICAgIFxuICAgICAg8J+SrCBNZXNzYWdlOlxuICAgICAgJHtlbnRpdHkuZXJyb3I/Lm1lc3NhZ2UgPz8gJ04vQSd9XG4gICAgICBcbiAgICAgIPCfk5wgU3RhY2s6XG4gICAgICAke2VudGl0eS5lcnJvcj8uc3RhY2sgPz8gJ04vQSd9XG4gICAgICBcbiAgICAgIPCfk4QgUXVlcnk6XG4gICAgICAke2VudGl0eS5xdWVyeSA/PyAnTi9BJ31cbiAgICAgIFxuICAgICAg8J+TpiBWYXJpYWJsZXM6XG4gICAgICAke0pTT04uc3RyaW5naWZ5KGVudGl0eS52YXJpYWJsZXMsIG51bGwsIDIpfVxuICAgICAgXG4gICAgICDwn6e+IEVycm9yIE1lc3NhZ2VzOlxuICAgICAgJHtlcnJvck1lc3NhZ2VzfVxuICAgICAgYC50cmltKCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9wZW5FcnJvck1vZGFsKGRpYWxvZzogTWF0RGlhbG9nKSB7XG4gIHJldHVybiBkaWFsb2cub3BlbihFcnJvckJveE1vZGFsLCB7XG4gICAgd2lkdGg6ICc2MDBweCcsXG4gICAgbWF4SGVpZ2h0OiAnODB2aCcsXG4gIH0pO1xufVxuIiwiPHRhLWxheW91dC1tb2RhbD5cclxuICA8ZGl2IGNsYXNzPVwiZmxleC1jb2x1bW5cIj5cclxuICAgIEBmb3IgKGVudGl0eSBvZiB0aGlzLmVycm9yTGlzdCgpOyB0cmFjayBlbnRpdHk7IGxldCBpID0gJGluZGV4KSB7XHJcbiAgICAgIDx0YS10aXRsZSBbbGV2ZWxdPVwiM1wiPnt7IGVudGl0eS5lcnJvci5uYW1lIH19PC90YS10aXRsZT5cclxuICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNlwiPlxyXG4gICAgICAgICAgQGZvciAobWVzc2FnZSBvZiBlbnRpdHkuZXJyb3JzTWVzc2FnZTsgdHJhY2sgbWVzc2FnZSkge1xyXG4gICAgICAgICAgICA8dGEtdGV4dD57eyBtZXNzYWdlLm1lc3NhZ2UgfX08L3RhLXRleHQ+XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC02XCI+XHJcbiAgICAgICAgICA8dGEtdGV4dCBzaXplPVwic21cIj57eyBlbnRpdHkucXVlcnkgfX08L3RhLXRleHQ+XHJcbiAgICAgICAgICA8dGEtdGV4dCBzaXplPVwic21cIj57eyBlbnRpdHkudmFyaWFibGVzIHwganNvbiB9fTwvdGEtdGV4dD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJleHRyYVwiPlxyXG4gICAgICAgIDx0YS10ZXh0IHNpemU9XCJzbVwiIFtpc0JvbGRdPVwidHJ1ZVwiPiB7eyBlbnRpdHkuZXJyb3IubWVzc2FnZSB9fTwvdGEtdGV4dD5cclxuICAgICAgICA8dGEtZXhwYW5kYWJsZS10ZXh0IHNpemU9XCJzbVwiIFtoZWlnaHRdPVwiMjBcIj57eyBlbnRpdHkuZXJyb3Iuc3RhY2sgfX08L3RhLWV4cGFuZGFibGUtdGV4dD5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDx0YS1idXR0b24gY2xhc3M9XCJtbC1hXCIgKGFjdGlvbik9XCJ0aGlzLmNvcHlDb250ZW50KGVudGl0eSlcIj5jb3B5PC90YS1idXR0b24+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJzZXBcIj48L2Rpdj5cclxuICAgIH1cclxuICA8L2Rpdj5cclxuPC90YS1sYXlvdXQtbW9kYWw+XHJcbiJdfQ==