import { InvoicePaymentStatusChangedComponent } from '../items/item/template/invoice-payment-status-changed/invoice-payment-status-changed.component';
import { NewInvoiceComponent } from '../items/item/template/new-invoice/new-invoice.component';
import { NewQuotationVersionComponent } from '../items/item/template/new-quotation-version/new-quotation-version.component';
import { ProjectStatusChangedComponent } from '../items/item/template/project-status-changed/project-status-changed.component';
import { TaskAssignedComponent } from '../items/item/template/task-assigned/task-assigned.component';
import { TaskDueTodayComponent } from '../items/item/template/task-due-today/task-due-today.component';
import { TaskNewActivityComponent } from '../items/item/template/task-new-activity/task-new-activity.component';
import { ToDoAssignedComponent } from '../items/item/template/to-do-assigned/to-do-assigned.component';
import { ToDoDueTodayComponent } from '../items/item/template/to-do-due-today/to-do-due-today.component';
import { UserTaggedInConversationComponent } from '../items/item/template/user-tagged-in-conversation/user-tagged-in-conversation.component';
import { AsyncPipe, NgFor } from '@angular/common';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { EmptyComponent, ErrorComponent, LoaderComponent } from '@ta/ui';
import { TaBaseComponent } from '@ta/utils';
import { tap } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../../services/data.service";
import * as i2 from "../../services/shared.service";
export class ContainerComponent extends TaBaseComponent {
    get notifications$() {
        return this._notificationDataService.list
            .get$(this._notificationDataService.computeKey(this.filters))
            .pipe(tap(list => this.nbChanged.emit(list.length)));
    }
    constructor(_notificationDataService, _sharedService) {
        super();
        this._notificationDataService = _notificationDataService;
        this._sharedService = _sharedService;
        this.filters = null;
        this.templates = null;
        this.services = null;
        this.routing = null;
        this.nbChanged = new EventEmitter();
    }
    ngOnInit() {
        this.requestState.asked();
        this._registerSubscription(this._notificationDataService.fetchNotifications$(this.filters).subscribe({
            complete: () => this.requestState.completed(),
            error: (error) => {
                this.requestState.onError(error.status, error.statusText);
            },
        }));
        if (this.templates) {
            this._sharedService.paymentStatusTemplate = this.templates?.paymentStatus;
            this._sharedService.projectStatusTemplate = this.templates?.projectStatus;
        }
        if (this.services) {
            this._sharedService.getProjects$ = this.services.getProjects$;
        }
        if (this.routing) {
            this._sharedService.routing = this.routing;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContainerComponent, deps: [{ token: i1.CamNotificationDataService }, { token: i2.CamNotificationSharedService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: ContainerComponent, isStandalone: true, selector: "ta-notification-container", inputs: { filters: "filters", templates: "templates", services: "services", routing: "routing" }, outputs: { nbChanged: "nbChanged" }, usesInheritance: true, ngImport: i0, template: "<ta-loader [isLoading]=\"this.requestState.isLoading()\" *ngLet=\"this.notifications$ | async as notifications\">\n  <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n    <ta-empty\n      [isEmpty]=\"!notifications || notifications.length === 0\"\n      icon=\"ghost\"\n      [isLight]=\"false\"\n      text=\"notification.empty\"\n    >\n      <div class=\"notification-container\">\n        @for (notif of this.notifications; track notif) {\n          <div class=\"item-container c-pointer\">\n            @switch (notif.type) {\n              @case ('ProjectStatusChanged') {\n                <ta-notification-project-status-changed [notification]=\"notif\"></ta-notification-project-status-changed>\n              }\n              @case ('NewQuotationVersion') {\n                <ta-new-quotation-version [notification]=\"notif\"></ta-new-quotation-version>\n              }\n              @case ('NewInvoice') {\n                <ta-new-invoice [notification]=\"notif\"></ta-new-invoice>\n              }\n              @case ('InvoicePaymentStatusChanged') {\n                <ta-invoice-payment-status-changed [notification]=\"notif\"></ta-invoice-payment-status-changed>\n              }\n              @case ('TaskAssigned') {\n                <ta-task-assigned [notification]=\"notif\"></ta-task-assigned>\n              }\n              @case ('ToDoAssigned') {\n                <ta-to-do-assigned [notification]=\"notif\"></ta-to-do-assigned>\n              }\n              @case ('TaskDueToday') {\n                <ta-task-due-today [notification]=\"notif\"></ta-task-due-today>\n              }\n              @case ('ToDoDueToday') {\n                <ta-to-do-due-today [notification]=\"notif\"></ta-to-do-due-today>\n              }\n              @case ('TaskNewActivity') {\n                <ta-task-new-activity [notification]=\"notif\"></ta-task-new-activity>\n              }\n              @case ('UserTaggedInConversation') {\n                <ta-user-tagged-in-conversation [notification]=\"notif\"></ta-user-tagged-in-conversation>\n              }\n            }\n          </div>\n        }\n      </div>\n    </ta-empty>\n  </ta-error>\n</ta-loader>\n", styles: [".item-container{border-bottom:1px solid var(--ta-border-primary)}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "component", type: EmptyComponent, selector: "ta-empty", inputs: ["isEmpty", "isLight", "showMessage", "text", "type", "icon", "iconSize"] }, { kind: "component", type: ErrorComponent, selector: "ta-error", inputs: ["message", "code"] }, { kind: "component", type: InvoicePaymentStatusChangedComponent, selector: "ta-invoice-payment-status-changed" }, { kind: "component", type: LoaderComponent, selector: "ta-loader", inputs: ["isLoading", "skeleton"] }, { kind: "component", type: NewInvoiceComponent, selector: "ta-new-invoice" }, { kind: "component", type: NewQuotationVersionComponent, selector: "ta-new-quotation-version" }, { kind: "component", type: ProjectStatusChangedComponent, selector: "ta-notification-project-status-changed" }, { kind: "component", type: TaskAssignedComponent, selector: "ta-task-assigned" }, { kind: "component", type: TaskDueTodayComponent, selector: "ta-task-due-today" }, { kind: "component", type: TaskNewActivityComponent, selector: "ta-task-new-activity" }, { kind: "component", type: ToDoAssignedComponent, selector: "ta-to-do-assigned" }, { kind: "component", type: ToDoDueTodayComponent, selector: "ta-to-do-due-today" }, { kind: "component", type: UserTaggedInConversationComponent, selector: "ta-user-tagged-in-conversation" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-notification-container', standalone: true, imports: [
                        AsyncPipe,
                        EmptyComponent,
                        ErrorComponent,
                        InvoicePaymentStatusChangedComponent,
                        LoaderComponent,
                        NewInvoiceComponent,
                        NewQuotationVersionComponent,
                        NgFor,
                        ProjectStatusChangedComponent,
                        TaskAssignedComponent,
                        TaskDueTodayComponent,
                        TaskNewActivityComponent,
                        ToDoAssignedComponent,
                        ToDoDueTodayComponent,
                        UserTaggedInConversationComponent
                    ], template: "<ta-loader [isLoading]=\"this.requestState.isLoading()\" *ngLet=\"this.notifications$ | async as notifications\">\n  <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n    <ta-empty\n      [isEmpty]=\"!notifications || notifications.length === 0\"\n      icon=\"ghost\"\n      [isLight]=\"false\"\n      text=\"notification.empty\"\n    >\n      <div class=\"notification-container\">\n        @for (notif of this.notifications; track notif) {\n          <div class=\"item-container c-pointer\">\n            @switch (notif.type) {\n              @case ('ProjectStatusChanged') {\n                <ta-notification-project-status-changed [notification]=\"notif\"></ta-notification-project-status-changed>\n              }\n              @case ('NewQuotationVersion') {\n                <ta-new-quotation-version [notification]=\"notif\"></ta-new-quotation-version>\n              }\n              @case ('NewInvoice') {\n                <ta-new-invoice [notification]=\"notif\"></ta-new-invoice>\n              }\n              @case ('InvoicePaymentStatusChanged') {\n                <ta-invoice-payment-status-changed [notification]=\"notif\"></ta-invoice-payment-status-changed>\n              }\n              @case ('TaskAssigned') {\n                <ta-task-assigned [notification]=\"notif\"></ta-task-assigned>\n              }\n              @case ('ToDoAssigned') {\n                <ta-to-do-assigned [notification]=\"notif\"></ta-to-do-assigned>\n              }\n              @case ('TaskDueToday') {\n                <ta-task-due-today [notification]=\"notif\"></ta-task-due-today>\n              }\n              @case ('ToDoDueToday') {\n                <ta-to-do-due-today [notification]=\"notif\"></ta-to-do-due-today>\n              }\n              @case ('TaskNewActivity') {\n                <ta-task-new-activity [notification]=\"notif\"></ta-task-new-activity>\n              }\n              @case ('UserTaggedInConversation') {\n                <ta-user-tagged-in-conversation [notification]=\"notif\"></ta-user-tagged-in-conversation>\n              }\n            }\n          </div>\n        }\n      </div>\n    </ta-empty>\n  </ta-error>\n</ta-loader>\n", styles: [".item-container{border-bottom:1px solid var(--ta-border-primary)}\n"] }]
        }], ctorParameters: () => [{ type: i1.CamNotificationDataService }, { type: i2.CamNotificationSharedService }], propDecorators: { filters: [{
                type: Input
            }], templates: [{
                type: Input
            }], services: [{
                type: Input
            }], routing: [{
                type: Input
            }], nbChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,