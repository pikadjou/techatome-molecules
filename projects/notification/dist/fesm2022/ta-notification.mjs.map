{"version":3,"file":"ta-notification.mjs","sources":["../../src/lib/enum.ts","../../src/lib/translation.service.ts","../../src/lib/services/notification.service.ts","../../src/lib/components/error-box/error-box.component.ts","../../src/lib/components/error-box/error-box.component.html","../../src/lib/components/popup/inline/notification-inline.component.ts","../../src/lib/components/popup/inline/notification-inline.component.html","../../src/lib/components/popup/box/notification-box.component.ts","../../src/lib/components/popup/box/notification-box.component.html","../../src/lib/services/dto/notification.ts","../../src/lib/services/queries.ts","../../src/lib/services/shared.service.ts","../../src/lib/services/data.service.ts","../../src/lib/components/items/item/template/abstract.ts","../../src/lib/components/items/item/icon/icon.component.ts","../../src/lib/components/items/item/icon/icon.component.html","../../src/lib/components/items/item/item.component.ts","../../src/lib/components/items/item/item.component.html","../../src/lib/components/items/item/title/title.component.ts","../../src/lib/components/items/item/title/title.component.html","../../src/lib/components/items/item/template/invoice-payment-status-changed/invoice-payment-status-changed.component.ts","../../src/lib/components/items/item/template/invoice-payment-status-changed/invoice-payment-status-changed.component.html","../../src/lib/components/items/item/template/new-invoice/new-invoice.component.ts","../../src/lib/components/items/item/template/new-invoice/new-invoice.component.html","../../src/lib/components/items/item/template/new-quotation-version/new-quotation-version.component.ts","../../src/lib/components/items/item/template/new-quotation-version/new-quotation-version.component.html","../../src/lib/components/items/item/template/project-status-changed/project-status-changed.component.ts","../../src/lib/components/items/item/template/project-status-changed/project-status-changed.component.html","../../src/lib/components/items/item/template/task-assigned/task-assigned.component.ts","../../src/lib/components/items/item/template/task-assigned/task-assigned.component.html","../../src/lib/components/items/item/template/task-due-today/task-due-today.component.ts","../../src/lib/components/items/item/template/task-due-today/task-due-today.component.html","../../src/lib/components/items/item/template/task-new-activity/task-new-activity.component.ts","../../src/lib/components/items/item/template/task-new-activity/task-new-activity.component.html","../../src/lib/components/items/item/template/to-do-assigned/to-do-assigned.component.ts","../../src/lib/components/items/item/template/to-do-assigned/to-do-assigned.component.html","../../src/lib/components/items/item/template/to-do-due-today/to-do-due-today.component.ts","../../src/lib/components/items/item/template/to-do-due-today/to-do-due-today.component.html","../../src/lib/components/items/item/template/user-tagged-in-conversation/user-tagged-in-conversation.component.ts","../../src/lib/components/items/item/template/user-tagged-in-conversation/user-tagged-in-conversation.component.html","../../src/lib/components/container/container.component.ts","../../src/lib/components/container/container.component.html","../../src/lib/components/bullet/bullet.component.ts","../../src/lib/components/bullet/bullet.component.html","../../src/lib/components/items/item/info/info.component.ts","../../src/lib/components/items/item/info/info.component.html","../../src/lib/notification.module.ts","../../src/public-api.ts","../../src/ta-notification.ts"],"sourcesContent":["export enum ENotificationCode {\n  none,\n  error,\n  warning,\n  information,\n  success,\n}\n","import { Injectable } from '@angular/core';\n\nimport { TaLazyTranslationService } from '@ta/translation';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaTranslationNotification extends TaLazyTranslationService {\n  constructor() {\n    super('notification');\n  }\n}\n","import { Injectable, InjectionToken } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nimport { ENotificationCode } from '../enum';\n\nexport const LAZY_SERVICE_TOKEN = new InjectionToken<TaNotificationService>('TaNotificationService');\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaNotificationService {\n  public id = Math.random();\n\n  public newNotification$ = new Subject<{\n    message: string;\n    code: ENotificationCode;\n  }>();\n\n  constructor() {}\n\n  public addNotification(message: string, code: ENotificationCode) {\n    this.newNotification$.next({ message, code });\n  }\n}\n","import { JsonPipe } from '@angular/common';\nimport { Component, inject } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { ServerError, TaServerErrorService } from '@ta/server';\nimport { ButtonComponent, ExpandableTextComponent, LayoutModalComponent, TextComponent, TitleComponent } from '@ta/ui';\nimport { TaBaseModal, copyTextToClipboard } from '@ta/utils';\n\nimport { ENotificationCode } from '../../enum';\nimport { LAZY_SERVICE_TOKEN } from '../../services/notification.service';\n\n@Component({\n  selector: 'ta-error-box',\n  templateUrl: './error-box.component.html',\n  styleUrls: ['./error-box.component.scss'],\n  standalone: true,\n  imports: [ButtonComponent, ExpandableTextComponent, JsonPipe, LayoutModalComponent, TextComponent, TitleComponent],\n})\nexport class ErrorBoxModal extends TaBaseModal {\n  protected _notificationService = inject(LAZY_SERVICE_TOKEN);\n\n  private readonly _errorService = inject(TaServerErrorService);\n\n  public readonly errorList = this._errorService.notifications;\n\n  public copyContent = async (entity: ServerError) => {\n    const successNotification = (message: string) => {\n      this._notificationService.addNotification(message, ENotificationCode.success);\n    };\n    const errorNotification = (message: string) => {\n      this._notificationService.addNotification(message, ENotificationCode.error);\n    };\n\n    await copyTextToClipboard(this._formatEntityForClipboard(entity), successNotification, errorNotification);\n  };\n\n  private _formatEntityForClipboard(entity: ServerError): string {\n    const errorMessages = entity.errorsMessage?.map(m => `- ${m.message}`).join('\\n') ?? 'No error messages';\n\n    return `\n      ðŸ”´ Error Name:\n      ${entity.error?.name ?? 'N/A'}\n      \n      ðŸ’¬ Message:\n      ${entity.error?.message ?? 'N/A'}\n      \n      ðŸ“œ Stack:\n      ${entity.error?.stack ?? 'N/A'}\n      \n      ðŸ“„ Query:\n      ${entity.query ?? 'N/A'}\n      \n      ðŸ“¦ Variables:\n      ${JSON.stringify(entity.variables, null, 2)}\n      \n      ðŸ§¾ Error Messages:\n      ${errorMessages}\n      `.trim();\n  }\n}\n\nexport function openErrorModal(dialog: MatDialog) {\n  return dialog.open(ErrorBoxModal, {\n    width: '600px',\n    maxHeight: '80vh',\n  });\n}\n","<ta-layout-modal>\r\n  <div class=\"flex-column\">\r\n    @for (entity of this.errorList(); track entity; let i = $index) {\r\n      <ta-title [level]=\"3\">{{ entity.error.name }}</ta-title>\r\n      <div class=\"row\">\r\n        <div class=\"col-6\">\r\n          @for (message of entity.errorsMessage; track message) {\r\n            <ta-text>{{ message.message }}</ta-text>\r\n          }\r\n        </div>\r\n        <div class=\"col-6\">\r\n          <ta-text size=\"sm\">{{ entity.query }}</ta-text>\r\n          <ta-text size=\"sm\">{{ entity.variables | json }}</ta-text>\r\n        </div>\r\n      </div>\r\n      <div class=\"extra\">\r\n        <ta-text size=\"sm\" [isBold]=\"true\"> {{ entity.error.message }}</ta-text>\r\n        <ta-expandable-text size=\"sm\" [height]=\"20\">{{ entity.error.stack }}</ta-expandable-text>\r\n      </div>\r\n      <ta-button class=\"ml-a\" (action)=\"this.copyContent(entity)\">copy</ta-button>\r\n      <div class=\"sep\"></div>\r\n    }\r\n  </div>\r\n</ta-layout-modal>\r\n","import { NgClass } from '@angular/common';\nimport { Component, EventEmitter, Input, Output, inject } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { FontIconComponent } from '@ta/icons';\nimport { LinkComponent } from '@ta/ui';\nimport { TaBaseComponent } from '@ta/utils';\n\nimport { ENotificationCode } from '../../../enum';\nimport { TaTranslationNotification } from '../../../translation.service';\nimport { openErrorModal } from '../../error-box/error-box.component';\n\n@Component({\n  selector: 'ta-notification-inline',\n  templateUrl: './notification-inline.component.html',\n  styleUrls: ['./notification-inline.component.scss'],\n  standalone: true,\n  imports: [FontIconComponent, LinkComponent, NgClass, TranslateModule],\n})\nexport class NotificationInlineComponent extends TaBaseComponent {\n  @Input() set message(value: string) {\n    this._message = value;\n    this.showMessage = !!value;\n  }\n\n  @Input()\n  code: ENotificationCode = ENotificationCode.information;\n\n  @Input()\n  showClose = true;\n\n  @Output()\n  askClose: EventEmitter<null> = new EventEmitter();\n\n  private _matDialog = inject(MatDialog);\n\n  public showMessage = false;\n\n  get message(): string {\n    return this._message;\n  }\n  get isError(): boolean {\n    return this.code === ENotificationCode.error;\n  }\n  get isWarning(): boolean {\n    return this.code === ENotificationCode.warning;\n  }\n  get isInformation(): boolean {\n    return this.code === ENotificationCode.information;\n  }\n  get isSuccess(): boolean {\n    return this.code === ENotificationCode.success;\n  }\n\n  private _message!: string;\n\n  constructor() {\n    super();\n    TaTranslationNotification.getInstance();\n  }\n\n  public close = () => {\n    this.askClose.emit();\n  };\n\n  public getIcon(): string {\n    if (this.isError) {\n      return 'close-tool';\n    }\n    if (this.isWarning) {\n      return 'warning';\n    }\n    if (this.isSuccess) {\n      return 'checked';\n    }\n    return 'help';\n  }\n  public getTypeClass(): string {\n    if (this.isError) {\n      return 'danger';\n    } else if (this.isWarning) {\n      return 'warning';\n    } else if (this.isInformation) {\n      return 'info';\n    } else if (this.isSuccess) {\n      return 'success';\n    } else {\n      return '';\n    }\n  }\n\n  public openErrorBox() {\n    openErrorModal(this._matDialog);\n  }\n}\n","@if (this.showMessage) {\n  <div class=\"notification-container\">\n    <div class=\"text\">\n      <div class=\"label\" [ngClass]=\"this.getTypeClass()\">\n        <ta-font-icon class=\"mr-space-xs\" [name]=\"this.getIcon()\" type=\"md\"></ta-font-icon>\n        @if (!this.message) {\n          @switch (true) {\n            @case (this.isError) {\n              {{ 'notification.inline.label.error' | translate }}\n            }\n            @case (this.isWarning) {\n              {{ 'notification.inline.label.warning' | translate }}\n            }\n            @case (this.isInformation) {\n              {{ 'notification.inline.label.info' | translate }}\n            }\n            @case (this.isSuccess) {\n              {{ 'notification.inline.label.success' | translate }}\n            }\n          }\n        } @else {\n          {{ this.message | translate }}\n        }\n      </div>\n    </div>\n    @if (this.showClose) {\n      <span class=\"close\" (click)=\"this.close()\">\n        <ta-font-icon name=\"close\"></ta-font-icon>\n      </span>\n    }\n  </div>\n} @else {\n    <ng-content></ng-content>\n}\n\n@if (this.isError) {\n  <ta-link size=\"sm\" class=\"color-semantic-orange-dark flex-end\" (action)=\"this.openErrorBox()\">Open</ta-link>\n}\n","import { NgFor } from '@angular/common';\nimport { Component } from '@angular/core';\n\nimport { tap } from 'rxjs/operators';\n\nimport { ToastComponent } from '@ta/ui';\nimport { TaBaseComponent } from '@ta/utils';\n\nimport { ENotificationCode } from '../../../enum';\nimport { TaNotificationService } from '../../../services/notification.service';\nimport { NotificationInlineComponent } from '../inline/notification-inline.component';\n\n@Component({\n  selector: 'ta-notification-box',\n  templateUrl: './notification-box.component.html',\n  styleUrls: ['./notification-box.component.scss'],\n  standalone: true,\n  imports: [NgFor, NotificationInlineComponent, ToastComponent],\n})\nexport class NotificationBoxComponent extends TaBaseComponent {\n  public list: { message: string; code: ENotificationCode }[] = [];\n\n  constructor(private _notificationService: TaNotificationService) {\n    super();\n\n    this._registerSubscription(\n      this._notificationService.newNotification$\n        .pipe(\n          tap(notification => {\n            this.list.push(notification);\n          }),\n          tap(notification => {\n            setTimeout(() => {\n              this.list = this.list.filter(item => item !== notification);\n            }, 3000);\n          })\n        )\n        .subscribe()\n    );\n  }\n}\n","<div class=\"notification-box_container flex-column g-space-sm\">\n  @for (item of this.list; track item) {\n    <div>\n      <ta-toast [code]=\"item.code\">\n        <ta-notification-inline [message]=\"item.message\" [code]=\"item.code\" [showClose]=\"false\"></ta-notification-inline>\n      </ta-toast>\n    </div>\n  }\n</div>\n","import { GraphSchema } from '@ta/server';\n\nimport { ENotificationLevel } from './level';\nimport { SwitchCases } from './switch-cases';\n\nexport type NotificationDto = {\n  id: string;\n  date: string;\n  level: ENotificationLevel;\n  isNew: boolean;\n  userId: string;\n  /**\n   * @deprecated\n   */\n  projectId: string;\n  tenantId: string;\n  tenantName: string;\n\n  project?: { id: string; name: string };\n} & SwitchCases;\n\nexport const notificationProps = new GraphSchema<NotificationDto>([\n  'id',\n  'date',\n  'level',\n  'isNew',\n  'userId',\n  'tenantId',\n  'tenantName',\n  'type',\n  'context',\n  'redirectContext',\n]);\n","import {\n  Apollo_gql,\n  GraphMutationPayload,\n  GraphQueryPayload,\n  graphQlPaginationFields,\n  graphQlTake,\n  keyValueProps,\n} from '@ta/server';\nimport { isNonNullable } from '@ta/utils';\n\nimport { notificationProps } from './dto/notification';\n\nexport type NotificationFilter = {\n  projectId?: string;\n  isNew?: boolean | null;\n  take?: number | null;\n} | null;\n\nexport function GET_NOTIFICATIONS(filters: NotificationFilter): GraphQueryPayload {\n  const where = computeFilters(filters);\n  return {\n    query: Apollo_gql`\n    query Notifications {\n        notifications(${where}, order: { isNew: DESC, date: DESC }, ${graphQlTake(filters?.take)}) {\n            items {\n              ${notificationProps.get('id')}\n              ${notificationProps.get('date')}\n              ${notificationProps.get('level')}\n              ${notificationProps.get('isNew')}\n              ${notificationProps.get('userId')}\n              ${notificationProps.get('tenantId')}\n              ${notificationProps.get('tenantName')}\n              ${notificationProps.get('type')}\n              ${notificationProps.get('context')} {\n                ${keyValueProps.get('key')}\n                ${keyValueProps.get('value')}\n              }\n              ${notificationProps.get('redirectContext')} {\n                ${keyValueProps.get('key')}\n                ${keyValueProps.get('value')}\n              }\n            }\n        }\n    }\n      `,\n    variables: {},\n  };\n}\n\nexport function GET_NOTIFICATIONS_COUNT(filters: NotificationFilter): GraphQueryPayload {\n  const where = computeFilters(filters);\n  return {\n    query: Apollo_gql`\n      query Notifications {\n          notifications(${where}, order: { isNew: DESC, date: DESC }, ${graphQlTake(filters?.take)}) {\n              ${graphQlPaginationFields()}\n          }\n      }\n    `,\n    variables: {},\n  };\n}\n\nexport function READ_NOTIFICATION(id: string): GraphMutationPayload {\n  return {\n    mutation: Apollo_gql`\n      mutation NotificationRead($id: UUID!) {\n        notificationRead(notificationId: $id) {\n            ${notificationProps.get('id')}\n            ${notificationProps.get('isNew')}\n        }\n      }\n    `,\n    variables: {\n      id,\n    },\n  };\n}\n\nfunction computeFilters(filters: NotificationFilter): string {\n  const clause: string[] = [];\n  if (filters) {\n    if (filters.projectId) {\n      clause.push(`projectId: { eq: ${filters.projectId} }`);\n    }\n    if (isNonNullable(filters.isNew)) {\n      clause.push(`isNew: { eq: ${filters.isNew} }`);\n    }\n  }\n\n  return `where: { ${clause.join(',')} }`;\n}\n","import { Injectable, TemplateRef } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nexport type RoutingType = 'project' | 'invoice' | 'quotationVersion' | 'task';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaNotificationSharedService {\n  public paymentStatusTemplate: TemplateRef<any> | null = null;\n  public projectStatusTemplate: TemplateRef<any> | null = null;\n\n  public getProjects$: ((ids: string[]) => Observable<{ id: string; name: string }[]>) | null = null;\n\n  public routing: { [index in RoutingType]: (data: any) => void } | null = null;\n\n  constructor() {}\n}\n","import { Injectable } from '@angular/core';\n\nimport { map, of, switchMap } from 'rxjs';\n\nimport { GraphEndpoint, HandleComplexRequest, TaBaseService } from '@ta/server';\nimport { getUniqueArray } from '@ta/utils';\n\nimport { NotificationDto } from './dto/notification';\nimport { GET_NOTIFICATIONS, GET_NOTIFICATIONS_COUNT, NotificationFilter, READ_NOTIFICATION } from './queries';\nimport { TaNotificationSharedService } from './shared.service';\n\nconst graphEndpoint: GraphEndpoint = {\n  clientName: 'notificationService',\n  endpoint: 'notification',\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaNotificationDataService extends TaBaseService {\n  public list = new HandleComplexRequest<NotificationDto[]>();\n\n  public count = new HandleComplexRequest<number>();\n\n  constructor(private _sharedService: TaNotificationSharedService) {\n    super();\n\n    this._graphService.registerGraphEndpoint(graphEndpoint);\n  }\n\n  public fetchNotifications$(filters: NotificationFilter) {\n    return this.list.fetch(\n      this.computeKey(filters),\n      this._graphService\n        .fetchPagedQueryList<NotificationDto>(GET_NOTIFICATIONS(filters), 'notifications', graphEndpoint.clientName)\n        .pipe(\n          map(data => data.items ?? []),\n          switchMap(entities => {\n            if (!this._sharedService.getProjects$) {\n              return of(entities);\n            }\n            return this._sharedService.getProjects$(getUniqueArray(entities.map(entity => entity.projectId))).pipe(\n              map(projects =>\n                entities.map(entity => ({\n                  ...entity,\n                  ...{\n                    project: projects.find(project => project.id === entity.projectId),\n                  },\n                }))\n              )\n            );\n          })\n        )\n    );\n  }\n\n  public fetchNumberOfNotifications$(filters: NotificationFilter) {\n    return this.count.fetch(\n      this.computeKey(filters),\n      this._graphService\n        .fetchPagedQueryList(GET_NOTIFICATIONS_COUNT(filters), 'notifications', graphEndpoint.clientName)\n        .pipe(map(data => data.totalCount))\n    );\n  }\n\n  public isRead$(id: string) {\n    return this._graphService.mutate<boolean>(READ_NOTIFICATION(id), 'notificationRead', graphEndpoint.clientName);\n  }\n\n  public computeKey(filters?: NotificationFilter) {\n    if (!filters) {\n      return 'all';\n    }\n\n    return `${filters.projectId}-${filters.isNew}-${filters.take}`;\n  }\n}\n","import { Component, Input, inject } from '@angular/core';\n\nimport { KeyValue } from '@ta/server';\n\nimport { TaNotificationDataService } from '../../../../services/data.service';\nimport { NotificationDto } from '../../../../services/dto/notification';\nimport { TaNotificationSharedService } from '../../../../services/shared.service';\n\n@Component({ template: '' })\nexport abstract class AbstractNotificationTemplateComponent {\n  @Input()\n  notification!: NotificationDto;\n\n  public sharedService = inject(TaNotificationSharedService);\n  public dataService = inject(TaNotificationDataService);\n\n  public goTo() {\n    this.dataService.isRead$(this.notification.id).subscribe();\n  }\n\n  public getTranslation() {\n    return (<KeyValue[]>this.notification.context).reduce<{\n      [index: string]: string | number;\n    }>((acc, item) => {\n      acc[item.key as string] = item.value;\n      return acc;\n    }, {});\n  }\n\n  public extractContext(key: string) {\n    return (<KeyValue[]>this.notification.context).find(item => item.key === key)?.value ?? '';\n  }\n\n  public extractredirectContext(key: string) {\n    return (<KeyValue[]>this.notification.redirectContext).find(item => item.key === key)?.value ?? '';\n  }\n}\n","import { ENotificationLevel } from '../../../../services/dto/level';\nimport { Component, Input } from '@angular/core';\nimport { FontIconComponent } from '@ta/icons';\n\n@Component({\n  selector: 'ta-notification-item-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss'],\n  standalone: true,\n  imports: [\n    FontIconComponent\n  ],\n})\nexport class IconComponent {\n  @Input()\n  level!: ENotificationLevel;\n\n  @Input()\n  icon!: string;\n}\n","<div class=\"icon-container\">\n  <ta-font-icon [name]=\"this.icon\"></ta-font-icon>\n</div>\n","import { NotificationDto } from '../../../services/dto/notification';\nimport { Component, Input } from '@angular/core';\nimport { TimeAgoComponent } from '@ta/ui';\n\n@Component({\n  selector: 'ta-notification-item',\n  templateUrl: './item.component.html',\n  styleUrls: ['./item.component.scss'],\n  standalone: true,\n  imports: [\n    TimeAgoComponent\n  ],\n})\nexport class ItemComponent {\n  @Input()\n  notification!: NotificationDto;\n}\n","<div class=\"item-container\" [class.new]=\"this.notification.isNew\">\n  <div>\n    <ng-content select=\"ta-notification-item-icon\"></ng-content>\n  </div>\n  <div class=\"full-width\">\n    <div class=\"space-between\">\n      <div class=\"tenant-name\">{{ this.notification.tenantName }}</div>\n\n      <div class=\"extra-info\">\n        <ta-time-ago [date]=\"this.notification.date\"></ta-time-ago>\n      </div>\n    </div>\n    <div class=\"title\">\n      <ng-content select=\"ta-notification-item-title\"></ng-content>\n    </div>\n    <div class=\"cta-container space-between\">\n      <div class=\"info\">\n        <div>\n          <ng-content select=\"ta-notification-item-info\"></ng-content>\n        </div>\n        <div class=\"project-name\">\n          {{ this.notification.project?.name }}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ta-notification-item-title',\n  templateUrl: './title.component.html',\n  styleUrls: ['./title.component.scss'],\n  standalone: true,\n  imports: [],\n})\nexport class NotificationTitleComponent {}\n","<ng-content></ng-content>\n","import { AbstractNotificationTemplateComponent } from '../abstract';\nimport { IconComponent } from '../../icon/icon.component';\nimport { ItemComponent } from '../../item.component';\nimport { NotificationTitleComponent } from '../../title/title.component';\nimport { NgIf, NgTemplateOutlet } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { KeyValue } from '@ta/server';\n\n@Component({\n  selector: 'ta-invoice-payment-status-changed',\n  templateUrl: './invoice-payment-status-changed.component.html',\n  styleUrls: ['./invoice-payment-status-changed.component.scss'],\n  standalone: true,\n  imports: [\n    IconComponent,\n    ItemComponent,\n    NgIf,\n    NgTemplateOutlet,\n    NotificationTitleComponent,\n    TranslateModule\n  ],\n})\nexport class InvoicePaymentStatusChangedComponent extends AbstractNotificationTemplateComponent {\n  public template = this.sharedService.paymentStatusTemplate;\n  get paymentStatus() {\n    return (<KeyValue[]>this.notification.context).find(item => item.key === 'PaymentStatus')?.value ?? 0;\n  }\n  override goTo() {\n    if (!this.sharedService.routing || !this.sharedService.routing.invoice) {\n      return;\n    }\n    super.goTo();\n    this.sharedService.routing?.invoice({\n      projectId: this.extractredirectContext('ProjectId'),\n      invoiceId: this.extractredirectContext('InvoiceId'),\n    });\n  }\n}\n","<ta-notification-item [notification]=\"this.notification\" (click)=\"this.goTo()\">\n  <ta-notification-item-title>\n    <div class=\"flex-row g-space-sm\">\n      {{ 'notification.items.invoice-payment-status-changed.title' | translate: this.getTranslation() }}\n      <div class=\"flex\">\n        @if (this.template) {\n          <ng-container\n            [ngTemplateOutlet]=\"this.template\"\n            [ngTemplateOutletContext]=\"{\n              data: this.paymentStatus,\n            }\"\n          ></ng-container>\n        }\n      </div>\n    </div>\n  </ta-notification-item-title>\n  <ta-notification-item-icon icon=\"bills\"></ta-notification-item-icon>\n</ta-notification-item>\n","import { AbstractNotificationTemplateComponent } from '../abstract';\nimport { IconComponent } from '../../icon/icon.component';\nimport { ItemComponent } from '../../item.component';\nimport { NotificationTitleComponent } from '../../title/title.component';\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'ta-new-invoice',\n  templateUrl: './new-invoice.component.html',\n  styleUrls: ['./new-invoice.component.scss'],\n  standalone: true,\n  imports: [\n    IconComponent,\n    ItemComponent,\n    NotificationTitleComponent,\n    TranslateModule\n  ],\n})\nexport class NewInvoiceComponent extends AbstractNotificationTemplateComponent {\n  override goTo() {\n    if (!this.sharedService.routing || !this.sharedService.routing.invoice) {\n      return;\n    }\n    super.goTo();\n    this.sharedService.routing?.invoice({\n      projectId: this.extractredirectContext('ProjectId'),\n      invoiceId: this.extractredirectContext('InvoiceId'),\n    });\n  }\n}\n","<ta-notification-item [notification]=\"this.notification\" (click)=\"this.goTo()\">\n  <ta-notification-item-title>\n    {{ 'notification.items.new-invoice.title' | translate: this.getTranslation() }}\n  </ta-notification-item-title>\n  <ta-notification-item-icon icon=\"bills\"></ta-notification-item-icon>\n</ta-notification-item>\n","import { AbstractNotificationTemplateComponent } from '../abstract';\nimport { IconComponent } from '../../icon/icon.component';\nimport { ItemComponent } from '../../item.component';\nimport { NotificationTitleComponent } from '../../title/title.component';\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'ta-new-quotation-version',\n  templateUrl: './new-quotation-version.component.html',\n  styleUrls: ['./new-quotation-version.component.scss'],\n  standalone: true,\n  imports: [\n    IconComponent,\n    ItemComponent,\n    NotificationTitleComponent,\n    TranslateModule\n  ],\n})\nexport class NewQuotationVersionComponent extends AbstractNotificationTemplateComponent {\n  override goTo() {\n    if (!this.sharedService.routing || !this.sharedService.routing.quotationVersion) {\n      return;\n    }\n    super.goTo();\n    this.sharedService.routing?.quotationVersion({\n      projectId: this.extractredirectContext('ProjectId'),\n      quotationId: this.extractredirectContext('QuotationId'),\n      quotationVersionId: this.extractredirectContext('QuotationVersionId'),\n    });\n  }\n}\n","<ta-notification-item [notification]=\"this.notification\" (click)=\"this.goTo()\">\n  <ta-notification-item-title>\n    {{ 'notification.items.new-quotation-version.title' | translate: this.getTranslation() }}\n  </ta-notification-item-title>\n  <ta-notification-item-icon icon=\"article-line\"></ta-notification-item-icon>\n</ta-notification-item>\n","import { AbstractNotificationTemplateComponent } from '../abstract';\nimport { IconComponent } from '../../icon/icon.component';\nimport { ItemComponent } from '../../item.component';\nimport { NotificationTitleComponent } from '../../title/title.component';\nimport { NgIf, NgTemplateOutlet } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'ta-notification-project-status-changed',\n  templateUrl: './project-status-changed.component.html',\n  styleUrls: ['./project-status-changed.component.scss'],\n  standalone: true,\n  imports: [\n    IconComponent,\n    ItemComponent,\n    NgIf,\n    NgTemplateOutlet,\n    NotificationTitleComponent,\n    TranslateModule\n  ],\n})\nexport class ProjectStatusChangedComponent extends AbstractNotificationTemplateComponent {\n  public template = this.sharedService.projectStatusTemplate;\n  get projectStatus() {\n    return Number(this.extractContext('ProjectStatus'));\n  }\n\n  override goTo() {\n    if (!this.sharedService.routing || !this.sharedService.routing.project) {\n      return;\n    }\n    super.goTo();\n    this.sharedService.routing.project({\n      projectId: this.extractredirectContext('ProjectId'),\n    });\n  }\n}\n","<ta-notification-item [notification]=\"this.notification\" (click)=\"this.goTo()\">\n  <ta-notification-item-title>\n    <div class=\"flex-row g-space-sm\">\n      {{ 'notification.items.project-status-changed.title' | translate: this.getTranslation() }}\n      <div class=\"d-flex\">\n        @if (this.template) {\n          <ng-container\n            [ngTemplateOutlet]=\"this.template\"\n            [ngTemplateOutletContext]=\"{\n              data: this.projectStatus,\n            }\"\n          ></ng-container>\n        }\n      </div>\n    </div>\n  </ta-notification-item-title>\n  <ta-notification-item-icon icon=\"projects\"></ta-notification-item-icon>\n</ta-notification-item>\n","import { AbstractNotificationTemplateComponent } from '../abstract';\nimport { IconComponent } from '../../icon/icon.component';\nimport { ItemComponent } from '../../item.component';\nimport { NotificationTitleComponent } from '../../title/title.component';\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'ta-task-assigned',\n  templateUrl: './task-assigned.component.html',\n  styleUrls: ['./task-assigned.component.scss'],\n  standalone: true,\n  imports: [\n    IconComponent,\n    ItemComponent,\n    NotificationTitleComponent,\n    TranslateModule\n  ],\n})\nexport class TaskAssignedComponent extends AbstractNotificationTemplateComponent {\n  override goTo() {\n    if (!this.sharedService.routing || !this.sharedService.routing.task) {\n      return;\n    }\n    super.goTo();\n    this.sharedService.routing?.task({\n      taskId: this.extractredirectContext('TaskId'),\n    });\n  }\n}\n","<ta-notification-item [notification]=\"this.notification\" (click)=\"this.goTo()\">\n  <ta-notification-item-title>\n    {{ 'notification.items.task-assigned.title' | translate: this.getTranslation() }}\n  </ta-notification-item-title>\n  <ta-notification-item-icon icon=\"tasks\"></ta-notification-item-icon>\n</ta-notification-item>\n","import { AbstractNotificationTemplateComponent } from '../abstract';\nimport { IconComponent } from '../../icon/icon.component';\nimport { ItemComponent } from '../../item.component';\nimport { NotificationTitleComponent } from '../../title/title.component';\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'ta-task-due-today',\n  templateUrl: './task-due-today.component.html',\n  styleUrls: ['./task-due-today.component.scss'],\n  standalone: true,\n  imports: [\n    IconComponent,\n    ItemComponent,\n    NotificationTitleComponent,\n    TranslateModule\n  ],\n})\nexport class TaskDueTodayComponent extends AbstractNotificationTemplateComponent {\n  override goTo() {\n    if (!this.sharedService.routing || !this.sharedService.routing.task) {\n      return;\n    }\n    super.goTo();\n    this.sharedService.routing?.task({\n      taskId: this.extractredirectContext('TaskId'),\n    });\n  }\n}\n","<ta-notification-item [notification]=\"this.notification\" (click)=\"this.goTo()\">\n  <ta-notification-item-title>\n    {{ 'notification.items.task-due-today.title' | translate: this.getTranslation() }}\n  </ta-notification-item-title>\n  <ta-notification-item-icon icon=\"tasks\"></ta-notification-item-icon>\n</ta-notification-item>\n","import { AbstractNotificationTemplateComponent } from '../abstract';\nimport { IconComponent } from '../../icon/icon.component';\nimport { ItemComponent } from '../../item.component';\nimport { NotificationTitleComponent } from '../../title/title.component';\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'ta-task-new-activity',\n  templateUrl: './task-new-activity.component.html',\n  styleUrls: ['./task-new-activity.component.scss'],\n  standalone: true,\n  imports: [\n    IconComponent,\n    ItemComponent,\n    NotificationTitleComponent,\n    TranslateModule\n  ],\n})\nexport class TaskNewActivityComponent extends AbstractNotificationTemplateComponent {\n  override goTo() {\n    if (!this.sharedService.routing || !this.sharedService.routing.task) {\n      return;\n    }\n    super.goTo();\n    this.sharedService.routing?.task({\n      taskId: this.extractredirectContext('TaskId'),\n    });\n  }\n}\n","<ta-notification-item [notification]=\"this.notification\" (click)=\"this.goTo()\">\n  <ta-notification-item-title>\n    {{ 'notification.items.task-new-activity.title' | translate: this.getTranslation() }}\n  </ta-notification-item-title>\n  <ta-notification-item-icon icon=\"tasks\"></ta-notification-item-icon>\n</ta-notification-item>\n","import { AbstractNotificationTemplateComponent } from '../abstract';\nimport { IconComponent } from '../../icon/icon.component';\nimport { ItemComponent } from '../../item.component';\nimport { NotificationTitleComponent } from '../../title/title.component';\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'ta-to-do-assigned',\n  templateUrl: './to-do-assigned.component.html',\n  styleUrls: ['./to-do-assigned.component.scss'],\n  standalone: true,\n  imports: [\n    IconComponent,\n    ItemComponent,\n    NotificationTitleComponent,\n    TranslateModule\n  ],\n})\nexport class ToDoAssignedComponent extends AbstractNotificationTemplateComponent {\n  override goTo() {\n    if (!this.sharedService.routing || !this.sharedService.routing.task) {\n      return;\n    }\n    super.goTo();\n    this.sharedService.routing?.task({\n      taskId: this.extractredirectContext('TaskId'),\n    });\n  }\n}\n","<ta-notification-item [notification]=\"this.notification\" (click)=\"this.goTo()\">\n  <ta-notification-item-title>\n    {{ 'notification.items.to-do-assigned.title' | translate: this.getTranslation() }}\n  </ta-notification-item-title>\n  <ta-notification-item-icon icon=\"tasks\"></ta-notification-item-icon>\n</ta-notification-item>\n","import { AbstractNotificationTemplateComponent } from '../abstract';\nimport { IconComponent } from '../../icon/icon.component';\nimport { ItemComponent } from '../../item.component';\nimport { NotificationTitleComponent } from '../../title/title.component';\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'ta-to-do-due-today',\n  templateUrl: './to-do-due-today.component.html',\n  styleUrls: ['./to-do-due-today.component.scss'],\n  standalone: true,\n  imports: [\n    IconComponent,\n    ItemComponent,\n    NotificationTitleComponent,\n    TranslateModule\n  ],\n})\nexport class ToDoDueTodayComponent extends AbstractNotificationTemplateComponent {\n  override goTo() {\n    if (!this.sharedService.routing || !this.sharedService.routing.task) {\n      return;\n    }\n    super.goTo();\n    this.sharedService.routing?.task({\n      taskId: this.extractredirectContext('TaskId'),\n    });\n  }\n}\n","<ta-notification-item [notification]=\"this.notification\" (click)=\"this.goTo()\">\n  <ta-notification-item-title>\n    {{ 'notification.items.to-do-due-today.title' | translate: this.getTranslation() }}\n  </ta-notification-item-title>\n  <ta-notification-item-icon icon=\"tasks\"></ta-notification-item-icon>\n</ta-notification-item>\n","import { AbstractNotificationTemplateComponent } from '../abstract';\nimport { IconComponent } from '../../icon/icon.component';\nimport { ItemComponent } from '../../item.component';\nimport { NotificationTitleComponent } from '../../title/title.component';\nimport { Component } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'ta-user-tagged-in-conversation',\n  templateUrl: './user-tagged-in-conversation.component.html',\n  styleUrls: ['./user-tagged-in-conversation.component.scss'],\n  standalone: true,\n  imports: [\n    IconComponent,\n    ItemComponent,\n    NotificationTitleComponent,\n    TranslateModule\n  ],\n})\nexport class UserTaggedInConversationComponent extends AbstractNotificationTemplateComponent {\n  override goTo() {\n    if (!this.sharedService.routing || !this.sharedService.routing.task) {\n      return;\n    }\n    super.goTo();\n    this.sharedService.routing?.task({\n      taskId: this.extractredirectContext('TaskId'),\n    });\n  }\n}\n","<ta-notification-item [notification]=\"this.notification\" (click)=\"this.goTo()\">\n  <ta-notification-item-title>\n    {{ 'notification.items.user-tagged-in-conversation.title' | translate: this.getTranslation() }}\n  </ta-notification-item-title>\n  <ta-notification-item-icon icon=\"tasks\"></ta-notification-item-icon>\n</ta-notification-item>\n","import { AsyncPipe, NgFor } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Component, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\n\nimport { Observable, tap } from 'rxjs';\n\nimport { EmptyComponent, ErrorComponent, LoaderComponent } from '@ta/ui';\nimport { TaBaseComponent } from '@ta/utils';\n\nimport { TaNotificationDataService } from '../../services/data.service';\nimport { NotificationFilter } from '../../services/queries';\nimport { RoutingType, TaNotificationSharedService } from '../../services/shared.service';\nimport { InvoicePaymentStatusChangedComponent } from '../items/item/template/invoice-payment-status-changed/invoice-payment-status-changed.component';\nimport { NewInvoiceComponent } from '../items/item/template/new-invoice/new-invoice.component';\nimport { NewQuotationVersionComponent } from '../items/item/template/new-quotation-version/new-quotation-version.component';\nimport { ProjectStatusChangedComponent } from '../items/item/template/project-status-changed/project-status-changed.component';\nimport { TaskAssignedComponent } from '../items/item/template/task-assigned/task-assigned.component';\nimport { TaskDueTodayComponent } from '../items/item/template/task-due-today/task-due-today.component';\nimport { TaskNewActivityComponent } from '../items/item/template/task-new-activity/task-new-activity.component';\nimport { ToDoAssignedComponent } from '../items/item/template/to-do-assigned/to-do-assigned.component';\nimport { ToDoDueTodayComponent } from '../items/item/template/to-do-due-today/to-do-due-today.component';\nimport { UserTaggedInConversationComponent } from '../items/item/template/user-tagged-in-conversation/user-tagged-in-conversation.component';\n\n@Component({\n  selector: 'ta-notification-container',\n  templateUrl: './container.component.html',\n  styleUrls: ['./container.component.scss'],\n  standalone: true,\n  imports: [\n    AsyncPipe,\n    EmptyComponent,\n    ErrorComponent,\n    InvoicePaymentStatusChangedComponent,\n    LoaderComponent,\n    NewInvoiceComponent,\n    NewQuotationVersionComponent,\n    NgFor,\n    ProjectStatusChangedComponent,\n    TaskAssignedComponent,\n    TaskDueTodayComponent,\n    TaskNewActivityComponent,\n    ToDoAssignedComponent,\n    ToDoDueTodayComponent,\n    UserTaggedInConversationComponent,\n  ],\n})\nexport class ContainerComponent extends TaBaseComponent implements OnInit {\n  @Input()\n  filters: NotificationFilter = null;\n\n  @Input()\n  templates: {\n    paymentStatus: TemplateRef<any>;\n    projectStatus: TemplateRef<any>;\n  } | null = null;\n\n  @Input()\n  services: {\n    getProjects$: (ids: string[]) => Observable<{ id: string; name: string }[]>;\n  } | null = null;\n\n  @Input()\n  routing: { [index in RoutingType]: (data: any) => void } | null = null;\n\n  @Output()\n  nbChanged: EventEmitter<number> = new EventEmitter();\n\n  get notifications$() {\n    return this._notificationDataService.list\n      .get$(this._notificationDataService.computeKey(this.filters))\n      .pipe(tap(list => this.nbChanged.emit(list.length)));\n  }\n  constructor(\n    private _notificationDataService: TaNotificationDataService,\n    private _sharedService: TaNotificationSharedService\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.requestState.asked();\n    this._registerSubscription(\n      this._notificationDataService.fetchNotifications$(this.filters).subscribe({\n        complete: () => this.requestState.completed(),\n        error: (error: HttpErrorResponse) => {\n          this.requestState.onError(error.status, error.statusText);\n        },\n      })\n    );\n\n    if (this.templates) {\n      this._sharedService.paymentStatusTemplate = this.templates?.paymentStatus;\n      this._sharedService.projectStatusTemplate = this.templates?.projectStatus;\n    }\n    if (this.services) {\n      this._sharedService.getProjects$ = this.services.getProjects$;\n    }\n    if (this.routing) {\n      this._sharedService.routing = this.routing;\n    }\n  }\n}\n","<ta-loader [isLoading]=\"this.requestState.isLoading()\" *ngLet=\"this.notifications$ | async as notifications\">\n  <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n    <ta-empty\n      [isEmpty]=\"!notifications || notifications.length === 0\"\n      icon=\"ghost\"\n      [isLight]=\"false\"\n      text=\"notification.empty\"\n    >\n      <div class=\"notification-container\">\n        @for (notif of this.notifications; track notif) {\n          <div class=\"item-container c-pointer\">\n            @switch (notif.type) {\n              @case ('ProjectStatusChanged') {\n                <ta-notification-project-status-changed [notification]=\"notif\"></ta-notification-project-status-changed>\n              }\n              @case ('NewQuotationVersion') {\n                <ta-new-quotation-version [notification]=\"notif\"></ta-new-quotation-version>\n              }\n              @case ('NewInvoice') {\n                <ta-new-invoice [notification]=\"notif\"></ta-new-invoice>\n              }\n              @case ('InvoicePaymentStatusChanged') {\n                <ta-invoice-payment-status-changed [notification]=\"notif\"></ta-invoice-payment-status-changed>\n              }\n              @case ('TaskAssigned') {\n                <ta-task-assigned [notification]=\"notif\"></ta-task-assigned>\n              }\n              @case ('ToDoAssigned') {\n                <ta-to-do-assigned [notification]=\"notif\"></ta-to-do-assigned>\n              }\n              @case ('TaskDueToday') {\n                <ta-task-due-today [notification]=\"notif\"></ta-task-due-today>\n              }\n              @case ('ToDoDueToday') {\n                <ta-to-do-due-today [notification]=\"notif\"></ta-to-do-due-today>\n              }\n              @case ('TaskNewActivity') {\n                <ta-task-new-activity [notification]=\"notif\"></ta-task-new-activity>\n              }\n              @case ('UserTaggedInConversation') {\n                <ta-user-tagged-in-conversation [notification]=\"notif\"></ta-user-tagged-in-conversation>\n              }\n            }\n          </div>\n        }\n      </div>\n    </ta-empty>\n  </ta-error>\n</ta-loader>\n","import { AsyncPipe } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Component, Input, OnInit } from '@angular/core';\n\nimport { BulletComponent as TaBulletComponent } from '@ta/ui';\nimport { TaBaseComponent } from '@ta/utils';\n\nimport { TaNotificationDataService } from '../../services/data.service';\nimport { NotificationFilter } from '../../services/queries';\n\n@Component({\n  selector: 'ta-notification-bullet',\n  templateUrl: './bullet.component.html',\n  styleUrls: ['./bullet.component.scss'],\n  standalone: true,\n  imports: [AsyncPipe, TaBulletComponent],\n})\nexport class BulletComponent extends TaBaseComponent implements OnInit {\n  @Input()\n  filters: NotificationFilter = null;\n\n  get number$() {\n    return this._notificationDataService.count.get$(this._notificationDataService.computeKey(this.filters));\n  }\n\n  constructor(private _notificationDataService: TaNotificationDataService) {\n    super();\n  }\n\n  ngOnInit() {\n    this.requestState.asked();\n    this._notificationDataService.fetchNumberOfNotifications$(this.filters).subscribe({\n      complete: () => this.requestState.completed(),\n      error: (error: HttpErrorResponse) => {\n        this.requestState.onError(error.status, error.statusText);\n      },\n    });\n  }\n}\n","<ta-bullet type=\"notif\" size=\"md\">\n  {{ this.number$ | async }}\n</ta-bullet>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ta-item-info',\n  templateUrl: './info.component.html',\n  styleUrls: ['./info.component.scss'],\n  standalone: true,\n  imports: [],\n})\nexport class ItemInfoComponent {}\n","<ng-content></ng-content>\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { TaIconsModule } from '@ta/icons';\nimport { TranslatePipe } from '@ta/translation';\nimport { TaContainerModule, TaUiModule } from '@ta/ui';\nimport { TaDirectivePipeModule } from '@ta/utils';\n\nimport { BulletComponent } from './components/bullet/bullet.component';\nimport { ContainerComponent } from './components/container/container.component';\nimport { IconComponent } from './components/items/item/icon/icon.component';\nimport { ItemInfoComponent } from './components/items/item/info/info.component';\nimport { ItemComponent } from './components/items/item/item.component';\nimport { InvoicePaymentStatusChangedComponent } from './components/items/item/template/invoice-payment-status-changed/invoice-payment-status-changed.component';\nimport { NewInvoiceComponent } from './components/items/item/template/new-invoice/new-invoice.component';\nimport { NewQuotationVersionComponent } from './components/items/item/template/new-quotation-version/new-quotation-version.component';\nimport { ProjectStatusChangedComponent } from './components/items/item/template/project-status-changed/project-status-changed.component';\nimport { TaskAssignedComponent } from './components/items/item/template/task-assigned/task-assigned.component';\nimport { TaskDueTodayComponent } from './components/items/item/template/task-due-today/task-due-today.component';\nimport { TaskNewActivityComponent } from './components/items/item/template/task-new-activity/task-new-activity.component';\nimport { ToDoAssignedComponent } from './components/items/item/template/to-do-assigned/to-do-assigned.component';\nimport { ToDoDueTodayComponent } from './components/items/item/template/to-do-due-today/to-do-due-today.component';\nimport { UserTaggedInConversationComponent } from './components/items/item/template/user-tagged-in-conversation/user-tagged-in-conversation.component';\nimport { NotificationTitleComponent } from './components/items/item/title/title.component';\nimport { NotificationBoxComponent } from './components/popup/box/notification-box.component';\nimport { NotificationInlineComponent } from './components/popup/inline/notification-inline.component';\nimport { TaNotificationDataService } from './services/data.service';\nimport { LAZY_SERVICE_TOKEN, TaNotificationService } from './services/notification.service';\nimport { TaNotificationSharedService } from './services/shared.service';\nimport { TaTranslationNotification } from './translation.service';\n\n/**\n * @deprecated Use standalone components instead.\n * This module will be removed in a future version.\n *\n * @example\n * // Instead of importing the module:\n * // import { TaNotificationModule } from '@ta/library-name';\n *\n * // Import the standalone components directly:\n * import { NotificationInlineComponent, ContainerComponent, BulletComponent } from '@ta/library-name';\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    TaDirectivePipeModule,\n    TaIconsModule,\n    TaUiModule,\n    TaContainerModule,\n    TranslatePipe,\n    NotificationBoxComponent,\n    NotificationInlineComponent,\n    ContainerComponent,\n    ItemComponent,\n    IconComponent,\n    ItemInfoComponent,\n    ProjectStatusChangedComponent,\n    NewQuotationVersionComponent,\n    NewInvoiceComponent,\n    InvoicePaymentStatusChangedComponent,\n    NotificationTitleComponent,\n    TaskAssignedComponent,\n    ToDoAssignedComponent,\n    TaskDueTodayComponent,\n    ToDoDueTodayComponent,\n    TaskNewActivityComponent,\n    UserTaggedInConversationComponent,\n    BulletComponent,\n  ],\n  declarations: [],\n  exports: [NotificationInlineComponent, ContainerComponent, BulletComponent, NotificationBoxComponent],\n})\nexport class TaNotificationModule {\n  static forRoot(): ModuleWithProviders<TaNotificationModule> {\n    return {\n      ngModule: TaNotificationModule,\n      providers: [\n        { provide: LAZY_SERVICE_TOKEN, useExisting: TaNotificationService },\n        TaNotificationDataService,\n        TaNotificationSharedService,\n      ],\n    };\n  }\n  constructor() {\n    TaTranslationNotification.getInstance();\n  }\n}\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: [],\n})\nexport class TaNotificationProvider {\n  static forRoot(): ModuleWithProviders<TaNotificationProvider> {\n    return {\n      ngModule: TaNotificationProvider,\n      providers: [\n        { provide: LAZY_SERVICE_TOKEN, useExisting: TaNotificationService },\n        TaNotificationDataService,\n        TaNotificationSharedService,\n      ],\n    };\n  }\n}\n","/*\n * Public API Surface of notification\n */\n\nexport * from './lib/components/public-api';\n\nexport * from './lib/enum';\n\nexport * from './lib/services/notification.service';\n\nexport * from './lib/notification.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.TaNotificationService","i1.TaNotificationSharedService","tap","i1.TaNotificationDataService","i2.TaNotificationSharedService","TaBulletComponent"],"mappings":"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"}