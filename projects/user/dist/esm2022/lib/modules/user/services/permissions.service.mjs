import { Injectable } from '@angular/core';
import { Logger } from '@ta/server';
import { isNonNullable } from '@ta/utils';
import { BehaviorSubject, filter, map } from 'rxjs';
import { Permissions } from './permissions';
import * as i0 from "@angular/core";
const accessLevels = ['reader', 'contributor', 'administrator'];
export class CamPermissionsService {
    get received() {
        return this._updated$.value !== null;
    }
    constructor() {
        this._updated$ = new BehaviorSubject(null);
        this._isFill = { permissions: false, isAuthenticated: false };
        this.features = [];
        this.guards = {};
        this.roles = [];
        this.isAuthenticated = false;
        this.updated$ = this._updated$.pipe(filter(isNonNullable));
    }
    set(info, isAuthenticated) {
        Logger.LogInfo('[PERMISSIONS] List brut:', info.permissions);
        this.features = info.features || [];
        this.roles = info.roles || [];
        this.guards = info.roles
            .map(role => role.replace('Merlin_', ''))
            .reduce((acc, role) => {
            if (!role.includes('-')) {
                return acc;
            }
            const [domain, access] = role.split('-');
            const lastAccess = accessLevels.indexOf(access) > accessLevels.indexOf(acc[domain] || '') ? access : acc[domain];
            return {
                ...acc,
                [domain]: lastAccess,
            };
        }, {});
        Logger.LogInfo('[PERMISSIONS] Guard', this.guards);
        this._isFill.permissions = true;
        this.setSilentAuthenticated(isAuthenticated);
        Permissions.set(info, isAuthenticated);
        this._canYouUpdate();
    }
    setSilentAuthenticated(isAuthenticated) {
        this.isAuthenticated = isAuthenticated;
        this._isFill.isAuthenticated = true;
        Permissions.setSilentAuthenticated(isAuthenticated);
        this._canYouUpdate();
    }
    setAuthenticated(isAuthenticated) {
        this.isAuthenticated = isAuthenticated;
        Permissions.setAuthenticated(isAuthenticated);
        this._updated$.next(Date.now());
    }
    hasRole(role) {
        return this.roles.some(x => x === role);
    }
    canDirectAccess(feature, level) {
        if (level === 'authenticated') {
            return this.isAuthenticated;
        }
        if (level === 'authorize') {
            return this.features.includes(feature);
        }
        if (!feature) {
            return Permissions.canDirectAccess(feature, level);
        }
        const featureGuard = this.guards[feature];
        if (!featureGuard) {
            return Permissions.canDirectAccess(feature, level);
        }
        return accessLevels.indexOf(featureGuard) >= accessLevels.indexOf(level);
    }
    canAccess$(feature, level) {
        return this._updated$.pipe(map(() => this.canDirectAccess(feature, level)));
    }
    _canYouUpdate() {
        if (!this._isFill.isAuthenticated || !this._isFill.permissions) {
            return;
        }
        this._updated$.next(Date.now());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamPermissionsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamPermissionsService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamPermissionsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,