import { map } from 'rxjs/operators';
import { Logger } from '@ta/server';
import { isNonNullable } from '@ta/utils';
import { BehaviorSubject, filter } from 'rxjs';
/** @deprecated */
export class PermissionsCore {
    get received() {
        return this._updated$.value !== null;
    }
    constructor() {
        this._updated$ = new BehaviorSubject(null);
        this._isFill = { permissions: false, isAuthenticated: false };
        this.guards = {};
        this.roles = [];
        this.isAuthenticated = false;
        this.updated$ = this._updated$.pipe(filter(isNonNullable));
    }
    set(info, isAuthenticated) {
        Logger.LogInfo('[PERMISSIONS] List brut:', info.permissions);
        this.guards = {};
        if (info.permissions) {
            for (let perm of info.permissions) {
                const access = perm.split(':');
                if (!this.guards[access[1]]) {
                    this.guards[access[1]] = [];
                }
                this.guards[access[1]].push(access[0]);
            }
        }
        this.roles = info.roles || [];
        this._isFill.permissions = true;
        this.setSilentAuthenticated(isAuthenticated);
        this._canYouUpdate();
        Logger.LogInfo('[PERMISSIONS] List:', this.guards, this.roles);
    }
    setSilentAuthenticated(isAuthenticated) {
        this.isAuthenticated = isAuthenticated;
        this._isFill.isAuthenticated = true;
        this._canYouUpdate();
    }
    setAuthenticated(isAuthenticated) {
        this.isAuthenticated = isAuthenticated;
        this._updated$.next(Date.now());
    }
    hasRole(role) {
        return this.roles.some(x => x.includes(role));
    }
    canDirectAccess(feature, level) {
        if (level === 'authenticated') {
            return this.isAuthenticated;
        }
        if (!feature) {
            return true;
        }
        const featureGuard = this.guards[feature];
        if (!featureGuard) {
            return false;
        }
        if (featureGuard.includes('all')) {
            return true;
        }
        if (!featureGuard.includes(level)) {
            return false;
        }
        return true;
    }
    canAccess(feature, level) {
        return this._updated$.pipe(map(() => this.canDirectAccess(feature, level)));
    }
    _canYouUpdate() {
        if (!this._isFill.isAuthenticated || !this._isFill.permissions) {
            return;
        }
        this._updated$.next(Date.now());
    }
}
/** @deprecated */
export const Permissions = new PermissionsCore();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL21vZHVsZXMvdXNlci9zZXJ2aWNlcy9wZXJtaXNzaW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTNELGtCQUFrQjtBQUNsQixNQUFNLE9BQU8sZUFBZTtJQVUxQixJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQztJQUN2QyxDQUFDO0lBRUQ7UUFiUSxjQUFTLEdBQUcsSUFBSSxlQUFlLENBQWdCLElBQUksQ0FBQyxDQUFDO1FBQ3JELFlBQU8sR0FBRyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxDQUFDO1FBRTFELFdBQU0sR0FBa0MsRUFBRSxDQUFDO1FBQzNDLFVBQUssR0FBYSxFQUFFLENBQUM7UUFDckIsb0JBQWUsR0FBWSxLQUFLLENBQUM7UUFFakMsYUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBTTlDLENBQUM7SUFFVCxHQUFHLENBQ1IsSUFHQyxFQUNELGVBQXdCO1FBRXhCLE1BQU0sQ0FBQyxPQUFPLENBQUMsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRTdELElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3JCLEtBQUss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O1FBQ1QsQ0FBQztRQUNELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDRjtBQUVELGtCQUFrQjtBQUNsQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnQHRhL3NlcnZlcic7XG5pbXBvcnQgeyBpc05vbk51bGxhYmxlIH0gZnJvbSAnQHRhL3V0aWxzJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgZmlsdGVyIH0gZnJvbSAncnhqcyc7XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25zQ29yZSB7XG4gIHByaXZhdGUgX3VwZGF0ZWQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxudW1iZXIgfCBudWxsPihudWxsKTtcbiAgcHJpdmF0ZSBfaXNGaWxsID0geyBwZXJtaXNzaW9uczogZmFsc2UsIGlzQXV0aGVudGljYXRlZDogZmFsc2UgfTtcblxuICBwdWJsaWMgZ3VhcmRzOiB7IFtpbmRleDogc3RyaW5nXTogc3RyaW5nW10gfSA9IHt9O1xuICBwdWJsaWMgcm9sZXM6IHN0cmluZ1tdID0gW107XG4gIHB1YmxpYyBpc0F1dGhlbnRpY2F0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwdWJsaWMgdXBkYXRlZCQgPSB0aGlzLl91cGRhdGVkJC5waXBlKGZpbHRlcihpc05vbk51bGxhYmxlKSk7XG5cbiAgZ2V0IHJlY2VpdmVkKCkge1xuICAgIHJldHVybiB0aGlzLl91cGRhdGVkJC52YWx1ZSAhPT0gbnVsbDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBwdWJsaWMgc2V0KFxuICAgIGluZm86IHtcbiAgICAgIHBlcm1pc3Npb25zOiBzdHJpbmdbXTtcbiAgICAgIHJvbGVzOiBzdHJpbmdbXTtcbiAgICB9LFxuICAgIGlzQXV0aGVudGljYXRlZDogYm9vbGVhblxuICApIHtcbiAgICBMb2dnZXIuTG9nSW5mbygnW1BFUk1JU1NJT05TXSBMaXN0IGJydXQ6JywgaW5mby5wZXJtaXNzaW9ucyk7XG5cbiAgICB0aGlzLmd1YXJkcyA9IHt9O1xuICAgIGlmIChpbmZvLnBlcm1pc3Npb25zKSB7XG4gICAgICBmb3IgKGxldCBwZXJtIG9mIGluZm8ucGVybWlzc2lvbnMpIHtcbiAgICAgICAgY29uc3QgYWNjZXNzID0gcGVybS5zcGxpdCgnOicpO1xuXG4gICAgICAgIGlmICghdGhpcy5ndWFyZHNbYWNjZXNzWzFdXSkge1xuICAgICAgICAgIHRoaXMuZ3VhcmRzW2FjY2Vzc1sxXV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmd1YXJkc1thY2Nlc3NbMV1dLnB1c2goYWNjZXNzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnJvbGVzID0gaW5mby5yb2xlcyB8fCBbXTtcblxuICAgIHRoaXMuX2lzRmlsbC5wZXJtaXNzaW9ucyA9IHRydWU7XG5cbiAgICB0aGlzLnNldFNpbGVudEF1dGhlbnRpY2F0ZWQoaXNBdXRoZW50aWNhdGVkKTtcblxuICAgIHRoaXMuX2NhbllvdVVwZGF0ZSgpO1xuICAgIExvZ2dlci5Mb2dJbmZvKCdbUEVSTUlTU0lPTlNdIExpc3Q6JywgdGhpcy5ndWFyZHMsIHRoaXMucm9sZXMpO1xuICB9XG5cbiAgcHVibGljIHNldFNpbGVudEF1dGhlbnRpY2F0ZWQoaXNBdXRoZW50aWNhdGVkOiBib29sZWFuKSB7XG4gICAgdGhpcy5pc0F1dGhlbnRpY2F0ZWQgPSBpc0F1dGhlbnRpY2F0ZWQ7XG4gICAgdGhpcy5faXNGaWxsLmlzQXV0aGVudGljYXRlZCA9IHRydWU7XG5cbiAgICB0aGlzLl9jYW5Zb3VVcGRhdGUoKTtcbiAgfVxuICBwdWJsaWMgc2V0QXV0aGVudGljYXRlZChpc0F1dGhlbnRpY2F0ZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IGlzQXV0aGVudGljYXRlZDtcbiAgICB0aGlzLl91cGRhdGVkJC5uZXh0KERhdGUubm93KCkpO1xuICB9XG5cbiAgcHVibGljIGhhc1JvbGUocm9sZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucm9sZXMuc29tZSh4ID0+IHguaW5jbHVkZXMocm9sZSkpO1xuICB9XG5cbiAgcHVibGljIGNhbkRpcmVjdEFjY2VzcyhmZWF0dXJlOiBzdHJpbmcsIGxldmVsOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAobGV2ZWwgPT09ICdhdXRoZW50aWNhdGVkJykge1xuICAgICAgcmV0dXJuIHRoaXMuaXNBdXRoZW50aWNhdGVkO1xuICAgIH1cblxuICAgIGlmICghZmVhdHVyZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgZmVhdHVyZUd1YXJkID0gdGhpcy5ndWFyZHNbZmVhdHVyZV07XG4gICAgaWYgKCFmZWF0dXJlR3VhcmQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoZmVhdHVyZUd1YXJkLmluY2x1ZGVzKCdhbGwnKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFmZWF0dXJlR3VhcmQuaW5jbHVkZXMobGV2ZWwpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwdWJsaWMgY2FuQWNjZXNzKGZlYXR1cmU6IHN0cmluZywgbGV2ZWw6IHN0cmluZyB8ICdhdXRoZW50aWNhdGVkJyB8ICdhdXRob3JpemUnKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZWQkLnBpcGUobWFwKCgpID0+IHRoaXMuY2FuRGlyZWN0QWNjZXNzKGZlYXR1cmUsIGxldmVsKSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBfY2FuWW91VXBkYXRlKCkge1xuICAgIGlmICghdGhpcy5faXNGaWxsLmlzQXV0aGVudGljYXRlZCB8fCAhdGhpcy5faXNGaWxsLnBlcm1pc3Npb25zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZWQkLm5leHQoRGF0ZS5ub3coKSk7XG4gIH1cbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgY29uc3QgUGVybWlzc2lvbnMgPSBuZXcgUGVybWlzc2lvbnNDb3JlKCk7XG4iXX0=