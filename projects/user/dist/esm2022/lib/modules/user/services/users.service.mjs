import { Injectable } from '@angular/core';
import { CamBaseService, HandleComplexRequest, HandleSimpleRequest } from '@ta/server';
import { isNonNullable } from '@ta/utils';
import { catchError, filter, map, of, switchMap, tap } from 'rxjs';
import { functionProps } from './users/dto/function';
import { userProps } from './users/dto/user';
import { ADD_USER, DISABLE_CURRENT_USER, DISABLE_USER, UPDATE_CURRENT_USER } from './users/userMutations';
import { GET_CONTACT_TENANT_ROUTE, GET_CURRENT_USER, GET_MY_CONTACTS, GET_SEARCH_USERS_CUSTOMERS, GET_USERS, GET_USER_BY_ID, } from './users/userQueries';
import * as i0 from "@angular/core";
export const cachedQueryName = {
    currentUser: 'currentUser',
};
const graphEndpoint = {
    clientName: 'userService',
    endpoint: 'user',
};
export class CamUsersService extends CamBaseService {
    constructor() {
        super();
        this.users = new HandleSimpleRequest();
        this.usersCustomers = new HandleSimpleRequest();
        this.userById = new HandleComplexRequest();
        this.user = new HandleComplexRequest();
        this.currentUser = new HandleSimpleRequest();
        this.currentUserContactIds = new HandleSimpleRequest();
        this.contactTenantRoute = new HandleSimpleRequest();
        super.registerRoutes({ graphEndpoint: graphEndpoint });
    }
    fetchUsers$() {
        return this.users.fetch(this._graphService
            .fetchPagedQueryList(GET_USERS('', `
              ${userProps.get('id')}
              ${userProps.get('userName')}
              ${userProps.get('firstName')}
              ${userProps.get('lastName')}
              ${userProps.get('phoneNumber')}
              ${userProps.get('functions')} {
                ${functionProps.get('id')}
                ${functionProps.get('name')}
              }
              ${userProps.get('culture')}
              ${userProps.get('trigram')}
              ${userProps.get('picture')}
              
            `, `order: { lastName: ASC }`), 'users', graphEndpoint.clientName)
            .pipe(filter(isNonNullable), map(data => data.items ?? [])));
    }
    fetchContactTenantRoute$(contactId) {
        return this.contactTenantRoute.fetch(this._graphService
            .fetchQuery(GET_CONTACT_TENANT_ROUTE(contactId), 'contactTenantRoute', graphEndpoint.clientName)
            .pipe(filter(isNonNullable)));
    }
    fetchUsersByIds$(ids) {
        return this.users.fetch(this._graphService
            .fetchPagedQueryList(GET_USERS(`where: { id: { in: [${ids.map(id => `"${id}"`).join(', ')}] } }`, `
              ${userProps.get('id')}
              ${userProps.get('userName')}
              ${userProps.get('firstName')}
              ${userProps.get('lastName')}
              ${userProps.get('picture')}
              ${userProps.get('trigram')}
            `, `order: { lastName: ASC }`), 'users', graphEndpoint.clientName)
            .pipe(filter(isNonNullable), map(data => data.items ?? [])));
    }
    fetchUser$(id) {
        return this.user.fetch(id, this._graphService.fetchQuery(GET_USER_BY_ID(id), 'userById', graphEndpoint.clientName));
    }
    fetchCurrentUser$() {
        return this.currentUser.fetch(this._graphService.fetchQuery(GET_CURRENT_USER(), cachedQueryName.currentUser, graphEndpoint.clientName));
    }
    fetchCurrentUserContactIds$() {
        return this.currentUserContactIds
            .fetch(this._graphService
            .fetchQueryList(GET_MY_CONTACTS(), 'myContacts', graphEndpoint.clientName)
            .pipe(map(data => data ?? [])))
            .pipe(tap(() => {
            this._graphService.contactsLoaded$.next(true);
        }));
    }
    fetchUsersCustomers$(search) {
        if (!search || search.length < 3) {
            return of([]);
        }
        return this._graphService
            .fetchPagedQueryList(GET_SEARCH_USERS_CUSTOMERS(search, `
              ${userProps.get('id')}
              ${userProps.get('picture')}
              ${userProps.get('trigram')}
              ${userProps.get('firstName')}
              ${userProps.get('lastName')}
              ${userProps.get('userName')}
            `), 'searchUsersCustomers', graphEndpoint.clientName)
            .pipe(filter(isNonNullable), map(data => data.items ?? []), tap(list => list.forEach(element => {
            this.userById.add(element.id, element);
        })));
    }
    addUser$(userAddedPayload) {
        return this._graphService.mutate(ADD_USER(userAddedPayload), 'users', graphEndpoint.clientName).pipe(filter(isNonNullable), switchMap(() => this.fetchUsers$()), catchError(error => {
            console.error('Error adding user:', error);
            return of(null);
        }));
    }
    disableUser$(userId) {
        return this._graphService.mutate(DISABLE_USER(userId), 'users', graphEndpoint.clientName).pipe(switchMap(() => this.fetchUser$(userId)), catchError(error => {
            console.error('Error disabling user:', error);
            return of(null);
        }));
    }
    disableCurrentUser$() {
        return this._graphService.mutate(DISABLE_CURRENT_USER(), 'users', graphEndpoint.clientName).pipe(switchMap(() => this.fetchCurrentUser$()), catchError(error => {
            console.error('Error disabling user:', error);
            return of(null);
        }));
    }
    updateCurrentUser$(user) {
        return this._graphService
            .mutate(UPDATE_CURRENT_USER(user), 'users', graphEndpoint.clientName, [cachedQueryName.currentUser])
            .pipe(switchMap(() => this.fetchCurrentUser$()), catchError(error => {
            console.error('Error updating user:', error);
            return of(null);
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamUsersService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamUsersService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamUsersService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,