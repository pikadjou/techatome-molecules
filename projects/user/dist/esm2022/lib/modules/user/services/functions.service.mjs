import { Injectable, inject } from '@angular/core';
import { catchError, filter, map, of, switchMap } from 'rxjs';
import { CamBaseService, HandleSimpleRequest } from '@ta/server';
import { isNonNullable } from '@ta/utils';
import { TaUsersService } from './users.service';
import { functionProps } from './users/dto/function';
import { roleProps } from './users/dto/role';
import { ADD_FUNCTION, ADD_FUNCTION_TO_USER, REMOVE_FUNCTION_FROM_USER, UPDATE_FUNCTION } from './users/userMutations';
import { GET_FUNCTIONS, GET_ROLES } from './users/userQueries';
import * as i0 from "@angular/core";
const graphEndpoint = {
    clientName: 'userService',
    endpoint: 'user',
};
export class CamFunctionsService extends CamBaseService {
    constructor() {
        super();
        this.functions = new HandleSimpleRequest();
        this.roles = new HandleSimpleRequest();
        this._usersService = inject(TaUsersService);
        super.registerRoutes({ graphEndpoint: graphEndpoint });
    }
    fetchFunctions$() {
        return this.functions.fetch(this._graphService
            .fetchPagedQueryList(GET_FUNCTIONS('', `
              ${functionProps.get('id')}
              ${functionProps.get('name')}
              ${functionProps.get('roles')} {
                ${roleProps.get('id')}
                ${roleProps.get('name')}
              }
            `), 'functions', graphEndpoint.clientName)
            .pipe(filter(isNonNullable), map(data => data.items ?? [])));
    }
    fetchRoles$() {
        return this.roles.fetch(this._graphService
            .fetchPagedQueryList(GET_ROLES('', `
              ${roleProps.get('id')}
              ${roleProps.get('name')}
            `), 'roles', graphEndpoint.clientName)
            .pipe(filter(isNonNullable), map(data => data.items ?? [])));
    }
    addFunction$(functionAddedPayload) {
        return this._graphService
            .mutate(ADD_FUNCTION(functionAddedPayload), 'addFunction', graphEndpoint.clientName, ['functions'])
            .pipe(filter(isNonNullable), switchMap(() => this.fetchFunctions$()), catchError(error => {
            console.error('Error adding function:', error);
            return of(null);
        }));
    }
    updateFunction$(functionModifierPayload) {
        return this._graphService
            .mutate(UPDATE_FUNCTION(functionModifierPayload), 'updateFunction', graphEndpoint.clientName, [
            'functions',
        ])
            .pipe(filter(isNonNullable), switchMap(() => this.fetchFunctions$()), catchError(error => {
            console.error('Error adding function:', error);
            return of(null);
        }));
    }
    addFunctionToUser$(payload) {
        return this._graphService
            .mutate(ADD_FUNCTION_TO_USER(payload), 'addFunctionToUser', graphEndpoint.clientName, ['userById'])
            .pipe(filter(isNonNullable), switchMap(() => this._usersService.fetchUser$(payload.userId)), catchError(error => {
            console.error('Error adding function:', error);
            return of(null);
        }));
    }
    removeFunctionFromUser$(payload) {
        return this._graphService
            .mutate(REMOVE_FUNCTION_FROM_USER(payload), 'removeFunctionFromUser', graphEndpoint.clientName, [
            'userById',
        ])
            .pipe(filter(isNonNullable), switchMap(() => this._usersService.fetchUser$(payload.userId)), catchError(error => {
            console.error('Error adding function:', error);
            return of(null);
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamFunctionsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamFunctionsService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamFunctionsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,