import { Injectable } from '@angular/core';
import { CamBaseService, HandleComplexRequest, HandleSimpleRequest } from '@ta/server';
import { isNonNullable } from '@ta/utils';
import { filter, map, of, tap } from 'rxjs';
import { contactProps } from './contacts/dto/contact';
import { GET_CONTACTS, GET_CONTACTS_LIGHT, GET_SEARCH_CONTACTS } from './contacts/queries';
import * as i0 from "@angular/core";
const graphEndpoint = {
    clientName: 'contactService',
    endpoint: 'contact',
};
export class CamContactService extends CamBaseService {
    constructor() {
        super();
        this.contactById = new HandleComplexRequest();
        this.contacts = new HandleSimpleRequest();
        super.registerRoutes({ graphEndpoint: graphEndpoint });
    }
    fetchContactById$(contactId) {
        return this.contactById.fetch(contactId, this._graphService
            .fetchPagedQueryList(GET_CONTACTS(`where: { id: { eq: "${contactId}" } }`, `
            ${contactProps.get('id')}
            ${contactProps.get('firstName')}
            ${contactProps.get('lastName')}
            ${contactProps.get('mail')}
            ${contactProps.get('phoneNumber')}
            ${contactProps.get('tenantPersonId')}
          `), 'contacts', graphEndpoint.clientName)
            .pipe(filter(isNonNullable), map(data => ({
            ...data,
            items: data.items ?? [],
        })), filter(data => data.items.length > 0), map(data => data.items[0])));
    }
    fetchContact$() {
        return this.contacts.fetch(this._graphService
            .fetchPagedQueryList(GET_CONTACTS_LIGHT('', `
              ${contactProps.get('id')}
              ${contactProps.get('firstName')}
              ${contactProps.get('lastName')}
              ${contactProps.get('mail')}
              ${contactProps.get('phoneNumber')}
            `), 'contactsLight', graphEndpoint.clientName)
            .pipe(filter(isNonNullable), map(data => data.items ?? [])));
    }
    fetchContactsByIds$(ids) {
        return this.contacts.fetch(this._graphService
            .fetchPagedQueryList(GET_CONTACTS_LIGHT(`where: { id: { in: [${ids.map(id => `"${id}"`).join(', ')}] } }`, `
              ${contactProps.get('id')}
              ${contactProps.get('firstName')}
              ${contactProps.get('lastName')}
              ${contactProps.get('mail')}
            `), 'contactsLight', graphEndpoint.clientName)
            .pipe(filter(isNonNullable), map(data => data.items ?? [])));
    }
    fetchSearchContact$(search) {
        if (!search || search.length < 3) {
            return of([]);
        }
        return this._graphService
            .fetchPagedQueryList(GET_SEARCH_CONTACTS(search, `
              ${contactProps.get('id')}
              ${contactProps.get('firstName')}
              ${contactProps.get('lastName')}
              ${contactProps.get('mail')}
            `, `order: { lastName: ASC }`), 'searchContactsLight', graphEndpoint.clientName)
            .pipe(filter(isNonNullable), map(data => data.items ?? []), tap(list => list.forEach(element => {
            this.contactById.add(element.id, element);
        })));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamContactService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamContactService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: CamContactService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFjdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9tb2R1bGVzL3VzZXIvc2VydmljZXMvY29udGFjdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGNBQWMsRUFBaUIsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEcsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUMxQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTVDLE9BQU8sRUFBVyxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBRTNGLE1BQU0sYUFBYSxHQUFrQjtJQUNuQyxVQUFVLEVBQUUsZ0JBQWdCO0lBQzVCLFFBQVEsRUFBRSxTQUFTO0NBQ3BCLENBQUM7QUFLRixNQUFNLE9BQU8saUJBQWtCLFNBQVEsY0FBYztJQUluRDtRQUNFLEtBQUssRUFBRSxDQUFDO1FBSkgsZ0JBQVcsR0FBRyxJQUFJLG9CQUFvQixFQUFXLENBQUM7UUFDbEQsYUFBUSxHQUFHLElBQUksbUJBQW1CLEVBQWEsQ0FBQztRQUtyRCxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVNLGlCQUFpQixDQUFDLFNBQWlCO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQzNCLFNBQVMsRUFDVCxJQUFJLENBQUMsYUFBYTthQUNmLG1CQUFtQixDQUNsQixZQUFZLENBQ1YsdUJBQXVCLFNB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WUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ3RCLFlBQVksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO2dCQUM3QixZQUFZLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztnQkFDNUIsWUFBWSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7YUFDM0IsRUFDSCwwQkFBMEIsQ0FDM0IsRUFDRCxxQkFBcUIsRUFDckIsYUFBYSxDQUFDLFVBQVUsQ0FDekI7YUFDQSxJQUFJLENBQ0gsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxFQUM3QixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDVCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQ0gsQ0FDRixDQUFDO0lBQ04sQ0FBQzsrR0FwSFUsaUJBQWlCO21IQUFqQixpQkFBaUIsY0FGaEIsTUFBTTs7NEZBRVAsaUJBQWlCO2tCQUg3QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ2FtQmFzZVNlcnZpY2UsIEdyYXBoRW5kcG9pbnQsIEhhbmRsZUNvbXBsZXhSZXF1ZXN0LCBIYW5kbGVTaW1wbGVSZXF1ZXN0IH0gZnJvbSAnQHRhL3NlcnZlcic7XG5pbXBvcnQgeyBpc05vbk51bGxhYmxlIH0gZnJvbSAnQHRhL3V0aWxzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwLCBvZiwgdGFwIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IENvbnRhY3QsIGNvbnRhY3RQcm9wcyB9IGZyb20gJy4vY29udGFjdHMvZHRvL2NvbnRhY3QnO1xuaW1wb3J0IHsgR0VUX0NPTlRBQ1RTLCBHRVRfQ09OVEFDVFNfTElHSFQsIEdFVF9TRUFSQ0hfQ09OVEFDVFMgfSBmcm9tICcuL2NvbnRhY3RzL3F1ZXJpZXMnO1xuXG5jb25zdCBncmFwaEVuZHBvaW50OiBHcmFwaEVuZHBvaW50ID0ge1xuICBjbGllbnROYW1lOiAnY29udGFjdFNlcnZpY2UnLFxuICBlbmRwb2ludDogJ2NvbnRhY3QnLFxufTtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIENhbUNvbnRhY3RTZXJ2aWNlIGV4dGVuZHMgQ2FtQmFzZVNlcnZpY2Uge1xuICBwdWJsaWMgY29udGFjdEJ5SWQgPSBuZXcgSGFuZGxlQ29tcGxleFJlcXVlc3Q8Q29udGFjdD4oKTtcbiAgcHVibGljIGNvbnRhY3RzID0gbmV3IEhhbmRsZVNpbXBsZVJlcXVlc3Q8Q29udGFjdFtdPigpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBzdXBlci5yZWdpc3RlclJvdXRlcyh7IGdyYXBoRW5kcG9pbnQ6IGdyYXBoRW5kcG9pbnQgfSk7XG4gIH1cblxuICBwdWJsaWMgZmV0Y2hDb250YWN0QnlJZCQoY29udGFjdElkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5jb250YWN0QnlJZC5mZXRjaChcbiAgICAgIGNvbnRhY3RJZCxcbiAgICAgIHRoaXMuX2dyYXBoU2VydmljZVxuICAgICAgICAuZmV0Y2hQYWdlZFF1ZXJ5TGlzdDxDb250YWN0PihcbiAgICAgICAgICBHRVRfQ09OVEFDVFMoXG4gICAgICAgICAgICBgd2hlcmU6IHsgaWQ6IHsgZXE6IFwiJHtjb250YWN0SWR9XCIgfSB9YCxcbiAgICAgICAgICAgIGBcbiAgICAgICAgICAgICR7Y29udGFjdFByb3BzLmdldCgnaWQnKX1cbiAgICAgICAgICAgICR7Y29udGFjdFByb3BzLmdldCgnZmlyc3ROYW1lJyl9XG4gICAgICAgICAgICAke2NvbnRhY3RQcm9wcy5nZXQoJ2xhc3ROYW1lJyl9XG4gICAgICAgICAgICAke2NvbnRhY3RQcm9wcy5nZXQoJ21haWwnKX1cbiAgICAgICAgICAgICR7Y29udGFjdFByb3BzLmdldCgncGhvbmVOdW1iZXInKX1cbiAgICAgICAgICAgICR7Y29udGFjdFByb3BzLmdldCgndGVuYW50UGVyc29uSWQnKX1cbiAgICAgICAgICBgXG4gICAgICAgICAgKSxcbiAgICAgICAgICAnY29udGFjdHMnLFxuICAgICAgICAgIGdyYXBoRW5kcG9pbnQuY2xpZW50TmFtZVxuICAgICAgICApXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIGZpbHRlcihpc05vbk51bGxhYmxlKSxcbiAgICAgICAgICBtYXAoZGF0YSA9PiAoe1xuICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIGl0ZW1zOiBkYXRhLml0ZW1zID8/IFtdLFxuICAgICAgICAgIH0pKSxcbiAgICAgICAgICBmaWx0ZXIoZGF0YSA9PiBkYXRhLml0ZW1zLmxlbmd0aCA+IDApLFxuICAgICAgICAgIG1hcChkYXRhID0+IGRhdGEuaXRlbXNbMF0pXG4gICAgICAgIClcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGZldGNoQ29udGFjdCQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGFjdHMuZmV0Y2goXG4gICAgICB0aGlzLl9ncmFwaFNlcnZpY2VcbiAgICAgICAgLmZldGNoUGFnZWRRdWVyeUxpc3Q8Q29udGFjdD4oXG4gICAgICAgICAgR0VUX0NPTlRBQ1RTX0xJR0hUKFxuICAgICAgICAgICAgJycsXG4gICAgICAgICAgICBgXG4gICAgICAgICAgICAgICR7Y29udGFjdFByb3BzLmdldCgnaWQnKX1cbiAgICAgICAgICAgICAgJHtjb250YWN0UHJvcHMuZ2V0KCdmaXJzdE5hbWUnKX1cbiAgICAgICAgICAgICAgJHtjb250YWN0UHJvcHMuZ2V0KCdsYXN0TmFtZScpfVxuICAgICAgICAgICAgICAke2NvbnRhY3RQcm9wcy5nZXQoJ21haWwnKX1cbiAgICAgICAgICAgICAgJHtjb250YWN0UHJvcHMuZ2V0KCdwaG9uZU51bWJlcicpfVxuICAgICAgICAgICAgYFxuICAgICAgICAgICksXG4gICAgICAgICAgJ2NvbnRhY3RzTGlnaHQnLFxuICAgICAgICAgIGdyYXBoRW5kcG9pbnQuY2xpZW50TmFtZVxuICAgICAgICApXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIGZpbHRlcihpc05vbk51bGxhYmxlKSxcbiAgICAgICAgICBtYXAoZGF0YSA9PiBkYXRhLml0ZW1zID8/IFtdKVxuICAgICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBmZXRjaENvbnRhY3RzQnlJZHMkKGlkczogc3RyaW5nW10pIHtcbiAgICByZXR1cm4gdGhpcy5jb250YWN0cy5mZXRjaChcbiAgICAgIHRoaXMuX2dyYXBoU2VydmljZVxuICAgICAgICAuZmV0Y2hQYWdlZFF1ZXJ5TGlzdDxDb250YWN0PihcbiAgICAgICAgICBHRVRfQ09OVEFDVFNfTElHSFQoXG4gICAgICAgICAgICBgd2hlcmU6IHsgaWQ6IHsgaW46IFske2lkcy5tYXAoaWQgPT4gYFwiJHtpZH1cImApLmpvaW4oJywgJyl9XSB9IH1gLFxuICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAke2NvbnRhY3RQcm9wcy5nZXQoJ2lkJyl9XG4gICAgICAgICAgICAgICR7Y29udGFjdFByb3BzLmdldCgnZmlyc3ROYW1lJyl9XG4gICAgICAgICAgICAgICR7Y29udGFjdFByb3BzLmdldCgnbGFzdE5hbWUnKX1cbiAgICAgICAgICAgICAgJHtjb250YWN0UHJvcHMuZ2V0KCdtYWlsJyl9XG4gICAgICAgICAgICBgXG4gICAgICAgICAgKSxcbiAgICAgICAgICAnY29udGFjdHNMaWdodCcsXG4gICAgICAgICAgZ3JhcGhFbmRwb2ludC5jbGllbnROYW1lXG4gICAgICAgIClcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgZmlsdGVyKGlzTm9uTnVsbGFibGUpLFxuICAgICAgICAgIG1hcChkYXRhID0+IGRhdGEuaXRlbXMgPz8gW10pXG4gICAgICAgIClcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGZldGNoU2VhcmNoQ29udGFjdCQoc2VhcmNoPzogc3RyaW5nKSB7XG4gICAgaWYgKCFzZWFyY2ggfHwgc2VhcmNoLmxlbmd0aCA8IDMpIHtcbiAgICAgIHJldHVybiBvZihbXSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ncmFwaFNlcnZpY2VcbiAgICAgIC5mZXRjaFBhZ2VkUXVlcnlMaXN0PENvbnRhY3Q+KFxuICAgICAgICBHRVRfU0VBUkNIX0NPTlRBQ1RTKFxuICAgICAgICAgIHNlYXJjaCxcbiAgICAgICAgICBgXG4gICAgICAgICAgICAgICR7Y29udGFjdFByb3BzLmdldCgnaWQnKX1cbiAgICAgICAgICAgICAgJHtjb250YWN0UHJvcHMuZ2V0KCdmaXJzdE5hbWUnKX1cbiAgICAgICAgICAgICAgJHtjb250YWN0UHJvcHMuZ2V0KCdsYXN0TmFtZScpfVxuICAgICAgICAgICAgICAke2NvbnRhY3RQcm9wcy5nZXQoJ21haWwnKX1cbiAgICAgICAgICAgIGAsXG4gICAgICAgICAgYG9yZGVyOiB7IGxhc3ROYW1lOiBBU0MgfWBcbiAgICAgICAgKSxcbiAgICAgICAgJ3NlYXJjaENvbnRhY3RzTGlnaHQnLFxuICAgICAgICBncmFwaEVuZHBvaW50LmNsaWVudE5hbWVcbiAgICAgIClcbiAgICAgIC5waXBlKFxuICAgICAgICBmaWx0ZXIoaXNOb25OdWxsYWJsZSksXG4gICAgICAgIG1hcChkYXRhID0+IGRhdGEuaXRlbXMgPz8gW10pLFxuICAgICAgICB0YXAobGlzdCA9PlxuICAgICAgICAgIGxpc3QuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29udGFjdEJ5SWQuYWRkKGVsZW1lbnQuaWQsIGVsZW1lbnQpO1xuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICk7XG4gIH1cbn1cbiJdfQ==