import { AsyncPipe, NgIf } from '@angular/common';
import { Component, Input } from '@angular/core';
import { FontIconComponent } from '@ta/icons';
import { EmptyComponent, ErrorComponent, LoaderComponent, UserLogoComponent } from '@ta/ui';
import { TaBaseComponent } from '@ta/utils';
import * as i0 from "@angular/core";
import * as i1 from "../../services/users.service";
export class ContactCardComponent extends TaBaseComponent {
    get user$() {
        return this._usersService.user.get$(this.userId);
    }
    constructor(_usersService) {
        super();
        this._usersService = _usersService;
        this.userId = '';
    }
    ngOnInit() {
        this._fetch();
    }
    getUserLogoData(user) {
        return {
            firstName: user.firstName,
            lastName: user.lastName,
            trigram: user.trigram,
            picture: user.picture,
        };
    }
    _fetch() {
        this.requestState.asked();
        this._usersService.fetchUser$(this.userId).subscribe({
            complete: () => this.requestState.completed(),
            error: (error) => {
                this.requestState.onError(error.status, error.statusText);
            },
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContactCardComponent, deps: [{ token: i1.CamUsersService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: ContactCardComponent, isStandalone: true, selector: "ta-contact-card", inputs: { userId: "userId" }, usesInheritance: true, ngImport: i0, template: "<ta-loader [isLoading]=\"this.requestState.isLoading()\" *ngLet=\"this.user$ | async as user\">\n  <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n    <ta-empty [isEmpty]=\"!user\">\n      @if (user) {\n        <ta-user-logo class=\"user-logo\" [user]=\"this.getUserLogoData(user)\"></ta-user-logo>\n      }\n      <div class=\"contact-name\">{{ user?.firstName }} {{ user?.lastName }}</div>\n      <div class=\"contacts align-center\">\n        <div class=\"phone align-center\">\n          <ta-font-icon class=\"mr-space-xs\" name=\"phone\"></ta-font-icon>\n          {{ user?.phoneNumber }}\n        </div>\n        <div class=\"mail align-center\">\n          <ta-font-icon class=\"mr-space-xs\" name=\"mail\"></ta-font-icon>\n          {{ user?.userName }}\n        </div>\n      </div>\n    </ta-empty>\n  </ta-error>\n</ta-loader>\n", styles: [".contact-name{font-size:var(--ta-font-body-md-default-size);line-height:var(--ta-font-body-md-default-line);font-weight:var(--ta-font-body-md-default-weight)}.user-logo{display:flex;padding-bottom:var(--ta-space-xs)}.contacts{padding-top:var(--ta-space-sm);gap:var(--ta-space-xl)}ta-font-icon{color:var(--ta-icon-brand-primary)}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "component", type: FontIconComponent, selector: "ta-font-icon", inputs: ["name", "type"] }, { kind: "component", type: LoaderComponent, selector: "ta-loader", inputs: ["isLoading", "skeleton"] }, { kind: "component", type: ErrorComponent, selector: "ta-error", inputs: ["message", "code"] }, { kind: "component", type: EmptyComponent, selector: "ta-empty", inputs: ["isEmpty", "isLight", "showMessage", "text", "type", "icon", "iconSize"] }, { kind: "component", type: UserLogoComponent, selector: "ta-user-logo", inputs: ["userInfo", "user", "size", "forcedSize", "defaultType"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: ContactCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-contact-card', standalone: true, imports: [NgIf, AsyncPipe, FontIconComponent, LoaderComponent, ErrorComponent, EmptyComponent, UserLogoComponent], template: "<ta-loader [isLoading]=\"this.requestState.isLoading()\" *ngLet=\"this.user$ | async as user\">\n  <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n    <ta-empty [isEmpty]=\"!user\">\n      @if (user) {\n        <ta-user-logo class=\"user-logo\" [user]=\"this.getUserLogoData(user)\"></ta-user-logo>\n      }\n      <div class=\"contact-name\">{{ user?.firstName }} {{ user?.lastName }}</div>\n      <div class=\"contacts align-center\">\n        <div class=\"phone align-center\">\n          <ta-font-icon class=\"mr-space-xs\" name=\"phone\"></ta-font-icon>\n          {{ user?.phoneNumber }}\n        </div>\n        <div class=\"mail align-center\">\n          <ta-font-icon class=\"mr-space-xs\" name=\"mail\"></ta-font-icon>\n          {{ user?.userName }}\n        </div>\n      </div>\n    </ta-empty>\n  </ta-error>\n</ta-loader>\n", styles: [".contact-name{font-size:var(--ta-font-body-md-default-size);line-height:var(--ta-font-body-md-default-line);font-weight:var(--ta-font-body-md-default-weight)}.user-logo{display:flex;padding-bottom:var(--ta-space-xs)}.contacts{padding-top:var(--ta-space-sm);gap:var(--ta-space-xl)}ta-font-icon{color:var(--ta-icon-brand-primary)}\n"] }]
        }], ctorParameters: () => [{ type: i1.CamUsersService }], propDecorators: { userId: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFjdC1jYXJkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvbW9kdWxlcy91c2VyL2NvbXBvbmVudHMvY29udGFjdC1jYXJkL2NvbnRhY3QtY2FyZC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL21vZHVsZXMvdXNlci9jb21wb25lbnRzL2NvbnRhY3QtY2FyZC9jb250YWN0LWNhcmQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVsRCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDOUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzVGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUM7OztBQVk1QyxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsZUFBZTtJQUl2RCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELFlBQW9CLGFBQThCO1FBQ2hELEtBQUssRUFBRSxDQUFDO1FBRFUsa0JBQWEsR0FBYixhQUFhLENBQWlCO1FBTmxELFdBQU0sR0FBVyxFQUFFLENBQUM7SUFRcEIsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVNLGVBQWUsQ0FBQyxJQUFVO1FBQy9CLE9BQU87WUFDTCxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztZQUNyQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87U0FDdEIsQ0FBQztJQUNKLENBQUM7SUFFTyxNQUFNO1FBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ25ELFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRTtZQUM3QyxLQUFLLEVBQUUsQ0FBQyxLQUF3QixFQUFFLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzVELENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDOytHQWpDVSxvQkFBb0I7bUdBQXBCLG9CQUFvQixnSUNsQmpDLHE0QkFvQkEsK1hESmtCLFNBQVMsOENBQUUsaUJBQWlCLG1GQUFFLGVBQWUseUZBQUUsY0FBYyxrRkFBRSxjQUFjLHdJQUFFLGlCQUFpQjs7NEZBRXJHLG9CQUFvQjtrQkFQaEMsU0FBUzsrQkFDRSxpQkFBaUIsY0FHZixJQUFJLFdBQ1AsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixDQUFDO29GQUlqSCxNQUFNO3NCQURMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY1BpcGUsIE5nSWYgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEZvbnRJY29uQ29tcG9uZW50IH0gZnJvbSAnQHRhL2ljb25zJztcbmltcG9ydCB7IEVtcHR5Q29tcG9uZW50LCBFcnJvckNvbXBvbmVudCwgTG9hZGVyQ29tcG9uZW50LCBVc2VyTG9nb0NvbXBvbmVudCB9IGZyb20gJ0B0YS91aSc7XG5pbXBvcnQgeyBUYUJhc2VDb21wb25lbnQgfSBmcm9tICdAdGEvdXRpbHMnO1xuXG5pbXBvcnQgeyBDYW1Vc2Vyc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy91c2Vycy5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy91c2Vycy9kdG8vdXNlcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhLWNvbnRhY3QtY2FyZCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9jb250YWN0LWNhcmQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9jb250YWN0LWNhcmQuY29tcG9uZW50LnNjc3MnXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW05nSWYsIEFzeW5jUGlwZSwgRm9udEljb25Db21wb25lbnQsIExvYWRlckNvbXBvbmVudCwgRXJyb3JDb21wb25lbnQsIEVtcHR5Q29tcG9uZW50LCBVc2VyTG9nb0NvbXBvbmVudF0sXG59KVxuZXhwb3J0IGNsYXNzIENvbnRhY3RDYXJkQ29tcG9uZW50IGV4dGVuZHMgVGFCYXNlQ29tcG9uZW50IHtcbiAgQElucHV0KClcbiAgdXNlcklkOiBzdHJpbmcgPSAnJztcblxuICBnZXQgdXNlciQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VzZXJzU2VydmljZS51c2VyLmdldCQodGhpcy51c2VySWQpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfdXNlcnNTZXJ2aWNlOiBDYW1Vc2Vyc1NlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5fZmV0Y2goKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRVc2VyTG9nb0RhdGEodXNlcjogVXNlcikge1xuICAgIHJldHVybiB7XG4gICAgICBmaXJzdE5hbWU6IHVzZXIuZmlyc3ROYW1lLFxuICAgICAgbGFzdE5hbWU6IHVzZXIubGFzdE5hbWUsXG4gICAgICB0cmlncmFtOiB1c2VyLnRyaWdyYW0sXG4gICAgICBwaWN0dXJlOiB1c2VyLnBpY3R1cmUsXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgX2ZldGNoKCkge1xuICAgIHRoaXMucmVxdWVzdFN0YXRlLmFza2VkKCk7XG4gICAgdGhpcy5fdXNlcnNTZXJ2aWNlLmZldGNoVXNlciQodGhpcy51c2VySWQpLnN1YnNjcmliZSh7XG4gICAgICBjb21wbGV0ZTogKCkgPT4gdGhpcy5yZXF1ZXN0U3RhdGUuY29tcGxldGVkKCksXG4gICAgICBlcnJvcjogKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4ge1xuICAgICAgICB0aGlzLnJlcXVlc3RTdGF0ZS5vbkVycm9yKGVycm9yLnN0YXR1cywgZXJyb3Iuc3RhdHVzVGV4dCk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG4iLCI8dGEtbG9hZGVyIFtpc0xvYWRpbmddPVwidGhpcy5yZXF1ZXN0U3RhdGUuaXNMb2FkaW5nKClcIiAqbmdMZXQ9XCJ0aGlzLnVzZXIkIHwgYXN5bmMgYXMgdXNlclwiPlxuICA8dGEtZXJyb3IgW21lc3NhZ2VdPVwidGhpcy5yZXF1ZXN0U3RhdGUuZ2V0RXJyb3JNZXNzYWdlKClcIiBbY29kZV09XCJ0aGlzLnJlcXVlc3RTdGF0ZS5nZXRFcnJvclN0YXR1cygpXCI+XG4gICAgPHRhLWVtcHR5IFtpc0VtcHR5XT1cIiF1c2VyXCI+XG4gICAgICBAaWYgKHVzZXIpIHtcbiAgICAgICAgPHRhLXVzZXItbG9nbyBjbGFzcz1cInVzZXItbG9nb1wiIFt1c2VyXT1cInRoaXMuZ2V0VXNlckxvZ29EYXRhKHVzZXIpXCI+PC90YS11c2VyLWxvZ28+XG4gICAgICB9XG4gICAgICA8ZGl2IGNsYXNzPVwiY29udGFjdC1uYW1lXCI+e3sgdXNlcj8uZmlyc3ROYW1lIH19IHt7IHVzZXI/Lmxhc3ROYW1lIH19PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29udGFjdHMgYWxpZ24tY2VudGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwaG9uZSBhbGlnbi1jZW50ZXJcIj5cbiAgICAgICAgICA8dGEtZm9udC1pY29uIGNsYXNzPVwibXItc3BhY2UteHNcIiBuYW1lPVwicGhvbmVcIj48L3RhLWZvbnQtaWNvbj5cbiAgICAgICAgICB7eyB1c2VyPy5waG9uZU51bWJlciB9fVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1haWwgYWxpZ24tY2VudGVyXCI+XG4gICAgICAgICAgPHRhLWZvbnQtaWNvbiBjbGFzcz1cIm1yLXNwYWNlLXhzXCIgbmFtZT1cIm1haWxcIj48L3RhLWZvbnQtaWNvbj5cbiAgICAgICAgICB7eyB1c2VyPy51c2VyTmFtZSB9fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGEtZW1wdHk+XG4gIDwvdGEtZXJyb3I+XG48L3RhLWxvYWRlcj5cbiJdfQ==