import { AsyncPipe } from '@angular/common';
import { Component, Input, inject } from '@angular/core';
import { FontIconComponent } from '@ta/icons';
import { ButtonComponent, ErrorComponent, LoaderComponent } from '@ta/ui';
import { TaBaseComponent, openExternalUrl } from '@ta/utils';
import { TaUsersService } from '../../services/users.service';
import * as i0 from "@angular/core";
export class TenantUrlDisplayerComponent extends TaBaseComponent {
    get contactTenantRoute$() {
        return this._usersService.contactTenantRoute.get$();
    }
    constructor() {
        super();
        this.display = 'icon';
        this._usersService = inject(TaUsersService);
    }
    ngOnInit() {
        this._fetch();
    }
    navigateToTenantContact(url) {
        openExternalUrl(url);
    }
    _fetch() {
        this.requestState.asked();
        this._usersService.fetchContactTenantRoute$(this.contactId).subscribe({
            next: () => {
                this.requestState.completed();
            },
            error: (error) => {
                this.requestState.onError(error.status, error.statusText);
            },
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TenantUrlDisplayerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: TenantUrlDisplayerComponent, isStandalone: true, selector: "ta-tenant-url-displayer", inputs: { contactId: "contactId", display: "display" }, usesInheritance: true, ngImport: i0, template: "<ta-loader [isLoading]=\"this.requestState.isLoading()\" *ngLet=\"this.contactTenantRoute$ | async as contactTenantRoute\">\n  <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n    @if (this.display === 'icon') {\n      <ta-font-icon\n        [name]=\"'arrow-big-right'\"\n        (click)=\"this.navigateToTenantContact(contactTenantRoute)\"\n      ></ta-font-icon>\n    } @else if (this.display === 'button') {\n      <ta-button [type]=\"'secondary'\" (action)=\"this.navigateToTenantContact(contactTenantRoute)\">\n        <ng-content></ng-content>\n      </ta-button>\n    }\n  </ta-error>\n</ta-loader>\n", styles: [""], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "component", type: FontIconComponent, selector: "ta-font-icon", inputs: ["name", "type"] }, { kind: "component", type: ButtonComponent, selector: "ta-button", inputs: ["state", "type", "size", "icon", "options", "stopPropagationActivation"], outputs: ["action"] }, { kind: "component", type: LoaderComponent, selector: "ta-loader", inputs: ["isLoading", "skeleton"] }, { kind: "component", type: ErrorComponent, selector: "ta-error", inputs: ["message", "code"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: TenantUrlDisplayerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-tenant-url-displayer', standalone: true, imports: [AsyncPipe, FontIconComponent, ButtonComponent, LoaderComponent, ErrorComponent], template: "<ta-loader [isLoading]=\"this.requestState.isLoading()\" *ngLet=\"this.contactTenantRoute$ | async as contactTenantRoute\">\n  <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n    @if (this.display === 'icon') {\n      <ta-font-icon\n        [name]=\"'arrow-big-right'\"\n        (click)=\"this.navigateToTenantContact(contactTenantRoute)\"\n      ></ta-font-icon>\n    } @else if (this.display === 'button') {\n      <ta-button [type]=\"'secondary'\" (action)=\"this.navigateToTenantContact(contactTenantRoute)\">\n        <ng-content></ng-content>\n      </ta-button>\n    }\n  </ta-error>\n</ta-loader>\n" }]
        }], ctorParameters: () => [], propDecorators: { contactId: [{
                type: Input
            }], display: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuYW50LXVybC1kaXNwbGF5ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9tb2R1bGVzL3VzZXIvY29tcG9uZW50cy90ZW5hbnQtdXJsLWRpc3BsYXllci90ZW5hbnQtdXJsLWRpc3BsYXllci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL21vZHVsZXMvdXNlci9jb21wb25lbnRzL3RlbmFudC11cmwtZGlzcGxheWVyL3RlbmFudC11cmwtZGlzcGxheWVyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU1QyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUMxRSxPQUFPLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBUzlELE1BQU0sT0FBTywyQkFBNEIsU0FBUSxlQUFlO0lBTzlELElBQUksbUJBQW1CO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0RCxDQUFDO0lBSUQ7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQVRWLFlBQU8sR0FBc0IsTUFBTSxDQUFDO1FBTTVCLGtCQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBSS9DLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFTSx1QkFBdUIsQ0FBQyxHQUFXO1FBQ3hDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU8sTUFBTTtRQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ3BFLElBQUksRUFBRSxHQUFHLEVBQUU7Z0JBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNoQyxDQUFDO1lBQ0QsS0FBSyxFQUFFLENBQUMsS0FBd0IsRUFBRSxFQUFFO2dCQUNsQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM1RCxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzsrR0FuQ1UsMkJBQTJCO21HQUEzQiwyQkFBMkIsa0tDakJ4Qyw0cEJBY0EscUREQ1ksU0FBUyw4Q0FBRSxpQkFBaUIsbUZBQUUsZUFBZSw4SkFBRSxlQUFlLHlGQUFFLGNBQWM7OzRGQUU3RSwyQkFBMkI7a0JBUHZDLFNBQVM7K0JBQ0UseUJBQXlCLGNBR3ZCLElBQUksV0FDUCxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGNBQWMsQ0FBQzt3REFJekYsU0FBUztzQkFEUixLQUFLO2dCQUlOLE9BQU87c0JBRE4sS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBGb250SWNvbkNvbXBvbmVudCB9IGZyb20gJ0B0YS9pY29ucyc7XG5pbXBvcnQgeyBCdXR0b25Db21wb25lbnQsIEVycm9yQ29tcG9uZW50LCBMb2FkZXJDb21wb25lbnQgfSBmcm9tICdAdGEvdWknO1xuaW1wb3J0IHsgVGFCYXNlQ29tcG9uZW50LCBvcGVuRXh0ZXJuYWxVcmwgfSBmcm9tICdAdGEvdXRpbHMnO1xuXG5pbXBvcnQgeyBUYVVzZXJzU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3VzZXJzLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0YS10ZW5hbnQtdXJsLWRpc3BsYXllcicsXG4gIHRlbXBsYXRlVXJsOiAnLi90ZW5hbnQtdXJsLWRpc3BsYXllci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RlbmFudC11cmwtZGlzcGxheWVyLmNvbXBvbmVudC5zY3NzJ10sXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtBc3luY1BpcGUsIEZvbnRJY29uQ29tcG9uZW50LCBCdXR0b25Db21wb25lbnQsIExvYWRlckNvbXBvbmVudCwgRXJyb3JDb21wb25lbnRdLFxufSlcbmV4cG9ydCBjbGFzcyBUZW5hbnRVcmxEaXNwbGF5ZXJDb21wb25lbnQgZXh0ZW5kcyBUYUJhc2VDb21wb25lbnQge1xuICBASW5wdXQoKVxuICBjb250YWN0SWQhOiBzdHJpbmc7XG5cbiAgQElucHV0KClcbiAgZGlzcGxheTogJ2J1dHRvbicgfCAnaWNvbicgPSAnaWNvbic7XG5cbiAgZ2V0IGNvbnRhY3RUZW5hbnRSb3V0ZSQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VzZXJzU2VydmljZS5jb250YWN0VGVuYW50Um91dGUuZ2V0JCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfdXNlcnNTZXJ2aWNlID0gaW5qZWN0KFRhVXNlcnNTZXJ2aWNlKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5fZmV0Y2goKTtcbiAgfVxuXG4gIHB1YmxpYyBuYXZpZ2F0ZVRvVGVuYW50Q29udGFjdCh1cmw6IHN0cmluZykge1xuICAgIG9wZW5FeHRlcm5hbFVybCh1cmwpO1xuICB9XG5cbiAgcHJpdmF0ZSBfZmV0Y2goKSB7XG4gICAgdGhpcy5yZXF1ZXN0U3RhdGUuYXNrZWQoKTtcbiAgICB0aGlzLl91c2Vyc1NlcnZpY2UuZmV0Y2hDb250YWN0VGVuYW50Um91dGUkKHRoaXMuY29udGFjdElkKS5zdWJzY3JpYmUoe1xuICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICB0aGlzLnJlcXVlc3RTdGF0ZS5jb21wbGV0ZWQoKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4ge1xuICAgICAgICB0aGlzLnJlcXVlc3RTdGF0ZS5vbkVycm9yKGVycm9yLnN0YXR1cywgZXJyb3Iuc3RhdHVzVGV4dCk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG4iLCI8dGEtbG9hZGVyIFtpc0xvYWRpbmddPVwidGhpcy5yZXF1ZXN0U3RhdGUuaXNMb2FkaW5nKClcIiAqbmdMZXQ9XCJ0aGlzLmNvbnRhY3RUZW5hbnRSb3V0ZSQgfCBhc3luYyBhcyBjb250YWN0VGVuYW50Um91dGVcIj5cbiAgPHRhLWVycm9yIFttZXNzYWdlXT1cInRoaXMucmVxdWVzdFN0YXRlLmdldEVycm9yTWVzc2FnZSgpXCIgW2NvZGVdPVwidGhpcy5yZXF1ZXN0U3RhdGUuZ2V0RXJyb3JTdGF0dXMoKVwiPlxuICAgIEBpZiAodGhpcy5kaXNwbGF5ID09PSAnaWNvbicpIHtcbiAgICAgIDx0YS1mb250LWljb25cbiAgICAgICAgW25hbWVdPVwiJ2Fycm93LWJpZy1yaWdodCdcIlxuICAgICAgICAoY2xpY2spPVwidGhpcy5uYXZpZ2F0ZVRvVGVuYW50Q29udGFjdChjb250YWN0VGVuYW50Um91dGUpXCJcbiAgICAgID48L3RhLWZvbnQtaWNvbj5cbiAgICB9IEBlbHNlIGlmICh0aGlzLmRpc3BsYXkgPT09ICdidXR0b24nKSB7XG4gICAgICA8dGEtYnV0dG9uIFt0eXBlXT1cIidzZWNvbmRhcnknXCIgKGFjdGlvbik9XCJ0aGlzLm5hdmlnYXRlVG9UZW5hbnRDb250YWN0KGNvbnRhY3RUZW5hbnRSb3V0ZSlcIj5cbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgICAgPC90YS1idXR0b24+XG4gICAgfVxuICA8L3RhLWVycm9yPlxuPC90YS1sb2FkZXI+XG4iXX0=