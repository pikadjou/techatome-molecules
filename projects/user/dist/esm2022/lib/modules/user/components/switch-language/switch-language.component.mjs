import { NgFor, NgIf } from '@angular/common';
import { Component, inject } from '@angular/core';
import { ListContainerComponent, ListElementComponent, ListTagComponent, ListTitleComponent, LoaderComponent, } from 'projects/ui/dist';
import { FontIconComponent } from '@ta/icons';
import { CamTranslationService, TranslatePipe } from '@ta/translation';
import * as i0 from "@angular/core";
export class SwitchLanguageComponent {
    constructor() {
        this.translateService = inject(CamTranslationService);
        this.languages = [
            { id: 'fr', name: 'Français' },
            { id: 'nl', name: 'Nederlands' },
            { id: 'en', name: 'English' },
            { id: 'es', name: 'Español' },
        ];
        this.activeLanguage = this.translateService.getLanguage();
        this.changeLanguageAsked = false;
    }
    changeLanguage(language) {
        if (this.activeLanguage != language) {
            this.activeLanguage = language;
            this.changeLanguageAsked = true;
            this.translateService.use(language);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SwitchLanguageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: SwitchLanguageComponent, isStandalone: true, selector: "ta-switch-language", ngImport: i0, template: "<ta-loader [isLoading]=\"this.changeLanguageAsked\">\n  <div class=\"mx-space-sm language-panel\">\n    <ta-list-container>\n      @for (language of this.languages; track language.id) {\n        <ta-list-element [withSeparator]=\"false\" (click)=\"this.changeLanguage(language.id)\">\n          <ta-list-title class=\"d-flex p-space-xs\">\n            {{ language.name | translate }}\n          </ta-list-title>\n          @if (language.id === this.activeLanguage) {\n            <ta-list-tag>\n              <ta-font-icon name=\"check-line\" class=\"color-semantic-token-success\"></ta-font-icon>\n            </ta-list-tag>\n          }\n        </ta-list-element>\n      }\n    </ta-list-container>\n  </div>\n</ta-loader>\n", styles: [""], dependencies: [{ kind: "component", type: FontIconComponent, selector: "ta-font-icon", inputs: ["name", "type"] }, { kind: "component", type: ListTagComponent, selector: "ta-list-tag" }, { kind: "component", type: LoaderComponent, selector: "ta-loader", inputs: ["isLoading", "skeleton"] }, { kind: "component", type: ListContainerComponent, selector: "ta-list-container" }, { kind: "component", type: ListElementComponent, selector: "ta-list-element", inputs: ["withSeparator", "flexColumn"], outputs: ["action"] }, { kind: "component", type: ListTitleComponent, selector: "ta-list-title" }, { kind: "pipe", type: TranslatePipe, name: "translate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SwitchLanguageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-switch-language', standalone: true, imports: [
                        NgIf,
                        NgFor,
                        FontIconComponent,
                        ListTagComponent,
                        LoaderComponent,
                        ListContainerComponent,
                        ListElementComponent,
                        ListTitleComponent,
                        TranslatePipe,
                    ], template: "<ta-loader [isLoading]=\"this.changeLanguageAsked\">\n  <div class=\"mx-space-sm language-panel\">\n    <ta-list-container>\n      @for (language of this.languages; track language.id) {\n        <ta-list-element [withSeparator]=\"false\" (click)=\"this.changeLanguage(language.id)\">\n          <ta-list-title class=\"d-flex p-space-xs\">\n            {{ language.name | translate }}\n          </ta-list-title>\n          @if (language.id === this.activeLanguage) {\n            <ta-list-tag>\n              <ta-font-icon name=\"check-line\" class=\"color-semantic-token-success\"></ta-font-icon>\n            </ta-list-tag>\n          }\n        </ta-list-element>\n      }\n    </ta-list-container>\n  </div>\n</ta-loader>\n" }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLWxhbmd1YWdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvbW9kdWxlcy91c2VyL2NvbXBvbmVudHMvc3dpdGNoLWxhbmd1YWdlL3N3aXRjaC1sYW5ndWFnZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL21vZHVsZXMvdXNlci9jb21wb25lbnRzL3N3aXRjaC1sYW5ndWFnZS9zd2l0Y2gtbGFuZ3VhZ2UuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRCxPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLG9CQUFvQixFQUNwQixnQkFBZ0IsRUFDaEIsa0JBQWtCLEVBQ2xCLGVBQWUsR0FDaEIsTUFBTSxrQkFBa0IsQ0FBQztBQUUxQixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDOUMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQW1CdkUsTUFBTSxPQUFPLHVCQUF1QjtJQWpCcEM7UUFrQlcscUJBQWdCLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDakQsY0FBUyxHQUFHO1lBQ25CLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQzlCLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQ2hDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO1lBQzdCLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO1NBQzlCLENBQUM7UUFFSyxtQkFBYyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNyRCx3QkFBbUIsR0FBWSxLQUFLLENBQUM7S0FTN0M7SUFQUSxjQUFjLENBQUMsUUFBZ0I7UUFDcEMsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLFFBQVEsRUFBRSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDO1lBQy9CLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7WUFDaEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QyxDQUFDO0lBQ0gsQ0FBQzsrR0FsQlUsdUJBQXVCO21HQUF2Qix1QkFBdUIsOEVDL0JwQyx5dEJBa0JBLDBERElJLGlCQUFpQixtRkFDakIsZ0JBQWdCLHdEQUNoQixlQUFlLHlGQUNmLHNCQUFzQiw4REFDdEIsb0JBQW9CLDBIQUNwQixrQkFBa0IscURBQ2xCLGFBQWE7OzRGQUdKLHVCQUF1QjtrQkFqQm5DLFNBQVM7K0JBQ0Usb0JBQW9CLGNBR2xCLElBQUksV0FDUDt3QkFDUCxJQUFJO3dCQUNKLEtBQUs7d0JBQ0wsaUJBQWlCO3dCQUNqQixnQkFBZ0I7d0JBQ2hCLGVBQWU7d0JBQ2Ysc0JBQXNCO3dCQUN0QixvQkFBb0I7d0JBQ3BCLGtCQUFrQjt3QkFDbEIsYUFBYTtxQkFDZCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nRm9yLCBOZ0lmIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENvbXBvbmVudCwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7XG4gIExpc3RDb250YWluZXJDb21wb25lbnQsXG4gIExpc3RFbGVtZW50Q29tcG9uZW50LFxuICBMaXN0VGFnQ29tcG9uZW50LFxuICBMaXN0VGl0bGVDb21wb25lbnQsXG4gIExvYWRlckNvbXBvbmVudCxcbn0gZnJvbSAncHJvamVjdHMvdWkvZGlzdCc7XG5cbmltcG9ydCB7IEZvbnRJY29uQ29tcG9uZW50IH0gZnJvbSAnQHRhL2ljb25zJztcbmltcG9ydCB7IENhbVRyYW5zbGF0aW9uU2VydmljZSwgVHJhbnNsYXRlUGlwZSB9IGZyb20gJ0B0YS90cmFuc2xhdGlvbic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhLXN3aXRjaC1sYW5ndWFnZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9zd2l0Y2gtbGFuZ3VhZ2UuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9zd2l0Y2gtbGFuZ3VhZ2UuY29tcG9uZW50LnNjc3MnXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW1xuICAgIE5nSWYsXG4gICAgTmdGb3IsXG4gICAgRm9udEljb25Db21wb25lbnQsXG4gICAgTGlzdFRhZ0NvbXBvbmVudCxcbiAgICBMb2FkZXJDb21wb25lbnQsXG4gICAgTGlzdENvbnRhaW5lckNvbXBvbmVudCxcbiAgICBMaXN0RWxlbWVudENvbXBvbmVudCxcbiAgICBMaXN0VGl0bGVDb21wb25lbnQsXG4gICAgVHJhbnNsYXRlUGlwZSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgU3dpdGNoTGFuZ3VhZ2VDb21wb25lbnQge1xuICByZWFkb25seSB0cmFuc2xhdGVTZXJ2aWNlID0gaW5qZWN0KENhbVRyYW5zbGF0aW9uU2VydmljZSk7XG4gIHJlYWRvbmx5IGxhbmd1YWdlcyA9IFtcbiAgICB7IGlkOiAnZnInLCBuYW1lOiAnRnJhbsOnYWlzJyB9LFxuICAgIHsgaWQ6ICdubCcsIG5hbWU6ICdOZWRlcmxhbmRzJyB9LFxuICAgIHsgaWQ6ICdlbicsIG5hbWU6ICdFbmdsaXNoJyB9LFxuICAgIHsgaWQ6ICdlcycsIG5hbWU6ICdFc3Bhw7FvbCcgfSxcbiAgXTtcblxuICBwdWJsaWMgYWN0aXZlTGFuZ3VhZ2UgPSB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UuZ2V0TGFuZ3VhZ2UoKTtcbiAgcHVibGljIGNoYW5nZUxhbmd1YWdlQXNrZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwdWJsaWMgY2hhbmdlTGFuZ3VhZ2UobGFuZ3VhZ2U6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmFjdGl2ZUxhbmd1YWdlICE9IGxhbmd1YWdlKSB7XG4gICAgICB0aGlzLmFjdGl2ZUxhbmd1YWdlID0gbGFuZ3VhZ2U7XG4gICAgICB0aGlzLmNoYW5nZUxhbmd1YWdlQXNrZWQgPSB0cnVlO1xuICAgICAgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLnVzZShsYW5ndWFnZSk7XG4gICAgfVxuICB9XG59XG4iLCI8dGEtbG9hZGVyIFtpc0xvYWRpbmddPVwidGhpcy5jaGFuZ2VMYW5ndWFnZUFza2VkXCI+XG4gIDxkaXYgY2xhc3M9XCJteC1zcGFjZS1zbSBsYW5ndWFnZS1wYW5lbFwiPlxuICAgIDx0YS1saXN0LWNvbnRhaW5lcj5cbiAgICAgIEBmb3IgKGxhbmd1YWdlIG9mIHRoaXMubGFuZ3VhZ2VzOyB0cmFjayBsYW5ndWFnZS5pZCkge1xuICAgICAgICA8dGEtbGlzdC1lbGVtZW50IFt3aXRoU2VwYXJhdG9yXT1cImZhbHNlXCIgKGNsaWNrKT1cInRoaXMuY2hhbmdlTGFuZ3VhZ2UobGFuZ3VhZ2UuaWQpXCI+XG4gICAgICAgICAgPHRhLWxpc3QtdGl0bGUgY2xhc3M9XCJkLWZsZXggcC1zcGFjZS14c1wiPlxuICAgICAgICAgICAge3sgbGFuZ3VhZ2UubmFtZSB8IHRyYW5zbGF0ZSB9fVxuICAgICAgICAgIDwvdGEtbGlzdC10aXRsZT5cbiAgICAgICAgICBAaWYgKGxhbmd1YWdlLmlkID09PSB0aGlzLmFjdGl2ZUxhbmd1YWdlKSB7XG4gICAgICAgICAgICA8dGEtbGlzdC10YWc+XG4gICAgICAgICAgICAgIDx0YS1mb250LWljb24gbmFtZT1cImNoZWNrLWxpbmVcIiBjbGFzcz1cImNvbG9yLXNlbWFudGljLXRva2VuLXN1Y2Nlc3NcIj48L3RhLWZvbnQtaWNvbj5cbiAgICAgICAgICAgIDwvdGEtbGlzdC10YWc+XG4gICAgICAgICAgfVxuICAgICAgICA8L3RhLWxpc3QtZWxlbWVudD5cbiAgICAgIH1cbiAgICA8L3RhLWxpc3QtY29udGFpbmVyPlxuICA8L2Rpdj5cbjwvdGEtbG9hZGVyPlxuIl19