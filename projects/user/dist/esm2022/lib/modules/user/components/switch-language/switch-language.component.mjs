import { NgFor, NgIf } from '@angular/common';
import { Component, inject } from '@angular/core';
import { FontIconComponent } from '@ta/icons';
import { CamTranslationService, TranslatePipe } from '@ta/translation';
import { ListContainerComponent, ListElementComponent, ListTagComponent, ListTitleComponent, LoaderComponent, } from '@ta/ui';
import * as i0 from "@angular/core";
export class SwitchLanguageComponent {
    constructor() {
        this.translateService = inject(CamTranslationService);
        this.languages = [
            { id: 'fr', name: 'Français' },
            { id: 'nl', name: 'Nederlands' },
            { id: 'en', name: 'English' },
            { id: 'es', name: 'Español' },
        ];
        this.activeLanguage = this.translateService.getLanguage();
        this.changeLanguageAsked = false;
    }
    changeLanguage(language) {
        if (this.activeLanguage != language) {
            this.activeLanguage = language;
            this.changeLanguageAsked = true;
            this.translateService.use(language);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SwitchLanguageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: SwitchLanguageComponent, isStandalone: true, selector: "ta-switch-language", ngImport: i0, template: "<ta-loader [isLoading]=\"this.changeLanguageAsked\">\n  <div class=\"mx-space-sm language-panel\">\n    <ta-list-container>\n      @for (language of this.languages; track language.id) {\n        <ta-list-element [withSeparator]=\"false\" (click)=\"this.changeLanguage(language.id)\">\n          <ta-list-title class=\"d-flex p-space-xs\">\n            {{ language.name | translate }}\n          </ta-list-title>\n          @if (language.id === this.activeLanguage) {\n            <ta-list-tag>\n              <ta-font-icon name=\"check-line\" class=\"color-semantic-token-success\"></ta-font-icon>\n            </ta-list-tag>\n          }\n        </ta-list-element>\n      }\n    </ta-list-container>\n  </div>\n</ta-loader>\n", styles: [""], dependencies: [{ kind: "component", type: FontIconComponent, selector: "ta-font-icon", inputs: ["name", "type"] }, { kind: "component", type: ListTagComponent, selector: "ta-list-tag" }, { kind: "component", type: LoaderComponent, selector: "ta-loader", inputs: ["isLoading", "skeleton"] }, { kind: "component", type: ListContainerComponent, selector: "ta-list-container" }, { kind: "component", type: ListElementComponent, selector: "ta-list-element", inputs: ["withSeparator", "flexColumn"], outputs: ["action"] }, { kind: "component", type: ListTitleComponent, selector: "ta-list-title" }, { kind: "pipe", type: TranslatePipe, name: "translate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SwitchLanguageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-switch-language', standalone: true, imports: [
                        NgIf,
                        NgFor,
                        FontIconComponent,
                        ListTagComponent,
                        LoaderComponent,
                        ListContainerComponent,
                        ListElementComponent,
                        ListTitleComponent,
                        TranslatePipe,
                    ], template: "<ta-loader [isLoading]=\"this.changeLanguageAsked\">\n  <div class=\"mx-space-sm language-panel\">\n    <ta-list-container>\n      @for (language of this.languages; track language.id) {\n        <ta-list-element [withSeparator]=\"false\" (click)=\"this.changeLanguage(language.id)\">\n          <ta-list-title class=\"d-flex p-space-xs\">\n            {{ language.name | translate }}\n          </ta-list-title>\n          @if (language.id === this.activeLanguage) {\n            <ta-list-tag>\n              <ta-font-icon name=\"check-line\" class=\"color-semantic-token-success\"></ta-font-icon>\n            </ta-list-tag>\n          }\n        </ta-list-element>\n      }\n    </ta-list-container>\n  </div>\n</ta-loader>\n" }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLWxhbmd1YWdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvbW9kdWxlcy91c2VyL2NvbXBvbmVudHMvc3dpdGNoLWxhbmd1YWdlL3N3aXRjaC1sYW5ndWFnZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL21vZHVsZXMvdXNlci9jb21wb25lbnRzL3N3aXRjaC1sYW5ndWFnZS9zd2l0Y2gtbGFuZ3VhZ2UuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDOUMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZFLE9BQU8sRUFDTCxzQkFBc0IsRUFDdEIsb0JBQW9CLEVBQ3BCLGdCQUFnQixFQUNoQixrQkFBa0IsRUFDbEIsZUFBZSxHQUNoQixNQUFNLFFBQVEsQ0FBQzs7QUFtQmhCLE1BQU0sT0FBTyx1QkFBdUI7SUFqQnBDO1FBa0JXLHFCQUFnQixHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ2pELGNBQVMsR0FBRztZQUNuQixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUM5QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUNoQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtZQUM3QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtTQUM5QixDQUFDO1FBRUssbUJBQWMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckQsd0JBQW1CLEdBQVksS0FBSyxDQUFDO0tBUzdDO0lBUFEsY0FBYyxDQUFDLFFBQWdCO1FBQ3BDLElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNwQyxJQUFJLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQztZQUMvQixJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO1lBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEMsQ0FBQztJQUNILENBQUM7K0dBbEJVLHVCQUF1QjttR0FBdkIsdUJBQXVCLDhFQzlCcEMseXRCQWtCQSwwRERHSSxpQkFBaUIsbUZBQ2pCLGdCQUFnQix3REFDaEIsZUFBZSx5RkFDZixzQkFBc0IsOERBQ3RCLG9CQUFvQiwwSEFDcEIsa0JBQWtCLHFEQUNsQixhQUFhOzs0RkFHSix1QkFBdUI7a0JBakJuQyxTQUFTOytCQUNFLG9CQUFvQixjQUdsQixJQUFJLFdBQ1A7d0JBQ1AsSUFBSTt3QkFDSixLQUFLO3dCQUNMLGlCQUFpQjt3QkFDakIsZ0JBQWdCO3dCQUNoQixlQUFlO3dCQUNmLHNCQUFzQjt3QkFDdEIsb0JBQW9CO3dCQUNwQixrQkFBa0I7d0JBQ2xCLGFBQWE7cUJBQ2QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ0ZvciwgTmdJZiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDb21wb25lbnQsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBGb250SWNvbkNvbXBvbmVudCB9IGZyb20gJ0B0YS9pY29ucyc7XG5pbXBvcnQgeyBDYW1UcmFuc2xhdGlvblNlcnZpY2UsIFRyYW5zbGF0ZVBpcGUgfSBmcm9tICdAdGEvdHJhbnNsYXRpb24nO1xuaW1wb3J0IHtcbiAgTGlzdENvbnRhaW5lckNvbXBvbmVudCxcbiAgTGlzdEVsZW1lbnRDb21wb25lbnQsXG4gIExpc3RUYWdDb21wb25lbnQsXG4gIExpc3RUaXRsZUNvbXBvbmVudCxcbiAgTG9hZGVyQ29tcG9uZW50LFxufSBmcm9tICdAdGEvdWknO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0YS1zd2l0Y2gtbGFuZ3VhZ2UnLFxuICB0ZW1wbGF0ZVVybDogJy4vc3dpdGNoLWxhbmd1YWdlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vc3dpdGNoLWxhbmd1YWdlLmNvbXBvbmVudC5zY3NzJ10sXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtcbiAgICBOZ0lmLFxuICAgIE5nRm9yLFxuICAgIEZvbnRJY29uQ29tcG9uZW50LFxuICAgIExpc3RUYWdDb21wb25lbnQsXG4gICAgTG9hZGVyQ29tcG9uZW50LFxuICAgIExpc3RDb250YWluZXJDb21wb25lbnQsXG4gICAgTGlzdEVsZW1lbnRDb21wb25lbnQsXG4gICAgTGlzdFRpdGxlQ29tcG9uZW50LFxuICAgIFRyYW5zbGF0ZVBpcGUsXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFN3aXRjaExhbmd1YWdlQ29tcG9uZW50IHtcbiAgcmVhZG9ubHkgdHJhbnNsYXRlU2VydmljZSA9IGluamVjdChDYW1UcmFuc2xhdGlvblNlcnZpY2UpO1xuICByZWFkb25seSBsYW5ndWFnZXMgPSBbXG4gICAgeyBpZDogJ2ZyJywgbmFtZTogJ0ZyYW7Dp2FpcycgfSxcbiAgICB7IGlkOiAnbmwnLCBuYW1lOiAnTmVkZXJsYW5kcycgfSxcbiAgICB7IGlkOiAnZW4nLCBuYW1lOiAnRW5nbGlzaCcgfSxcbiAgICB7IGlkOiAnZXMnLCBuYW1lOiAnRXNwYcOxb2wnIH0sXG4gIF07XG5cbiAgcHVibGljIGFjdGl2ZUxhbmd1YWdlID0gdGhpcy50cmFuc2xhdGVTZXJ2aWNlLmdldExhbmd1YWdlKCk7XG4gIHB1YmxpYyBjaGFuZ2VMYW5ndWFnZUFza2VkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHVibGljIGNoYW5nZUxhbmd1YWdlKGxhbmd1YWdlOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5hY3RpdmVMYW5ndWFnZSAhPSBsYW5ndWFnZSkge1xuICAgICAgdGhpcy5hY3RpdmVMYW5ndWFnZSA9IGxhbmd1YWdlO1xuICAgICAgdGhpcy5jaGFuZ2VMYW5ndWFnZUFza2VkID0gdHJ1ZTtcbiAgICAgIHRoaXMudHJhbnNsYXRlU2VydmljZS51c2UobGFuZ3VhZ2UpO1xuICAgIH1cbiAgfVxufVxuIiwiPHRhLWxvYWRlciBbaXNMb2FkaW5nXT1cInRoaXMuY2hhbmdlTGFuZ3VhZ2VBc2tlZFwiPlxuICA8ZGl2IGNsYXNzPVwibXgtc3BhY2Utc20gbGFuZ3VhZ2UtcGFuZWxcIj5cbiAgICA8dGEtbGlzdC1jb250YWluZXI+XG4gICAgICBAZm9yIChsYW5ndWFnZSBvZiB0aGlzLmxhbmd1YWdlczsgdHJhY2sgbGFuZ3VhZ2UuaWQpIHtcbiAgICAgICAgPHRhLWxpc3QtZWxlbWVudCBbd2l0aFNlcGFyYXRvcl09XCJmYWxzZVwiIChjbGljayk9XCJ0aGlzLmNoYW5nZUxhbmd1YWdlKGxhbmd1YWdlLmlkKVwiPlxuICAgICAgICAgIDx0YS1saXN0LXRpdGxlIGNsYXNzPVwiZC1mbGV4IHAtc3BhY2UteHNcIj5cbiAgICAgICAgICAgIHt7IGxhbmd1YWdlLm5hbWUgfCB0cmFuc2xhdGUgfX1cbiAgICAgICAgICA8L3RhLWxpc3QtdGl0bGU+XG4gICAgICAgICAgQGlmIChsYW5ndWFnZS5pZCA9PT0gdGhpcy5hY3RpdmVMYW5ndWFnZSkge1xuICAgICAgICAgICAgPHRhLWxpc3QtdGFnPlxuICAgICAgICAgICAgICA8dGEtZm9udC1pY29uIG5hbWU9XCJjaGVjay1saW5lXCIgY2xhc3M9XCJjb2xvci1zZW1hbnRpYy10b2tlbi1zdWNjZXNzXCI+PC90YS1mb250LWljb24+XG4gICAgICAgICAgICA8L3RhLWxpc3QtdGFnPlxuICAgICAgICAgIH1cbiAgICAgICAgPC90YS1saXN0LWVsZW1lbnQ+XG4gICAgICB9XG4gICAgPC90YS1saXN0LWNvbnRhaW5lcj5cbiAgPC9kaXY+XG48L3RhLWxvYWRlcj5cbiJdfQ==