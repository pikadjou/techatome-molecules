import { NgFor, NgIf } from '@angular/common';
import { Component, inject } from '@angular/core';
import { FontIconComponent } from '@ta/icons';
import { TaTranslationService, TranslatePipe } from '@ta/translation';
import { ListContainerComponent, ListElementComponent, ListTagComponent, ListTitleComponent, LoaderComponent, } from '@ta/ui';
import * as i0 from "@angular/core";
export class SwitchLanguageComponent {
    constructor() {
        this.translateService = inject(TaTranslationService);
        this.languages = [
            { id: 'fr', name: 'Français' },
            { id: 'nl', name: 'Nederlands' },
            { id: 'en', name: 'English' },
            { id: 'es', name: 'Español' },
        ];
        this.activeLanguage = this.translateService.getLanguage();
        this.changeLanguageAsked = false;
    }
    changeLanguage(language) {
        if (this.activeLanguage != language) {
            this.activeLanguage = language;
            this.changeLanguageAsked = true;
            this.translateService.use(language);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SwitchLanguageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: SwitchLanguageComponent, isStandalone: true, selector: "ta-switch-language", ngImport: i0, template: "<ta-loader [isLoading]=\"this.changeLanguageAsked\">\n  <div class=\"mx-space-sm language-panel\">\n    <ta-list-container>\n      @for (language of this.languages; track language.id) {\n        <ta-list-element [withSeparator]=\"false\" (click)=\"this.changeLanguage(language.id)\">\n          <ta-list-title class=\"d-flex p-space-xs\">\n            {{ language.name | translate }}\n          </ta-list-title>\n          @if (language.id === this.activeLanguage) {\n            <ta-list-tag>\n              <ta-font-icon name=\"check-line\" class=\"color-semantic-token-success\"></ta-font-icon>\n            </ta-list-tag>\n          }\n        </ta-list-element>\n      }\n    </ta-list-container>\n  </div>\n</ta-loader>\n", styles: [""], dependencies: [{ kind: "component", type: FontIconComponent, selector: "ta-font-icon", inputs: ["name", "type"] }, { kind: "component", type: ListTagComponent, selector: "ta-list-tag" }, { kind: "component", type: LoaderComponent, selector: "ta-loader", inputs: ["isLoading", "skeleton"] }, { kind: "component", type: ListContainerComponent, selector: "ta-list-container" }, { kind: "component", type: ListElementComponent, selector: "ta-list-element", inputs: ["withSeparator", "flexColumn"], outputs: ["action"] }, { kind: "component", type: ListTitleComponent, selector: "ta-list-title" }, { kind: "pipe", type: TranslatePipe, name: "translate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: SwitchLanguageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-switch-language', standalone: true, imports: [
                        NgIf,
                        NgFor,
                        FontIconComponent,
                        ListTagComponent,
                        LoaderComponent,
                        ListContainerComponent,
                        ListElementComponent,
                        ListTitleComponent,
                        TranslatePipe,
                    ], template: "<ta-loader [isLoading]=\"this.changeLanguageAsked\">\n  <div class=\"mx-space-sm language-panel\">\n    <ta-list-container>\n      @for (language of this.languages; track language.id) {\n        <ta-list-element [withSeparator]=\"false\" (click)=\"this.changeLanguage(language.id)\">\n          <ta-list-title class=\"d-flex p-space-xs\">\n            {{ language.name | translate }}\n          </ta-list-title>\n          @if (language.id === this.activeLanguage) {\n            <ta-list-tag>\n              <ta-font-icon name=\"check-line\" class=\"color-semantic-token-success\"></ta-font-icon>\n            </ta-list-tag>\n          }\n        </ta-list-element>\n      }\n    </ta-list-container>\n  </div>\n</ta-loader>\n" }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLWxhbmd1YWdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvbW9kdWxlcy91c2VyL2NvbXBvbmVudHMvc3dpdGNoLWxhbmd1YWdlL3N3aXRjaC1sYW5ndWFnZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL21vZHVsZXMvdXNlci9jb21wb25lbnRzL3N3aXRjaC1sYW5ndWFnZS9zd2l0Y2gtbGFuZ3VhZ2UuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVsRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDOUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RFLE9BQU8sRUFDTCxzQkFBc0IsRUFDdEIsb0JBQW9CLEVBQ3BCLGdCQUFnQixFQUNoQixrQkFBa0IsRUFDbEIsZUFBZSxHQUNoQixNQUFNLFFBQVEsQ0FBQzs7QUFtQmhCLE1BQU0sT0FBTyx1QkFBdUI7SUFqQnBDO1FBa0JXLHFCQUFnQixHQUFHLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2hELGNBQVMsR0FBRztZQUNuQixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUM5QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUNoQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtZQUM3QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtTQUM5QixDQUFDO1FBRUssbUJBQWMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckQsd0JBQW1CLEdBQVksS0FBSyxDQUFDO0tBUzdDO0lBUFEsY0FBYyxDQUFDLFFBQWdCO1FBQ3BDLElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNwQyxJQUFJLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQztZQUMvQixJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO1lBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEMsQ0FBQztJQUNILENBQUM7K0dBbEJVLHVCQUF1QjttR0FBdkIsdUJBQXVCLDhFQzlCcEMseXRCQWtCQSwwRERHSSxpQkFBaUIsbUZBQ2pCLGdCQUFnQix3REFDaEIsZUFBZSx5RkFDZixzQkFBc0IsOERBQ3RCLG9CQUFvQiwwSEFDcEIsa0JBQWtCLHFEQUNsQixhQUFhOzs0RkFHSix1QkFBdUI7a0JBakJuQyxTQUFTOytCQUNFLG9CQUFvQixjQUdsQixJQUFJLFdBQ1A7d0JBQ1AsSUFBSTt3QkFDSixLQUFLO3dCQUNMLGlCQUFpQjt3QkFDakIsZ0JBQWdCO3dCQUNoQixlQUFlO3dCQUNmLHNCQUFzQjt3QkFDdEIsb0JBQW9CO3dCQUNwQixrQkFBa0I7d0JBQ2xCLGFBQWE7cUJBQ2QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ0ZvciwgTmdJZiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDb21wb25lbnQsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBGb250SWNvbkNvbXBvbmVudCB9IGZyb20gJ0B0YS9pY29ucyc7XG5pbXBvcnQgeyBUYVRyYW5zbGF0aW9uU2VydmljZSwgVHJhbnNsYXRlUGlwZSB9IGZyb20gJ0B0YS90cmFuc2xhdGlvbic7XG5pbXBvcnQge1xuICBMaXN0Q29udGFpbmVyQ29tcG9uZW50LFxuICBMaXN0RWxlbWVudENvbXBvbmVudCxcbiAgTGlzdFRhZ0NvbXBvbmVudCxcbiAgTGlzdFRpdGxlQ29tcG9uZW50LFxuICBMb2FkZXJDb21wb25lbnQsXG59IGZyb20gJ0B0YS91aSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhLXN3aXRjaC1sYW5ndWFnZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9zd2l0Y2gtbGFuZ3VhZ2UuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9zd2l0Y2gtbGFuZ3VhZ2UuY29tcG9uZW50LnNjc3MnXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW1xuICAgIE5nSWYsXG4gICAgTmdGb3IsXG4gICAgRm9udEljb25Db21wb25lbnQsXG4gICAgTGlzdFRhZ0NvbXBvbmVudCxcbiAgICBMb2FkZXJDb21wb25lbnQsXG4gICAgTGlzdENvbnRhaW5lckNvbXBvbmVudCxcbiAgICBMaXN0RWxlbWVudENvbXBvbmVudCxcbiAgICBMaXN0VGl0bGVDb21wb25lbnQsXG4gICAgVHJhbnNsYXRlUGlwZSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgU3dpdGNoTGFuZ3VhZ2VDb21wb25lbnQge1xuICByZWFkb25seSB0cmFuc2xhdGVTZXJ2aWNlID0gaW5qZWN0KFRhVHJhbnNsYXRpb25TZXJ2aWNlKTtcbiAgcmVhZG9ubHkgbGFuZ3VhZ2VzID0gW1xuICAgIHsgaWQ6ICdmcicsIG5hbWU6ICdGcmFuw6dhaXMnIH0sXG4gICAgeyBpZDogJ25sJywgbmFtZTogJ05lZGVybGFuZHMnIH0sXG4gICAgeyBpZDogJ2VuJywgbmFtZTogJ0VuZ2xpc2gnIH0sXG4gICAgeyBpZDogJ2VzJywgbmFtZTogJ0VzcGHDsW9sJyB9LFxuICBdO1xuXG4gIHB1YmxpYyBhY3RpdmVMYW5ndWFnZSA9IHRoaXMudHJhbnNsYXRlU2VydmljZS5nZXRMYW5ndWFnZSgpO1xuICBwdWJsaWMgY2hhbmdlTGFuZ3VhZ2VBc2tlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHB1YmxpYyBjaGFuZ2VMYW5ndWFnZShsYW5ndWFnZTogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlTGFuZ3VhZ2UgIT0gbGFuZ3VhZ2UpIHtcbiAgICAgIHRoaXMuYWN0aXZlTGFuZ3VhZ2UgPSBsYW5ndWFnZTtcbiAgICAgIHRoaXMuY2hhbmdlTGFuZ3VhZ2VBc2tlZCA9IHRydWU7XG4gICAgICB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UudXNlKGxhbmd1YWdlKTtcbiAgICB9XG4gIH1cbn1cbiIsIjx0YS1sb2FkZXIgW2lzTG9hZGluZ109XCJ0aGlzLmNoYW5nZUxhbmd1YWdlQXNrZWRcIj5cbiAgPGRpdiBjbGFzcz1cIm14LXNwYWNlLXNtIGxhbmd1YWdlLXBhbmVsXCI+XG4gICAgPHRhLWxpc3QtY29udGFpbmVyPlxuICAgICAgQGZvciAobGFuZ3VhZ2Ugb2YgdGhpcy5sYW5ndWFnZXM7IHRyYWNrIGxhbmd1YWdlLmlkKSB7XG4gICAgICAgIDx0YS1saXN0LWVsZW1lbnQgW3dpdGhTZXBhcmF0b3JdPVwiZmFsc2VcIiAoY2xpY2spPVwidGhpcy5jaGFuZ2VMYW5ndWFnZShsYW5ndWFnZS5pZClcIj5cbiAgICAgICAgICA8dGEtbGlzdC10aXRsZSBjbGFzcz1cImQtZmxleCBwLXNwYWNlLXhzXCI+XG4gICAgICAgICAgICB7eyBsYW5ndWFnZS5uYW1lIHwgdHJhbnNsYXRlIH19XG4gICAgICAgICAgPC90YS1saXN0LXRpdGxlPlxuICAgICAgICAgIEBpZiAobGFuZ3VhZ2UuaWQgPT09IHRoaXMuYWN0aXZlTGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgIDx0YS1saXN0LXRhZz5cbiAgICAgICAgICAgICAgPHRhLWZvbnQtaWNvbiBuYW1lPVwiY2hlY2stbGluZVwiIGNsYXNzPVwiY29sb3Itc2VtYW50aWMtdG9rZW4tc3VjY2Vzc1wiPjwvdGEtZm9udC1pY29uPlxuICAgICAgICAgICAgPC90YS1saXN0LXRhZz5cbiAgICAgICAgICB9XG4gICAgICAgIDwvdGEtbGlzdC1lbGVtZW50PlxuICAgICAgfVxuICAgIDwvdGEtbGlzdC1jb250YWluZXI+XG4gIDwvZGl2PlxuPC90YS1sb2FkZXI+XG4iXX0=