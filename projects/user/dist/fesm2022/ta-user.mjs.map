{"version":3,"file":"ta-user.mjs","sources":["../../src/lib/modules/user/services/permissions.service.ts","../../src/lib/modules/user/guards/auth.guard.ts","../../src/lib/modules/user/guards/feature.guard.ts","../../src/lib/modules/user/guards/public-api.ts","../../src/lib/modules/user/services/dto/user-profile.ts","../../src/lib/modules/user/services/queries.ts","../../src/lib/modules/user/services/user.service.ts","../../src/lib/modules/user/services/auth.service.ts","../../src/lib/modules/user/components/login/login-card.component.ts","../../src/lib/modules/user/components/login/login-card.component.html","../../src/lib/modules/user/components/login/redirect/login.component.ts","../../src/lib/modules/user/components/login/redirect/signin.component.ts","../../src/lib/modules/user/components/my-account/my-account.component.ts","../../src/lib/modules/user/components/my-account/my-account.component.html","../../src/lib/modules/user/components/guard/guard.component.ts","../../src/lib/modules/user/components/guard/guard.component.html","../../src/lib/modules/user/components/switch-language/switch-language.component.ts","../../src/lib/modules/user/components/switch-language/switch-language.component.html","../../src/lib/modules/user/components/switch-language/switch-language-cta/switch-language-cta.component.ts","../../src/lib/modules/user/components/switch-language/switch-language-cta/switch-language-cta.component.html","../../src/lib/modules/user/provide.ts","../../src/lib/modules/auth0/services/auth0.service.ts","../../src/lib/modules/auth0/provide.ts","../../src/public-api.ts","../../src/ta-user.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { BehaviorSubject, Observable, filter, map } from 'rxjs';\r\n\r\nimport { Logger } from '@ta/server';\r\nimport { isNonNullable } from '@ta/utils';\r\n\r\nexport type Level = 'authenticated' | 'unauthenticated' | 'authorize' | 'administrator';\r\n\r\nexport type PermissionFeature = 'tenant' | 'onwer' | 'premium';\r\nexport type Domain = 'tenant' | 'onwer';\r\n\r\nconst accessLevels = [''];\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaPermissionsService {\r\n  private _updated$ = new BehaviorSubject<number | null>(null);\r\n  private _isFill = { permissions: false, isAuthenticated: false };\r\n\r\n  public features: (PermissionFeature | string)[] = [];\r\n  public guards: { [index: string]: Level } = {};\r\n  public roles: string[] = [];\r\n  public isAuthenticated: boolean = false;\r\n\r\n  public updated$ = this._updated$.pipe(filter(isNonNullable));\r\n\r\n  get received() {\r\n    return this._updated$.value !== null;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  public set(\r\n    info: {\r\n      permissions: string[];\r\n      roles: string[];\r\n      features: PermissionFeature[];\r\n    },\r\n    isAuthenticated: boolean\r\n  ) {\r\n    Logger.LogInfo('[PERMISSIONS] List brut:', info.permissions);\r\n\r\n    this.features = info.features ?? [];\r\n    this.roles = info.roles ?? [];\r\n\r\n    this.guards = this.roles.reduce<typeof this.guards>((acc, role) => {\r\n      if (!role.includes('-')) {\r\n        return acc;\r\n      }\r\n      const [domain, access] = role.split('-');\r\n\r\n      const lastAccess = accessLevels.indexOf(access) > accessLevels.indexOf(acc[domain] || '') ? access : acc[domain];\r\n      return {\r\n        ...acc,\r\n        [domain]: <Level>lastAccess,\r\n      };\r\n    }, {});\r\n    Logger.LogInfo('[PERMISSIONS] Guard', this.guards);\r\n\r\n    this._isFill.permissions = true;\r\n\r\n    this.setSilentAuthenticated(isAuthenticated);\r\n\r\n    this._canYouUpdate();\r\n  }\r\n\r\n  public setSilentAuthenticated(isAuthenticated: boolean) {\r\n    this.isAuthenticated = isAuthenticated;\r\n    this._isFill.isAuthenticated = true;\r\n\r\n    this._canYouUpdate();\r\n  }\r\n  public setAuthenticated(isAuthenticated: boolean) {\r\n    this.isAuthenticated = isAuthenticated;\r\n\r\n    this._updated$.next(Date.now());\r\n  }\r\n\r\n  public hasRole(role: string): boolean {\r\n    return this.roles.some(x => x === role);\r\n  }\r\n\r\n  public canDirectAccess(feature: PermissionFeature | Domain | string, level: Level | string) {\r\n    if (level === 'authenticated') {\r\n      return this.isAuthenticated;\r\n    }\r\n    if (level === 'unauthenticated') {\r\n      return !this.isAuthenticated;\r\n    }\r\n\r\n    if (level === 'authorize') {\r\n      return this.features.includes(feature);\r\n    }\r\n\r\n    if (!feature) {\r\n      return true;\r\n    }\r\n\r\n    const featureGuard = this.guards[feature];\r\n    if (!featureGuard) {\r\n      return true;\r\n    }\r\n\r\n    return accessLevels.indexOf(featureGuard) >= accessLevels.indexOf(level);\r\n  }\r\n\r\n  public canAccess$(feature: PermissionFeature | string, level: Level | string): Observable<boolean> {\r\n    return this._updated$.pipe(map(() => this.canDirectAccess(feature, level)));\r\n  }\r\n\r\n  private _canYouUpdate() {\r\n    if (!this._isFill.isAuthenticated || !this._isFill.permissions) {\r\n      return;\r\n    }\r\n    this._updated$.next(Date.now());\r\n  }\r\n}\r\n","import { Injectable, inject } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { map } from 'rxjs/operators';\n\nimport { Observable } from 'rxjs';\n\nimport { TaRoutes } from '@ta/menu';\n\nimport { TaPermissionsService } from '../services/permissions.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard {\n  public readonly _permissionsService = inject(TaPermissionsService);\n\n  constructor(private router: Router) {}\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | boolean {\n    if (!this._permissionsService.received) {\n      return this._permissionsService.updated$.pipe(\n        map(() => {\n          if (this._permissionsService.isAuthenticated) {\n            return true;\n          } else {\n            this.setRedirect();\n            return false;\n          }\n        })\n      );\n    }\n    if (this._permissionsService.isAuthenticated === false) {\n      this.setRedirect();\n      return false;\n    }\n    return this._permissionsService.isAuthenticated;\n  }\n\n  public setRedirect(): void {\n    this.router.navigateByUrl(TaRoutes.getLogin());\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router } from '@angular/router';\n\nimport { map } from 'rxjs/operators';\n\nimport { Observable } from 'rxjs';\n\nimport { TaRoutes } from '@ta/menu';\n\nimport { Domain, Level, PermissionFeature, TaPermissionsService } from '../services/permissions.service';\n\nexport interface FeatureRouteData {\n  feature: PermissionFeature | Domain;\n  level: Level;\n}\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureGuard {\n  public readonly _permissionsService = inject(TaPermissionsService);\n\n  constructor(private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> | boolean {\n    const level = route.data['level'];\n    const feature = route.data['feature'];\n\n    if (this._permissionsService.received === true) {\n      return this._isValidPermission(feature, level);\n    }\n    return this._permissionsService.updated$.pipe(\n      map(() => {\n        return this._isValidPermission(feature, level);\n      })\n    );\n  }\n\n  public setRedirect(): void {\n    this.router.navigateByUrl(TaRoutes.getHome());\n  }\n\n  private _isValidPermission(feature: string, level: string) {\n    if (this._permissionsService.canDirectAccess(feature, level)) {\n      return true;\n    }\n    this.setRedirect();\n    return false;\n  }\n}\n","/*\n * Public API Surface of users\n */\n\nexport * from './auth.guard';\nexport * from './feature.guard';\n","import { GraphSchema } from '@ta/server';\n\nexport interface UserProfile {\n  id: string;\n  firstname: string;\n  lastname: string;\n  email: string;\n  picture: string;\n  dateOfBirth: string;\n}\n\nexport const userProfileBrutProps: (keyof UserProfile)[] = [\n  'id',\n  'firstname',\n  'lastname',\n  'email',\n  'picture',\n  'dateOfBirth',\n];\n\nexport const userProfileProps = new GraphSchema<UserProfile>(userProfileBrutProps);\n","import { Apollo_gql, GraphQueryInput, GraphQueryPayload } from '@ta/server';\r\n\r\nexport function userInfo({ props }: GraphQueryInput): GraphQueryPayload {\r\n  return {\r\n    query: Apollo_gql`\r\n        query UserInfo {\r\n          userInfo {\r\n            ${props}\r\n          }\r\n        }\r\n      `,\r\n    variables: {},\r\n  };\r\n}\r\n","import { Injectable, InjectionToken } from '@angular/core';\n\nimport { filter } from 'rxjs';\n\nimport { GraphEndpoint, HandleSimpleRequest } from '@ta/server';\nimport { TaBaseService } from '@ta/server';\nimport { isNonNullable } from '@ta/utils';\n\nimport { UserProfile, userProfileProps } from './dto/user-profile';\nimport { userInfo } from './queries';\n\nexport const TA_USER_SERVICE = new InjectionToken<TaUserService>('TaUserService_injection-token');\n\nconst graphEndpoint: GraphEndpoint = {\n  clientName: 'userService',\n  endpoint: '',\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaUserService<T = UserProfile> extends TaBaseService {\n  public userProfile = new HandleSimpleRequest<T>();\n\n  constructor() {\n    super();\n    super.registerRoutes({ graphEndpoint: graphEndpoint });\n  }\n\n  public fetchUserProfile$(props: string = '') {\n    return this.userProfile.fetch(\n      this._graphService\n        .fetchQuery<T>(\n          userInfo({\n            props: `\n              ${userProfileProps.get('id')}\n              ${userProfileProps.get('firstname')}\n              ${userProfileProps.get('lastname')}\n              ${userProfileProps.get('email')}\n              ${userProfileProps.get('picture')}\n              ${userProfileProps.get('dateOfBirth')}\n              ${props}\n            `,\n          }),\n          'userInfo',\n          graphEndpoint.clientName\n        )\n        .pipe(filter(isNonNullable))\n    );\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { InjectionToken } from '@angular/core';\n\nimport { BehaviorSubject, Observable, filter, switchMap } from 'rxjs';\n\nimport { MappingApiType, TaBaseService } from '@ta/server';\n\nimport { UserProfile } from './dto/user-profile';\nimport { TaPermissionsService } from './permissions.service';\n\nexport const TA_AUTH_TOKEN = new InjectionToken<TaAuthService>('TaAuthService');\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class TaAuthService extends TaBaseService {\n  public readonly _permissionsService = inject(TaPermissionsService);\n  public isAuthenticated$ = this._permissionsService.canAccess$('', 'authenticated');\n\n  user$ = new BehaviorSubject<unknown>(null);\n\n  abstract get userProfile$(): Observable<UserProfile | null>;\n\n  abstract fetchUserProfile$(): Observable<UserProfile>;\n  abstract load(): void;\n  abstract login(): void;\n  abstract signin(): void;\n  abstract logout(): Promise<null>;\n\n  constructor(apiRoutes?: MappingApiType) {\n    super(apiRoutes);\n    this.user$\n      .pipe(\n        filter(user => !!user),\n        switchMap(() => this.fetchUserProfile$())\n      )\n      .subscribe();\n  }\n}\n","import { Component, inject } from '@angular/core';\n\nimport { TranslatePipe } from '@ta/translation';\nimport { ButtonComponent, CardComponent, CardContentComponent } from '@ta/ui';\n\nimport { TA_AUTH_TOKEN } from '../../services/auth.service';\n\n@Component({\n  selector: 'ta-login-card',\n  templateUrl: './login-card.component.html',\n  styleUrls: ['./login-card.component.scss'],\n  standalone: true,\n  imports: [CardComponent, CardContentComponent, ButtonComponent, TranslatePipe],\n})\nexport class LoginCardComponent {\n  private _authService = inject(TA_AUTH_TOKEN);\n\n  constructor() {}\n\n  public login() {\n    this._authService.login();\n  }\n}\n","<ta-card (click)=\"this.login()\">\n  <ta-card-content>\n    <ta-button (action)=\"this.login()\">{{ 'user.login' | translate }}</ta-button>\n  </ta-card-content>\n</ta-card>\n","import { Component, inject } from '@angular/core';\n\nimport { TA_AUTH_TOKEN } from '../../../services/auth.service';\n\n@Component({\n  selector: '',\n  template: '',\n  standalone: true,\n})\nexport class LoginRedirectComponent {\n  private _authService = inject(TA_AUTH_TOKEN);\n\n  constructor() {\n    this._authService.login();\n  }\n}\n","import { Component, inject } from '@angular/core';\n\nimport { TA_AUTH_TOKEN } from '../../../services/auth.service';\n\n@Component({\n  selector: '',\n  template: '',\n  standalone: true,\n})\nexport class SignRedirectComponent {\n  private _authService = inject(TA_AUTH_TOKEN);\n\n  constructor() {\n    this._authService.signin();\n  }\n}\n","import { AsyncPipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnInit, Output, inject, signal } from '@angular/core';\n\nimport { Observable, map } from 'rxjs';\n\nimport { FontIconComponent } from '@ta/icons';\nimport { Menu, MenuComponent, MenuIcon } from '@ta/menu';\nimport { TaSizes } from '@ta/styles';\nimport { TranslatePipe } from '@ta/translation';\nimport { ButtonComponent, EmptyComponent, ErrorComponent, LoaderComponent, UserLogoData } from '@ta/ui';\nimport { InlineProfileDataComponent } from '@ta/ui';\nimport { StopPropagationDirective } from '@ta/utils';\nimport { TaBaseComponent } from '@ta/utils';\n\nimport { TA_AUTH_TOKEN } from '../../services/auth.service';\nimport { TA_USER_SERVICE } from '../../services/user.service';\n\n@Component({\n  selector: 'ta-my-account',\n  templateUrl: './my-account.component.html',\n  styleUrls: ['./my-account.component.scss'],\n  standalone: true,\n  imports: [\n    AsyncPipe,\n    FontIconComponent,\n    StopPropagationDirective,\n    LoaderComponent,\n    ErrorComponent,\n    EmptyComponent,\n    ButtonComponent,\n    MenuComponent,\n    TranslatePipe,\n    InlineProfileDataComponent,\n    StopPropagationDirective,\n  ],\n})\nexport class MyAccountComponent extends TaBaseComponent implements OnInit {\n  @Input()\n  profileMenu: Menu | null = null;\n\n  @Input()\n  appVersion: string | null = null;\n\n  @Input()\n  isEditable: boolean = false;\n\n  @Output()\n  navigateEvent = new EventEmitter();\n\n  @Output()\n  navigateEditEvent = new EventEmitter();\n\n  private _userService = inject(TA_USER_SERVICE);\n  private _authService = inject(TA_AUTH_TOKEN);\n\n  public disconnectionMenu = signal<Menu | null>(null);\n  public userLogo$ = signal<\n    Observable<{\n      user: UserLogoData;\n      size?: TaSizes;\n    } | null>\n  >(\n    this._userService.userProfile.get$().pipe(\n      map(up => {\n        if (!up) {\n          return null;\n        }\n\n        return {\n          user: {\n            picture: up.picture,\n            lastname: up.lastname ?? '',\n            firstname: up.firstname ?? '',\n          },\n          size: 'lg',\n        };\n      })\n    )\n  );\n  constructor() {\n    super();\n  }\n\n  get profile$() {\n    return this._userService.userProfile.get$().pipe(\n      map(data => {\n        return {\n          title: {\n            second: data?.firstname || data?.lastname,\n          },\n          email: data?.email || '',\n        };\n      })\n    );\n  }\n\n  ngOnInit() {\n    this.disconnectionMenu.set(this.getDisconnectionMenu());\n  }\n\n  public navigateToProfile() {\n    this.navigateEvent.emit();\n  }\n\n  public disconnect() {\n    this._authService.logout().then(() => location.reload());\n  }\n\n  public getDisconnectionMenu() {\n    const menu = [\n      new MenuIcon({\n        key: 'logout',\n        label: 'user.logout',\n        order: 4,\n        style: 'dark',\n        icon: 'log-out',\n        iconsColor: 'icon-color-icon-tertiary',\n        callback: () => this.disconnect(),\n      }),\n    ];\n\n    return new Menu({\n      elements: menu.sort((a, b) => a.order - b.order),\n      direction: 'vertical',\n    });\n  }\n\n  public navigateToEditProfile() {\n    this.navigateEditEvent.emit();\n  }\n}\n","@let profile = this.profile$ | async;\n<div class=\"mx-space-sm\" appStopPropagation>\n  <ta-loader [isLoading]=\"this.requestState.isLoading()\">\n    <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n      <ta-empty [isEmpty]=\"!profile\">\n          <div class=\"p-space-sm bdp-b color-border-primary\">\n            <ta-inline-profile-data\n              [profile]=\"profile ?? {}\"\n              [userLogo]=\"this.userLogo$() | async\"\n              (click)=\"this.navigateToProfile()\"\n            ></ta-inline-profile-data>\n            @if (this.isEditable) {\n              <div class=\"my-space-md\">\n                <ta-button (action)=\"this.navigateToEditProfile()\" [style]=\"'secondary'\">\n                  <div class=\"align-center button-content\">\n                    <ta-font-icon name=\"modify\" class=\"mr-space-xs modify-icon\"></ta-font-icon>\n                    <div class=\"text\">\n                      {{ 'user.modify' | translate }}\n                    </div>\n                  </div>\n                </ta-button>\n              </div>\n            }\n          </div>\n      </ta-empty>\n    </ta-error>\n  </ta-loader>\n  @if (this.profileMenu) {\n    <div class=\"bdp-b color-border-primary pt-space-xs\">\n      <ta-menu [menu]=\"this.profileMenu\" [style]=\"'dark'\" [container]=\"'overflow'\"></ta-menu>\n    </div>\n  }\n@let disconnectionMenu = this.disconnectionMenu();\n  @if (disconnectionMenu) {\n    <div class=\"bdp-b pt-space-xs\">\n      <ta-menu [menu]=\"disconnectionMenu\" [style]=\"'dark'\"></ta-menu>\n    </div>\n  }\n  <div class=\"ta-c\">\n    <small>{{ this.appVersion }}</small>\n  </div>\n</div>\n\n","import { AsyncPipe } from '@angular/common';\nimport { Component, Input, inject } from '@angular/core';\n\nimport { FontIconComponent } from '@ta/icons';\nimport { TaIconType } from '@ta/icons';\nimport { TaMainRoute, TaRoutes } from '@ta/menu';\nimport { TranslatePipe } from '@ta/translation';\nimport { ButtonComponent } from '@ta/ui';\nimport { TaAbstractComponent } from '@ta/utils';\n\nimport { Domain, Level, PermissionFeature, TaPermissionsService } from '../../services/permissions.service';\n\n@Component({\n  selector: 'ta-guard',\n  templateUrl: './guard.component.html',\n  styleUrls: ['./guard.component.scss'],\n  standalone: true,\n  imports: [AsyncPipe, FontIconComponent, ButtonComponent, TranslatePipe],\n})\nexport class GuardComponent extends TaAbstractComponent {\n  @Input()\n  level!: Level | string;\n\n  @Input()\n  feature!: PermissionFeature | Domain | string;\n\n  @Input()\n  canDisplayErrorMessage: boolean = true;\n\n  private readonly _permissionsService = inject(TaPermissionsService);\n  get noAccessIcon() {\n    return TaIconType.NoAccess;\n  }\n\n  constructor() {\n    super();\n  }\n\n  public isGuardValid$() {\n    return this._permissionsService.canAccess$(this.feature, this.level);\n  }\n\n  public goToLogin() {\n    this._router.navigateByUrl(TaRoutes.getUrl([TaMainRoute.USERLOGIN]));\n  }\n}\n","@let isValid = this.isGuardValid$() | async;\n\n<div class=\"guard\">\n  @if (isValid) {\n    <div class=\"guard-valid\">\n      <ng-content></ng-content>\n    </div>\n  }\n  @if (!isValid && this.canDisplayErrorMessage) {\n    <div class=\"guard-no-valid ta-c\">\n      <ta-font-icon name=\"close-tool\" size=\"md\"></ta-font-icon>\n      {{ 'container.guard.content' | translate }}\n\n      @if (this.level === 'authenticated') {\n        <ta-button (action)=\"this.goToLogin()\"> Me connecter </ta-button>\n      }\n    </div>\n  }\n</div>\n","import { NgFor, NgIf } from '@angular/common';\nimport { Component, inject } from '@angular/core';\n\nimport { FontIconComponent } from '@ta/icons';\nimport { TaTranslationService, TranslatePipe } from '@ta/translation';\nimport {\n  ListContainerComponent,\n  ListElementComponent,\n  ListTagComponent,\n  ListTitleComponent,\n  LoaderComponent,\n} from '@ta/ui';\n\n@Component({\n  selector: 'ta-switch-language',\n  templateUrl: './switch-language.component.html',\n  styleUrls: ['./switch-language.component.scss'],\n  standalone: true,\n  imports: [\n    NgIf,\n    NgFor,\n    FontIconComponent,\n    ListTagComponent,\n    LoaderComponent,\n    ListContainerComponent,\n    ListElementComponent,\n    ListTitleComponent,\n    TranslatePipe,\n  ],\n})\nexport class SwitchLanguageComponent {\n  readonly translateService = inject(TaTranslationService);\n  readonly languages = [\n    { id: 'fr', name: 'Français' },\n    { id: 'nl', name: 'Nederlands' },\n    { id: 'en', name: 'English' },\n    { id: 'es', name: 'Español' },\n  ];\n\n  public activeLanguage = this.translateService.getLanguage();\n  public changeLanguageAsked: boolean = false;\n\n  public changeLanguage(language: string) {\n    if (this.activeLanguage != language) {\n      this.activeLanguage = language;\n      this.changeLanguageAsked = true;\n      this.translateService.use(language);\n    }\n  }\n}\n","<ta-loader [isLoading]=\"this.changeLanguageAsked\">\n  <div class=\"mx-space-sm language-panel\">\n    <ta-list-container>\n      @for (language of this.languages; track language.id) {\n        <ta-list-element [withSeparator]=\"false\" (click)=\"this.changeLanguage(language.id)\">\n          <ta-list-title class=\"d-flex p-space-xs\">\n            {{ language.name | translate }}\n          </ta-list-title>\n          @if (language.id === this.activeLanguage) {\n            <ta-list-tag>\n              <ta-font-icon name=\"check-line\" class=\"color-semantic-token-success\"></ta-font-icon>\n            </ta-list-tag>\n          }\n        </ta-list-element>\n      }\n    </ta-list-container>\n  </div>\n</ta-loader>\n","import { Component, inject } from '@angular/core';\nimport { MatMenu, MatMenuTrigger } from '@angular/material/menu';\n\nimport { FontIconComponent } from '@ta/icons';\nimport { TaTranslationService } from '@ta/translation';\n\nimport { SwitchLanguageComponent } from '../switch-language.component';\n\n@Component({\n  selector: 'ta-switch-language-cta',\n  templateUrl: './switch-language-cta.component.html',\n  styleUrls: ['./switch-language-cta.component.scss'],\n  standalone: true,\n  imports: [FontIconComponent, MatMenu, SwitchLanguageComponent, MatMenuTrigger],\n})\nexport class SwitchLanguageCtaComponent {\n  readonly translateService = inject(TaTranslationService);\n\n  public activeLanguage = this.translateService.getLanguage();\n}\n","<div [matMenuTriggerFor]=\"menu\" class=\"flex-start g-space-sm c-pointer\">\n  {{ this.activeLanguage.toLocaleUpperCase() }}\n  <ta-font-icon name=\"arrow-big-bottom\"></ta-font-icon>\n</div>\n\n<mat-menu #menu=\"matMenu\">\n  <ta-switch-language></ta-switch-language>\n</mat-menu>\n","import { Provider } from '@angular/core';\r\n\r\nimport { TA_USER_SERVICE, TaUserService } from './services/user.service';\r\n\r\nexport const provideUser = (data: { service: typeof TaUserService }): Provider => [\r\n  { provide: TA_USER_SERVICE, useClass: data.service },\r\n];\r\n","import { Injectable, inject } from '@angular/core';\n\nimport { AuthService } from '@auth0/auth0-angular';\nimport { distinct, filter, tap } from 'rxjs';\n\nimport { Logger } from '@ta/server';\nimport { isNonNullable } from '@ta/utils';\n\nimport { TaAuthService } from '../../user/services/auth.service';\nimport { TA_USER_SERVICE } from '../../user/services/user.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaAuth0Service extends TaAuthService {\n  get userProfile$() {\n    return this.userService.userProfile.get$();\n  }\n\n  public auth = inject(AuthService);\n  public userService = inject(TA_USER_SERVICE);\n\n  constructor() {\n    super();\n\n    this.auth.user$\n      .pipe(\n        filter(isNonNullable),\n        distinct(user => user?.sub),\n        tap(user => this.user$.next(user || null)),\n        tap(user => {\n          Logger.LogInfo('user info', user);\n          if (user) {\n            this._permissionsService.set(\n              {\n                permissions: [],\n                roles: [],\n                features: [],\n              },\n              true\n            );\n          }\n        })\n      )\n      .subscribe();\n\n    this.auth.error$\n      .pipe(\n        tap(errors => {\n          Logger.LogError('[USERSERVICE] error on authentication', errors);\n        })\n      )\n      .subscribe();\n\n    this.auth.appState$\n      .pipe(\n        tap(state => {\n          Logger.LogInfo('[USERSERVICE] state', state);\n        })\n      )\n      .subscribe();\n\n    this.auth.isAuthenticated$\n      .pipe(\n        tap(isAuthenticated => {\n          this._serverService.isAuthenticated = isAuthenticated;\n          if (isAuthenticated) {\n            this._permissionsService.setSilentAuthenticated(isAuthenticated);\n          } else {\n            this._permissionsService.setAuthenticated(isAuthenticated);\n          }\n        })\n      )\n      .subscribe();\n  }\n\n  public fetchUserProfile$() {\n    return this.userService.fetchUserProfile$();\n  }\n\n  public load() {}\n  public login() {\n    this.auth.loginWithRedirect();\n  }\n  public signin() {\n    this.auth.loginWithRedirect({\n      authorizationParams: {\n        screen_hint: 'signup',\n      },\n    });\n  }\n  public logout() {\n    return new Promise<null>(resolve => {\n      this.auth.logout();\n    });\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Provider } from '@angular/core';\r\n\r\nimport { AuthConfig, AuthHttpInterceptor, provideAuth0 as provideBaseAuth0 } from '@auth0/auth0-angular';\r\n\r\nimport { TA_AUTH_TOKEN } from '../user/services/auth.service';\r\nimport { TaAuth0Service } from './services/auth0.service';\r\n\r\nexport interface TaAuth0Environment extends AuthConfig {}\r\n\r\nexport const provideAuth0 = (data: { config: TaAuth0Environment }): Provider => [\r\n  provideBaseAuth0(data.config),\r\n  { provide: TA_AUTH_TOKEN, useClass: TaAuth0Service },\r\n  {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: AuthHttpInterceptor,\r\n    multi: true,\r\n  },\r\n];\r\n","/*\n * Public API Surface of users\n */\nexport * from './lib/modules/user/guards/public-api';\n\nexport * from './lib/modules/user/services/user.service';\nexport * from './lib/modules/user/services/auth.service';\nexport * from './lib/modules/user/services/permissions.service';\nexport * from './lib/modules/user/services/dto/user-profile';\nexport * from './lib/modules/user/services/queries';\n\nexport * from './lib/modules/user/components/public-api';\nexport * from './lib/modules/user/provide';\n\nexport * from './lib/modules/auth0/provide';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["map","provideBaseAuth0"],"mappings":"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"}