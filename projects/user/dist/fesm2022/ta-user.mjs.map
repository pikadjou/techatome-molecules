{"version":3,"file":"ta-user.mjs","sources":["../../src/lib/modules/user/services/permissions.ts","../../src/lib/modules/user/services/permissions.service.ts","../../src/lib/modules/user/guards/auth.guard.ts","../../src/lib/modules/user/guards/feature.guard.ts","../../src/lib/modules/user/guards/public-api.ts","../../src/lib/modules/user/services/user.service.ts","../../src/lib/modules/user/services/contacts/dto/contact.ts","../../src/lib/modules/user/services/contacts/queries.ts","../../src/lib/modules/user/services/contact.service.ts","../../src/lib/modules/user/services/users/dto/function.ts","../../src/lib/modules/user/services/users/dto/user.ts","../../src/lib/modules/user/services/users/userMutations.ts","../../src/lib/modules/user/services/users/dto/tenantInformation.ts","../../src/lib/modules/user/services/users/userQueries.ts","../../src/lib/modules/user/services/users.service.ts","../../src/lib/modules/user/services/users/dto/role.ts","../../src/lib/modules/user/services/functions.service.ts","../../src/lib/modules/user/services/auth.service.ts","../../src/lib/modules/user/services/users/form/functions.service.ts","../../src/lib/modules/user/components/login/login-card.component.ts","../../src/lib/modules/user/components/login/login-card.component.html","../../src/lib/modules/user/components/login/redirect/redirect.component.ts","../../src/lib/modules/user/components/menu/menu-user.component.ts","../../src/lib/modules/user/components/menu/menu-user.component.html","../../src/lib/modules/user/components/switch-language/switch-language.component.ts","../../src/lib/modules/user/components/switch-language/switch-language.component.html","../../src/lib/modules/user/components/my-account/my-account.component.ts","../../src/lib/modules/user/components/my-account/my-account.component.html","../../src/lib/modules/user/components/my-profile/user-my-profile.component.ts","../../src/lib/modules/user/components/my-profile/user-my-profile.component.html","../../src/lib/modules/user/components/tenant-url-displayer/tenant-url-displayer.component.ts","../../src/lib/modules/user/components/tenant-url-displayer/tenant-url-displayer.component.html","../../src/lib/modules/user/components/guard/guard.component.ts","../../src/lib/modules/user/components/guard/guard.component.html","../../src/lib/modules/user/components/contact-card/contact-card.component.ts","../../src/lib/modules/user/components/contact-card/contact-card.component.html","../../src/lib/modules/user/components/switch-language/switch-language-cta/switch-language-cta.component.ts","../../src/lib/modules/user/components/switch-language/switch-language-cta/switch-language-cta.component.html","../../src/lib/modules/user/contactScopeInterceptor.ts","../../src/lib/modules/user/translation.service.ts","../../src/lib/modules/user/user.module.ts","../../src/lib/modules/auth0/services/auth0.service.ts","../../src/lib/modules/auth0/provide.ts","../../src/public-api.ts","../../src/ta-user.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { Logger } from '@ta/server';\nimport { isNonNullable } from '@ta/utils';\nimport { BehaviorSubject, Observable, filter } from 'rxjs';\n\n/** @deprecated */\nexport class PermissionsCore {\n  private _updated$ = new BehaviorSubject<number | null>(null);\n  private _isFill = { permissions: false, isAuthenticated: false };\n\n  public guards: { [index: string]: string[] } = {};\n  public roles: string[] = [];\n  public isAuthenticated: boolean = false;\n\n  public updated$ = this._updated$.pipe(filter(isNonNullable));\n\n  get received() {\n    return this._updated$.value !== null;\n  }\n\n  constructor() {}\n\n  public set(\n    info: {\n      permissions: string[];\n      roles: string[];\n    },\n    isAuthenticated: boolean\n  ) {\n    Logger.LogInfo('[PERMISSIONS] List brut:', info.permissions);\n\n    this.guards = {};\n    if (info.permissions) {\n      for (let perm of info.permissions) {\n        const access = perm.split(':');\n\n        if (!this.guards[access[1]]) {\n          this.guards[access[1]] = [];\n        }\n        this.guards[access[1]].push(access[0]);\n      }\n    }\n\n    this.roles = info.roles || [];\n\n    this._isFill.permissions = true;\n\n    this.setSilentAuthenticated(isAuthenticated);\n\n    this._canYouUpdate();\n    Logger.LogInfo('[PERMISSIONS] List:', this.guards, this.roles);\n  }\n\n  public setSilentAuthenticated(isAuthenticated: boolean) {\n    this.isAuthenticated = isAuthenticated;\n    this._isFill.isAuthenticated = true;\n\n    this._canYouUpdate();\n  }\n  public setAuthenticated(isAuthenticated: boolean) {\n    this.isAuthenticated = isAuthenticated;\n    this._updated$.next(Date.now());\n  }\n\n  public hasRole(role: string): boolean {\n    return this.roles.some(x => x.includes(role));\n  }\n\n  public canDirectAccess(feature: string, level: string): boolean {\n    if (level === 'authenticated') {\n      return this.isAuthenticated;\n    }\n\n    if (!feature) {\n      return true;\n    }\n\n    const featureGuard = this.guards[feature];\n    if (!featureGuard) {\n      return false;\n    }\n\n    if (featureGuard.includes('all')) {\n      return true;\n    }\n\n    if (!featureGuard.includes(level)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  public canAccess(feature: string, level: string | 'authenticated' | 'authorize'): Observable<boolean> {\n    return this._updated$.pipe(map(() => this.canDirectAccess(feature, level)));\n  }\n\n  private _canYouUpdate() {\n    if (!this._isFill.isAuthenticated || !this._isFill.permissions) {\n      return;\n    }\n    this._updated$.next(Date.now());\n  }\n}\n\n/** @deprecated */\nexport const Permissions = new PermissionsCore();\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Logger } from '@ta/server';\r\nimport { isNonNullable } from '@ta/utils';\r\nimport { BehaviorSubject, Observable, filter, map } from 'rxjs';\r\n\r\nimport { Permissions } from './permissions';\r\n\r\nexport type Level = 'authenticated' | 'authorize' | 'reader' | 'contributor' | 'administrator' | 'read';\r\n\r\nexport type PermissionFeature = 'chift' | 'ticketing';\r\nexport type Domain =\r\n  | 'automation'\r\n  | 'invoice'\r\n  | 'contact'\r\n  | 'task'\r\n  | 'project'\r\n  | 'quotation'\r\n  | 'maintenance'\r\n  | 'conversation'\r\n  | 'user'\r\n  | 'document'\r\n  | 'organization';\r\n\r\nconst accessLevels = ['reader', 'contributor', 'administrator'];\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CamPermissionsService {\r\n  private _updated$ = new BehaviorSubject<number | null>(null);\r\n  private _isFill = { permissions: false, isAuthenticated: false };\r\n\r\n  public features: (string | PermissionFeature)[] = [];\r\n  public guards: { [index: string]: Level } = {};\r\n  public roles: string[] = [];\r\n  public isAuthenticated: boolean = false;\r\n\r\n  public updated$ = this._updated$.pipe(filter(isNonNullable));\r\n\r\n  get received() {\r\n    return this._updated$.value !== null;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  public set(\r\n    info: {\r\n      permissions: string[];\r\n      roles: string[];\r\n      features: PermissionFeature[];\r\n    },\r\n    isAuthenticated: boolean\r\n  ) {\r\n    Logger.LogInfo('[PERMISSIONS] List brut:', info.permissions);\r\n\r\n    this.features = info.features || [];\r\n    this.roles = info.roles || [];\r\n\r\n    this.guards = info.roles\r\n      .map(role => role.replace('Merlin_', ''))\r\n      .reduce<typeof this.guards>((acc, role) => {\r\n        if (!role.includes('-')) {\r\n          return acc;\r\n        }\r\n        const [domain, access] = role.split('-');\r\n\r\n        const lastAccess =\r\n          accessLevels.indexOf(access) > accessLevels.indexOf(acc[domain] || '') ? access : acc[domain];\r\n        return {\r\n          ...acc,\r\n          [domain]: <Level>lastAccess,\r\n        };\r\n      }, {});\r\n    Logger.LogInfo('[PERMISSIONS] Guard', this.guards);\r\n\r\n    this._isFill.permissions = true;\r\n\r\n    this.setSilentAuthenticated(isAuthenticated);\r\n    Permissions.set(info, isAuthenticated);\r\n\r\n    this._canYouUpdate();\r\n  }\r\n\r\n  public setSilentAuthenticated(isAuthenticated: boolean) {\r\n    this.isAuthenticated = isAuthenticated;\r\n    this._isFill.isAuthenticated = true;\r\n    Permissions.setSilentAuthenticated(isAuthenticated);\r\n\r\n    this._canYouUpdate();\r\n  }\r\n  public setAuthenticated(isAuthenticated: boolean) {\r\n    this.isAuthenticated = isAuthenticated;\r\n\r\n    Permissions.setAuthenticated(isAuthenticated);\r\n\r\n    this._updated$.next(Date.now());\r\n  }\r\n\r\n  public hasRole(role: string): boolean {\r\n    return this.roles.some(x => x === role);\r\n  }\r\n\r\n  public canDirectAccess(feature: PermissionFeature | Domain | string, level: Level | string) {\r\n    if (level === 'authenticated') {\r\n      return this.isAuthenticated;\r\n    }\r\n\r\n    if (level === 'authorize') {\r\n      return this.features.includes(feature);\r\n    }\r\n\r\n    if (!feature) {\r\n      return Permissions.canDirectAccess(feature, level);\r\n    }\r\n\r\n    const featureGuard = this.guards[feature];\r\n    if (!featureGuard) {\r\n      return Permissions.canDirectAccess(feature, level);\r\n    }\r\n\r\n    return accessLevels.indexOf(featureGuard) >= accessLevels.indexOf(level);\r\n  }\r\n\r\n  public canAccess$(feature: string | PermissionFeature, level: Level | string): Observable<boolean> {\r\n    return this._updated$.pipe(map(() => this.canDirectAccess(feature, level)));\r\n  }\r\n\r\n  private _canYouUpdate() {\r\n    if (!this._isFill.isAuthenticated || !this._isFill.permissions) {\r\n      return;\r\n    }\r\n    this._updated$.next(Date.now());\r\n  }\r\n}\r\n","import { Injectable, inject } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { map } from 'rxjs/operators';\n\nimport { Observable } from 'rxjs';\n\nimport { TaRoutes } from '@ta/menu';\n\nimport { CamPermissionsService } from '../services/permissions.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard {\n  public readonly _permissionsService = inject(CamPermissionsService);\n\n  constructor(private router: Router) {}\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | boolean {\n    if (!this._permissionsService.received) {\n      return this._permissionsService.updated$.pipe(\n        map(() => {\n          if (this._permissionsService.isAuthenticated) {\n            return true;\n          } else {\n            this.setRedirect();\n            return false;\n          }\n        })\n      );\n    }\n    if (this._permissionsService.isAuthenticated === false) {\n      this.setRedirect();\n      return false;\n    }\n    return this._permissionsService.isAuthenticated;\n  }\n\n  public setRedirect(): void {\n    this.router.navigateByUrl(TaRoutes.getLogin());\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router } from '@angular/router';\n\nimport { map } from 'rxjs/operators';\n\nimport { Observable } from 'rxjs';\n\nimport { TaRoutes } from '@ta/menu';\n\nimport { CamPermissionsService, Domain, Level, PermissionFeature } from '../services/permissions.service';\n\nexport interface FeatureRouteData {\n  feature: PermissionFeature | Domain;\n  level: Level;\n}\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureGuard {\n  public readonly _permissionsService = inject(CamPermissionsService);\n\n  constructor(private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> | boolean {\n    const level = route.data['level'];\n    const feature = route.data['feature'];\n\n    if (this._permissionsService.received === true) {\n      return this._isValidPermission(feature, level);\n    }\n    return this._permissionsService.updated$.pipe(\n      map(() => {\n        return this._isValidPermission(feature, level);\n      })\n    );\n  }\n\n  public setRedirect(): void {\n    this.router.navigateByUrl(TaRoutes.getHome());\n  }\n\n  private _isValidPermission(feature: string, level: string) {\n    if (this._permissionsService.canDirectAccess(feature, level)) {\n      return true;\n    }\n    this.setRedirect();\n    return false;\n  }\n}\n","/*\n * Public API Surface of users\n */\n\nexport * from './auth.guard';\nexport * from './feature.guard';\n","import { Injectable } from '@angular/core';\n\nimport { Request } from '@ta/server';\nimport { CamBaseService, MappingApiType } from '@ta/server';\nimport { BehaviorSubject, filter, tap } from 'rxjs';\n\nimport { UserProfile } from './dto/user-profile';\n\nconst apiRoutes: MappingApiType = {\n  GetUserProfile: {\n    type: 'GET',\n    url: '{ApiUrl}/UserProfile',\n  },\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CamUserService extends CamBaseService {\n  public userProfile$ = new BehaviorSubject<UserProfile | null>(null);\n\n  constructor() {\n    super(apiRoutes);\n  }\n\n  public fetchUserProfile() {\n    return this._serverService.request<UserProfile>(new Request({ type: 'GetUserProfile', cacheTime: -1 })).pipe(\n      filter(data => !!data),\n      tap(data => {\n        this.userProfile$.next(data);\n      })\n      // GOOGLE TAG MANAGER NOT USED YET\n      // tap(data => {\n      //   this._gtmService.pushTag({\n      //     event: 'userProfile',\n      //     userProfile: {\n      //       id: data.id,\n      //       lastName: data.lastName,\n      //       firstName: data.firstName,\n      //     },\n      //   });\n      // })\n    );\n  }\n}\n","import { GraphSchema } from '@ta/server';\n\nexport interface Contact {\n  id: string;\n  firstName: string;\n  lastName: string;\n  phoneNumber: string;\n  mail: string;\n  tenantPersonId: number;\n}\n\nconst props: (keyof Contact)[] = ['id', 'firstName', 'lastName', 'mail', 'phoneNumber', 'tenantPersonId'];\n\nexport const contactProps = new GraphSchema<Contact>(props);\n","import { Apollo_gql, GraphQueryPayload, graphQlTake } from '@ta/server';\n\nexport function GET_CONTACTS(where: string, props: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n        query Contacts {\n          contacts(${where}, ${graphQlTake()}) {\n            items {\n              ${props}\n            }\n          }\n        }\n      `,\n    variables: {},\n  };\n}\n\nexport function GET_CONTACTS_LIGHT(where: string, props: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n        query Contacts {\n          contactsLight(${where}, ${graphQlTake()}) {\n            items {\n              ${props}\n            }\n          }\n        }\n      `,\n    variables: {},\n  };\n}\n\nexport function GET_SEARCH_CONTACTS(filter: string, props: string, order: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n    query Contacts {\n        searchContactsLight(${order}, filter: \"${filter}\", ${graphQlTake()}) {\n            totalCount\n            items {\n                ${props}\n            }\n        }\n    }\n    `,\n    variables: {},\n  };\n}\n","import { Injectable } from '@angular/core';\n\nimport { CamBaseService, GraphEndpoint, HandleComplexRequest, HandleSimpleRequest } from '@ta/server';\nimport { isNonNullable } from '@ta/utils';\nimport { filter, map, of, tap } from 'rxjs';\n\nimport { Contact, contactProps } from './contacts/dto/contact';\nimport { GET_CONTACTS, GET_CONTACTS_LIGHT, GET_SEARCH_CONTACTS } from './contacts/queries';\n\nconst graphEndpoint: GraphEndpoint = {\n  clientName: 'contactService',\n  endpoint: 'contact',\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CamContactService extends CamBaseService {\n  public contactById = new HandleComplexRequest<Contact>();\n  public contacts = new HandleSimpleRequest<Contact[]>();\n\n  constructor() {\n    super();\n\n    super.registerRoutes({ graphEndpoint: graphEndpoint });\n  }\n\n  public fetchContactById$(contactId: string) {\n    return this.contactById.fetch(\n      contactId,\n      this._graphService\n        .fetchPagedQueryList<Contact>(\n          GET_CONTACTS(\n            `where: { id: { eq: \"${contactId}\" } }`,\n            `\n            ${contactProps.get('id')}\n            ${contactProps.get('firstName')}\n            ${contactProps.get('lastName')}\n            ${contactProps.get('mail')}\n            ${contactProps.get('phoneNumber')}\n            ${contactProps.get('tenantPersonId')}\n          `\n          ),\n          'contacts',\n          graphEndpoint.clientName\n        )\n        .pipe(\n          filter(isNonNullable),\n          map(data => ({\n            ...data,\n            items: data.items ?? [],\n          })),\n          filter(data => data.items.length > 0),\n          map(data => data.items[0])\n        )\n    );\n  }\n\n  public fetchContact$() {\n    return this.contacts.fetch(\n      this._graphService\n        .fetchPagedQueryList<Contact>(\n          GET_CONTACTS_LIGHT(\n            '',\n            `\n              ${contactProps.get('id')}\n              ${contactProps.get('firstName')}\n              ${contactProps.get('lastName')}\n              ${contactProps.get('mail')}\n              ${contactProps.get('phoneNumber')}\n            `\n          ),\n          'contactsLight',\n          graphEndpoint.clientName\n        )\n        .pipe(\n          filter(isNonNullable),\n          map(data => data.items ?? [])\n        )\n    );\n  }\n\n  public fetchContactsByIds$(ids: string[]) {\n    return this.contacts.fetch(\n      this._graphService\n        .fetchPagedQueryList<Contact>(\n          GET_CONTACTS_LIGHT(\n            `where: { id: { in: [${ids.map(id => `\"${id}\"`).join(', ')}] } }`,\n            `\n              ${contactProps.get('id')}\n              ${contactProps.get('firstName')}\n              ${contactProps.get('lastName')}\n              ${contactProps.get('mail')}\n            `\n          ),\n          'contactsLight',\n          graphEndpoint.clientName\n        )\n        .pipe(\n          filter(isNonNullable),\n          map(data => data.items ?? [])\n        )\n    );\n  }\n\n  public fetchSearchContact$(search?: string) {\n    if (!search || search.length < 3) {\n      return of([]);\n    }\n    return this._graphService\n      .fetchPagedQueryList<Contact>(\n        GET_SEARCH_CONTACTS(\n          search,\n          `\n              ${contactProps.get('id')}\n              ${contactProps.get('firstName')}\n              ${contactProps.get('lastName')}\n              ${contactProps.get('mail')}\n            `,\n          `order: { lastName: ASC }`\n        ),\n        'searchContactsLight',\n        graphEndpoint.clientName\n      )\n      .pipe(\n        filter(isNonNullable),\n        map(data => data.items ?? []),\n        tap(list =>\n          list.forEach(element => {\n            this.contactById.add(element.id, element);\n          })\n        )\n      );\n  }\n}\n","import { GraphSchema } from '@ta/server';\n\nimport { Role } from './role';\n\nexport interface Function {\n  id: string;\n  name: string;\n  tenantId: number;\n  roles: Role[];\n}\n\nexport interface FunctionCreationPayload {\n  name: string;\n  roleIds: string[];\n}\n\nexport interface FunctionModifierPayload {\n  id: string;\n  name: string;\n  roleIds: string[];\n}\n\nexport const functionProps = new GraphSchema<Function>(['id', 'name', 'tenantId', 'roles']);\n","import { GraphSchema } from '@ta/server';\n\nimport { CurrentUser } from './currentUser';\n\nexport interface User extends CurrentUser {}\n\nexport interface UserFunctionPayload {\n  userId: string;\n  functionId: string;\n}\n\nexport const userProps = new GraphSchema<User>([\n  'id',\n  'userName',\n  'firstName',\n  'lastName',\n  'phoneNumber',\n  'isCompany',\n  'culture',\n  'trigram',\n  'picture',\n  'tenantInformations',\n  'functions',\n]);\n","import { GraphMutationPayload } from '@ta/server';\nimport { gql } from 'apollo-angular';\n\nimport { FunctionCreationPayload, FunctionModifierPayload, functionProps } from './dto/function';\nimport { ModifyUserPayloadInput } from './dto/modifyUserPayloadInput';\nimport { UserFunctionPayload, userProps } from './dto/user';\nimport { UserAddedPayload } from './dto/userAddedPayload';\n\nexport function ADD_USER(userAddedPayload: UserAddedPayload): GraphMutationPayload {\n  return {\n    mutation: gql`\n      mutation AddUser($userAddedPayload: UserAddedPayloadInput!) {\n        addUser(userAddedPayload: $userAddedPayload) {\n          ${userProps.get('id')}\n          ${userProps.get('userName')}\n          ${userProps.get('firstName')}\n          ${userProps.get('lastName')}\n          ${userProps.get('phoneNumber')}\n          ${userProps.get('culture')}\n          ${userProps.get('trigram')}\n          ${userProps.get('picture')}\n        }\n      }\n    `,\n    variables: {\n      userAddedPayload: userAddedPayload,\n    },\n  };\n}\n\nexport function DISABLE_USER(userId: string): GraphMutationPayload {\n  return {\n    mutation: gql`\n      mutation DisableUser($userId: String!) {\n        disableUser(userId: $userId)\n      }\n    `,\n    variables: {\n      userId: userId,\n    },\n  };\n}\n\nexport function DISABLE_CURRENT_USER(): GraphMutationPayload {\n  return {\n    mutation: gql`\n      mutation DisableCurrentUser() {\n        disableCurrentUser()\n      }\n    `,\n    variables: {},\n  };\n}\n\nexport function UPDATE_CURRENT_USER(user: ModifyUserPayloadInput): GraphMutationPayload {\n  return {\n    mutation: gql`\n        mutation UpdateCurrentUser($user: ModifyUserPayloadInput!) {\n          updateCurrentUser(user: $user) {\n            ${userProps.get('firstName')}\n            ${userProps.get('lastName')}\n            ${userProps.get('phoneNumber')}\n            ${userProps.get('picture')}\n          }\n        }\n      `,\n    variables: {\n      user: user,\n    },\n  };\n}\n\nexport function ADD_FUNCTION(functionAddedPayload: FunctionCreationPayload): GraphMutationPayload {\n  return {\n    mutation: gql`\n      mutation AddFunction($functionAddedPayload: AddFunctionPayloadInput!) {\n        addFunction(payload: $functionAddedPayload) {\n          ${functionProps.get('id')}\n        }\n      }\n    `,\n    variables: {\n      functionAddedPayload: functionAddedPayload,\n    },\n  };\n}\n\nexport function UPDATE_FUNCTION(functionModifierPayload: Partial<FunctionModifierPayload>): GraphMutationPayload {\n  return {\n    mutation: gql`\n        mutation UpdateFunction($functionModifierPayload: ModifyFunctionPayloadInput!) {\n          updateFunction(payload: $functionModifierPayload) {\n            ${functionProps.get('id')}\n          }\n        }\n      `,\n    variables: {\n      functionModifierPayload: functionModifierPayload,\n    },\n  };\n}\n\nexport function ADD_FUNCTION_TO_USER(payload: UserFunctionPayload): GraphMutationPayload {\n  return {\n    mutation: gql`\n      mutation AddFunctionToUser($payload: UserFunctionPayloadInput!) {\n        addFunctionToUser(payload: $payload) {\n          userId\n        }\n      }\n    `,\n    variables: {\n      payload,\n    },\n  };\n}\n\nexport function REMOVE_FUNCTION_FROM_USER(payload: UserFunctionPayload): GraphMutationPayload {\n  return {\n    mutation: gql`\n      mutation RemoveFunctionFromUser($payload: UserFunctionPayloadInput!) {\n        removeFunctionFromUser(payload: $payload)\n      }\n    `,\n    variables: {\n      payload,\n    },\n  };\n}\n","import { GraphSchema } from '@ta/server';\n\nexport interface TenantInformation {\n  id: string;\n  tenantId: number;\n  tenantName: string;\n  customerId: number;\n}\n\nexport const tenantInformationsProps = new GraphSchema<TenantInformation>(['customerId', 'tenantId', 'tenantName']);\n","import { Apollo_gql, GraphQueryPayload, graphQlTake } from '@ta/server';\n\nimport { functionProps } from './dto/function';\nimport { tenantInformationsProps } from './dto/tenantInformation';\nimport { userProps } from './dto/user';\n\nexport function GET_USER_BY_ID(id: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n        query GetUserById($id: UUID!) {\n          userById(id: $id) {\n              ${userProps.get('id')}\n              ${userProps.get('userName')}\n              ${userProps.get('firstName')}\n              ${userProps.get('lastName')}\n              ${userProps.get('phoneNumber')}\n              ${userProps.get('isCompany')}\n              ${userProps.get('culture')}\n              ${userProps.get('trigram')}\n              ${userProps.get('picture')}\n              ${userProps.get('functions')} {\n                ${functionProps.get('id')}\n                ${functionProps.get('name')}\n              }\n            }\n          }\n      `,\n    variables: {\n      id: id,\n    },\n  };\n}\n\nexport function GET_CURRENT_USER(): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n        query GetCurrentUser {\n          currentUser {\n            ${userProps.get('id')}\n            ${userProps.get('userName')}\n            ${userProps.get('firstName')}\n            ${userProps.get('lastName')}\n            ${userProps.get('phoneNumber')}\n            ${userProps.get('isCompany')}\n            ${userProps.get('culture')}\n            ${userProps.get('trigram')}\n            ${userProps.get('picture')}\n            ${userProps.get('tenantInformations')} {\n              ${tenantInformationsProps.get('customerId')}\n              ${tenantInformationsProps.get('tenantId')}\n              ${tenantInformationsProps.get('tenantName')}\n            }\n          }\n        }\n      `,\n    variables: {},\n  };\n}\n\nexport function GET_USERS(where: string, props: string, order: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n      query Users {\n        users(${order}, ${where}, ${graphQlTake()}) {\n          items {\n            ${props}\n          }\n        }\n      }\n    `,\n    variables: {},\n  };\n}\n\nexport function GET_FUNCTIONS(where: string, props: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n      query Functions {\n        functions(${where}, ${graphQlTake()}) {\n          items {\n            ${props}\n          }\n        }\n      }\n    `,\n    variables: {},\n  };\n}\n\nexport function GET_ROLES(where: string, props: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n      query Roles {\n        roles(${where}, ${graphQlTake()}) {\n          items {\n            ${props}\n          }\n        }\n      }\n    `,\n    variables: {},\n  };\n}\n\nexport function GET_USERS_CUSTOMERS(where: string, props: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n      query UsersCustomers {\n        usersCustomers(${where}, ${graphQlTake()}) {\n          items {\n            ${props}\n          }\n        }\n      }\n    `,\n    variables: {},\n  };\n}\n\nexport function GET_SEARCH_USERS_CUSTOMERS(filter: string, props: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n    query UsersCustomers {\n        searchUsersCustomers(filter: \"${filter}\", ${graphQlTake()}) {\n            totalCount\n            items {\n                ${props}\n            }\n        }\n    }\n    `,\n    variables: {},\n  };\n}\n\nexport function GET_MY_CONTACTS(): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n      query MyContacts {\n        myContacts\n      }\n    `,\n    variables: {},\n  };\n}\n\nexport function GET_CONTACT_TENANT_ROUTE(contactId: string): GraphQueryPayload {\n  return {\n    query: Apollo_gql`\n        query ContactTenantRoute($contactId: UUID!) {\n          contactTenantRoute(contactId: $contactId)\n        }\n      `,\n    variables: {\n      contactId: contactId,\n    },\n  };\n}\n","import { Injectable } from '@angular/core';\n\nimport { CamBaseService, GraphEndpoint, HandleComplexRequest, HandleSimpleRequest } from '@ta/server';\nimport { isNonNullable } from '@ta/utils';\nimport { Observable, catchError, filter, map, of, switchMap, tap } from 'rxjs';\n\nimport { CurrentUser } from './users/dto/currentUser';\nimport { functionProps } from './users/dto/function';\nimport { ModifyUserPayloadInput } from './users/dto/modifyUserPayloadInput';\nimport { User, userProps } from './users/dto/user';\nimport { UserAddedPayload } from './users/dto/userAddedPayload';\nimport { ADD_USER, DISABLE_CURRENT_USER, DISABLE_USER, UPDATE_CURRENT_USER } from './users/userMutations';\nimport {\n  GET_CONTACT_TENANT_ROUTE,\n  GET_CURRENT_USER,\n  GET_MY_CONTACTS,\n  GET_SEARCH_USERS_CUSTOMERS,\n  GET_USERS,\n  GET_USER_BY_ID,\n} from './users/userQueries';\n\nexport const cachedQueryName = {\n  currentUser: 'currentUser',\n};\nconst graphEndpoint: GraphEndpoint = {\n  clientName: 'userService',\n  endpoint: 'user',\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CamUsersService extends CamBaseService {\n  public users = new HandleSimpleRequest<User[]>();\n  public usersCustomers = new HandleSimpleRequest<User[]>();\n\n  public userById = new HandleComplexRequest<User>();\n  public user = new HandleComplexRequest<User>();\n  public currentUser = new HandleSimpleRequest<User>();\n  public currentUserContactIds = new HandleSimpleRequest<string[]>();\n\n  public contactTenantRoute = new HandleSimpleRequest<string>();\n\n  constructor() {\n    super();\n    super.registerRoutes({ graphEndpoint: graphEndpoint });\n  }\n\n  public fetchUsers$() {\n    return this.users.fetch(\n      this._graphService\n        .fetchPagedQueryList<User>(\n          GET_USERS(\n            '',\n            `\n              ${userProps.get('id')}\n              ${userProps.get('userName')}\n              ${userProps.get('firstName')}\n              ${userProps.get('lastName')}\n              ${userProps.get('phoneNumber')}\n              ${userProps.get('functions')} {\n                ${functionProps.get('id')}\n                ${functionProps.get('name')}\n              }\n              ${userProps.get('culture')}\n              ${userProps.get('trigram')}\n              ${userProps.get('picture')}\n              \n            `,\n            `order: { lastName: ASC }`\n          ),\n          'users',\n          graphEndpoint.clientName\n        )\n        .pipe(\n          filter(isNonNullable),\n          map(data => data.items ?? [])\n        )\n    );\n  }\n\n  public fetchContactTenantRoute$(contactId: string) {\n    return this.contactTenantRoute.fetch(\n      this._graphService\n        .fetchQuery<string>(GET_CONTACT_TENANT_ROUTE(contactId), 'contactTenantRoute', graphEndpoint.clientName)\n        .pipe(filter(isNonNullable))\n    );\n  }\n\n  public fetchUsersByIds$(ids: string[]) {\n    return this.users.fetch(\n      this._graphService\n        .fetchPagedQueryList<User>(\n          GET_USERS(\n            `where: { id: { in: [${ids.map(id => `\"${id}\"`).join(', ')}] } }`,\n            `\n              ${userProps.get('id')}\n              ${userProps.get('userName')}\n              ${userProps.get('firstName')}\n              ${userProps.get('lastName')}\n              ${userProps.get('picture')}\n              ${userProps.get('trigram')}\n            `,\n            `order: { lastName: ASC }`\n          ),\n          'users',\n          graphEndpoint.clientName\n        )\n        .pipe(\n          filter(isNonNullable),\n          map(data => data.items ?? [])\n        )\n    );\n  }\n\n  public fetchUser$(id: string) {\n    return this.user.fetch(\n      id,\n      this._graphService.fetchQuery<User>(GET_USER_BY_ID(id), 'userById', graphEndpoint.clientName)\n    );\n  }\n\n  public fetchCurrentUser$() {\n    return this.currentUser.fetch(\n      this._graphService.fetchQuery<User>(GET_CURRENT_USER(), cachedQueryName.currentUser, graphEndpoint.clientName)\n    );\n  }\n\n  public fetchCurrentUserContactIds$() {\n    return this.currentUserContactIds\n      .fetch(\n        this._graphService\n          .fetchQueryList<string>(GET_MY_CONTACTS(), 'myContacts', graphEndpoint.clientName)\n          .pipe(map(data => data ?? []))\n      )\n      .pipe(\n        tap(() => {\n          this._graphService.contactsLoaded$.next(true);\n        })\n      );\n  }\n\n  public fetchUsersCustomers$(search?: string) {\n    if (!search || search.length < 3) {\n      return of([]);\n    }\n    return this._graphService\n      .fetchPagedQueryList<User>(\n        GET_SEARCH_USERS_CUSTOMERS(\n          search,\n          `\n              ${userProps.get('id')}\n              ${userProps.get('picture')}\n              ${userProps.get('trigram')}\n              ${userProps.get('firstName')}\n              ${userProps.get('lastName')}\n              ${userProps.get('userName')}\n            `\n        ),\n        'searchUsersCustomers',\n        graphEndpoint.clientName\n      )\n      .pipe(\n        filter(isNonNullable),\n        map(data => data.items ?? []),\n        tap(list =>\n          list.forEach(element => {\n            this.userById.add(element.id, element);\n          })\n        )\n      );\n  }\n\n  public addUser$(userAddedPayload: UserAddedPayload): Observable<User[] | null> {\n    return this._graphService.mutate<User>(ADD_USER(userAddedPayload), 'users', graphEndpoint.clientName).pipe(\n      filter(isNonNullable),\n      switchMap(() => this.fetchUsers$()),\n      catchError(error => {\n        console.error('Error adding user:', error);\n        return of(null);\n      })\n    );\n  }\n\n  public disableUser$(userId: string) {\n    return this._graphService.mutate<boolean>(DISABLE_USER(userId), 'users', graphEndpoint.clientName).pipe(\n      switchMap(() => this.fetchUser$(userId)),\n      catchError(error => {\n        console.error('Error disabling user:', error);\n        return of(null);\n      })\n    );\n  }\n\n  public disableCurrentUser$() {\n    return this._graphService.mutate<boolean>(DISABLE_CURRENT_USER(), 'users', graphEndpoint.clientName).pipe(\n      switchMap(() => this.fetchCurrentUser$()),\n      catchError(error => {\n        console.error('Error disabling user:', error);\n        return of(null);\n      })\n    );\n  }\n\n  public updateCurrentUser$(user: ModifyUserPayloadInput) {\n    return this._graphService\n      .mutate<CurrentUser>(UPDATE_CURRENT_USER(user), 'users', graphEndpoint.clientName, [cachedQueryName.currentUser])\n      .pipe(\n        switchMap(() => this.fetchCurrentUser$()),\n        catchError(error => {\n          console.error('Error updating user:', error);\n          return of(null);\n        })\n      );\n  }\n}\n","import { GraphSchema } from '@ta/server';\n\nexport interface Role {\n  id: string;\n  name: string;\n}\n\nexport const roleProps = new GraphSchema<Role>(['id', 'name']);\n","import { Injectable, inject } from '@angular/core';\n\nimport { CamBaseService, GraphEndpoint, HandleSimpleRequest } from '@ta/server';\nimport { isNonNullable } from '@ta/utils';\nimport { Observable, catchError, filter, map, of, switchMap } from 'rxjs';\n\nimport { CamUsersService } from './users.service';\nimport { Function, FunctionCreationPayload, FunctionModifierPayload, functionProps } from './users/dto/function';\nimport { Role, roleProps } from './users/dto/role';\nimport { UserFunctionPayload } from './users/dto/user';\nimport { ADD_FUNCTION, ADD_FUNCTION_TO_USER, REMOVE_FUNCTION_FROM_USER, UPDATE_FUNCTION } from './users/userMutations';\nimport { GET_FUNCTIONS, GET_ROLES } from './users/userQueries';\n\nconst graphEndpoint: GraphEndpoint = {\n  clientName: 'userService',\n  endpoint: 'user',\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CamFunctionsService extends CamBaseService {\n  public functions = new HandleSimpleRequest<Function[]>();\n  public roles = new HandleSimpleRequest<Role[]>();\n\n  private _usersService = inject(CamUsersService);\n\n  constructor() {\n    super();\n    super.registerRoutes({ graphEndpoint: graphEndpoint });\n  }\n\n  public fetchFunctions$() {\n    return this.functions.fetch(\n      this._graphService\n        .fetchPagedQueryList<Function>(\n          GET_FUNCTIONS(\n            '',\n            `\n              ${functionProps.get('id')}\n              ${functionProps.get('name')}\n              ${functionProps.get('roles')} {\n                ${roleProps.get('id')}\n                ${roleProps.get('name')}\n              }\n            `\n          ),\n          'functions',\n          graphEndpoint.clientName\n        )\n        .pipe(\n          filter(isNonNullable),\n          map(data => data.items ?? [])\n        )\n    );\n  }\n\n  public fetchRoles$() {\n    return this.roles.fetch(\n      this._graphService\n        .fetchPagedQueryList<Role>(\n          GET_ROLES(\n            '',\n            `\n              ${roleProps.get('id')}\n              ${roleProps.get('name')}\n            `\n          ),\n          'roles',\n          graphEndpoint.clientName\n        )\n        .pipe(\n          filter(isNonNullable),\n          map(data => data.items ?? [])\n        )\n    );\n  }\n\n  public addFunction$(functionAddedPayload: FunctionCreationPayload): Observable<Function[] | null> {\n    return this._graphService\n      .mutate<Function>(ADD_FUNCTION(functionAddedPayload), 'addFunction', graphEndpoint.clientName, ['functions'])\n      .pipe(\n        filter(isNonNullable),\n        switchMap(() => this.fetchFunctions$()),\n        catchError(error => {\n          console.error('Error adding function:', error);\n          return of(null);\n        })\n      );\n  }\n\n  public updateFunction$(functionModifierPayload: Partial<FunctionModifierPayload>): Observable<Function[] | null> {\n    return this._graphService\n      .mutate<Function>(UPDATE_FUNCTION(functionModifierPayload), 'updateFunction', graphEndpoint.clientName, [\n        'functions',\n      ])\n      .pipe(\n        filter(isNonNullable),\n        switchMap(() => this.fetchFunctions$()),\n        catchError(error => {\n          console.error('Error adding function:', error);\n          return of(null);\n        })\n      );\n  }\n\n  public addFunctionToUser$(payload: UserFunctionPayload) {\n    return this._graphService\n      .mutate<Function>(ADD_FUNCTION_TO_USER(payload), 'addFunctionToUser', graphEndpoint.clientName, ['userById'])\n      .pipe(\n        filter(isNonNullable),\n        switchMap(() => this._usersService.fetchUser$(payload.userId)),\n        catchError(error => {\n          console.error('Error adding function:', error);\n          return of(null);\n        })\n      );\n  }\n\n  public removeFunctionFromUser$(payload: UserFunctionPayload) {\n    return this._graphService\n      .mutate<Function>(REMOVE_FUNCTION_FROM_USER(payload), 'removeFunctionFromUser', graphEndpoint.clientName, [\n        'userById',\n      ])\n      .pipe(\n        filter(isNonNullable),\n        switchMap(() => this._usersService.fetchUser$(payload.userId)),\n        catchError(error => {\n          console.error('Error adding function:', error);\n          return of(null);\n        })\n      );\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { InjectionToken } from '@angular/core';\n\nimport { CamBaseService, MappingApiType } from '@ta/server';\nimport { APPLICATION_CONFIG, IApplicationConfig } from '@ta/utils';\nimport { BehaviorSubject, Observable, filter, switchMap } from 'rxjs';\n\nimport { UserProfile } from './dto/user-profile';\nimport { CamPermissionsService } from './permissions.service';\nimport { CamUsersService } from './users.service';\n\nexport const CAM_AUTH_TOKEN = new InjectionToken<CamAuthService<any>>('CamAuthService');\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class CamAuthService<T> extends CamBaseService {\n  public readonly _permissionsService = inject(CamPermissionsService);\n  public isAuthenticated$ = this._permissionsService.canAccess$('', 'authenticated');\n\n  user$ = new BehaviorSubject<T | null>(null);\n\n  abstract get userProfile$(): BehaviorSubject<UserProfile | null>;\n  abstract get trigram(): string | null | undefined;\n  abstract get firstLetter(): string | null;\n\n  abstract fetchUserProfile(): Observable<UserProfile>;\n  abstract load(): void;\n  abstract login(): void;\n  abstract logout(): Promise<null>;\n\n  private _applicationConfig: IApplicationConfig = inject(APPLICATION_CONFIG);\n  private _userService: CamUsersService = inject(CamUsersService);\n\n  constructor(apiRoutes?: MappingApiType) {\n    super(apiRoutes);\n    this.user$\n      .pipe(\n        filter(user => !!user),\n        filter(() => this._applicationConfig.isCustomerApplication),\n        switchMap(() => this.fetchUserContactIds())\n      )\n      .subscribe();\n  }\n\n  public fetchUserContactIds() {\n    return this._userService.fetchCurrentUserContactIds$();\n  }\n}\n","import { Injectable, inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\n\nimport { InputChoices, InputPanel, InputTextBox } from '@ta/form-model';\nimport { isNonNullable } from '@ta/utils';\nimport { filter, map } from 'rxjs';\n\nimport { CamFunctionsService } from '../../functions.service';\nimport { Function, FunctionCreationPayload, FunctionModifierPayload } from '../dto/function';\n\nexport enum EFunctionFormFields {\n  name = 'name',\n  roles = 'roles',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CamFunctionsFormService {\n  private _functionsService = inject(CamFunctionsService);\n\n  public getFunctionForm(func: Function | null) {\n    return [\n      new InputPanel({\n        key: 'panel',\n        label: 'user.functions.form.title',\n        contentClass: 'highlight-title g-space-md',\n        children: [\n          new InputTextBox({\n            key: EFunctionFormFields.name,\n            value: func?.name,\n            label: 'user.functions.form.name',\n            validators: [Validators.required],\n          }),\n          new InputChoices({\n            key: EFunctionFormFields.roles,\n            label: 'user.functions.form.roles',\n            class: 'pt-xxl',\n            withSearch: true,\n            options: this._functionsService.fetchRoles$().pipe(\n              filter(isNonNullable),\n              map(roles =>\n                roles.map(role => ({\n                  id: role.id,\n                  name: role.name,\n                  data: role,\n                }))\n              )\n            ),\n            value: func?.roles?.map(x => x.id),\n            multiple: true,\n          }),\n        ],\n      }),\n    ];\n  }\n  public formatCreationFunctionForm(data: any): FunctionCreationPayload {\n    return {\n      name: data[EFunctionFormFields.name],\n      roleIds: data[EFunctionFormFields.roles],\n    };\n  }\n\n  public formatUpdateFunctionForm(id: string, data: any): Partial<FunctionModifierPayload> {\n    return {\n      id: id,\n      name: data[EFunctionFormFields.name],\n      roleIds: data[EFunctionFormFields.roles],\n    };\n  }\n}\n","import { Component, inject } from '@angular/core';\n\nimport { TranslatePipe } from '@ta/translation';\nimport { ButtonComponent, CardComponent, CardContentComponent } from '@ta/ui';\n\nimport { CAM_AUTH_TOKEN } from '../../services/auth.service';\n\n@Component({\n  selector: 'ta-login-card',\n  templateUrl: './login-card.component.html',\n  styleUrls: ['./login-card.component.scss'],\n  standalone: true,\n  imports: [CardComponent, CardContentComponent, ButtonComponent, TranslatePipe],\n})\nexport class LoginCardComponent {\n  private _authService = inject(CAM_AUTH_TOKEN);\n\n  constructor() {}\n\n  public login() {\n    this._authService.login();\n  }\n}\n","<ta-card (click)=\"this.login()\">\n  <ta-card-content>\n    <ta-button (action)=\"this.login()\">{{ 'user.login' | translate }}</ta-button>\n  </ta-card-content>\n</ta-card>\n","import { Component, inject } from '@angular/core';\n\nimport { CAM_AUTH_TOKEN } from '../../../services/auth.service';\n\n@Component({\n  selector: '',\n  template: '',\n  standalone: true,\n})\nexport class LoginRedirectComponent {\n  private _authService = inject(CAM_AUTH_TOKEN);\n\n  constructor() {\n    this._authService.login();\n  }\n}\n","import { AsyncPipe, NgIf } from '@angular/common';\nimport { Component, OnDestroy, inject } from '@angular/core';\n\nimport { ButtonComponent, TrigramComponent } from 'projects/ui/dist';\nimport { of } from 'rxjs';\n\nimport { DropdownComponent } from '@ta/form-input';\nimport { InputDropdown } from '@ta/form-model';\nimport { CamTranslationService, TranslatePipe } from '@ta/translation';\nimport { JoinPipe, StopPropagationDirective } from '@ta/utils';\nimport { TaBaseComponent } from '@ta/utils';\n\nimport { CAM_AUTH_TOKEN } from '../../services/auth.service';\nimport { CamPermissionsService } from '../../services/permissions.service';\n\n@Component({\n  selector: 'ta-user-menu',\n  templateUrl: './menu-user.component.html',\n  styleUrls: ['./menu-user.component.scss'],\n  standalone: true,\n  imports: [\n    NgIf,\n    AsyncPipe,\n    StopPropagationDirective,\n    TrigramComponent,\n    ButtonComponent,\n    TranslatePipe,\n    JoinPipe,\n    DropdownComponent,\n  ],\n})\nexport class MenuUserComponent extends TaBaseComponent implements OnDestroy {\n  public readonly _permissionsService = inject(CamPermissionsService);\n\n  get roles() {\n    return this._permissionsService.roles;\n  }\n\n  get getFirstLetter() {\n    return this.authService.firstLetter;\n  }\n\n  public authService = inject(CAM_AUTH_TOKEN);\n  public language = new InputDropdown<string>({\n    label: '',\n    options: of([\n      { id: 'fr', name: 'Français' },\n      { id: 'nl', name: 'Nederlands' },\n      { id: 'en', name: 'English' },\n      { id: 'es', name: 'Español' },\n    ]),\n  });\n\n  constructor(public translateService: CamTranslationService) {\n    super();\n\n    this.language.value = this.translateService.getLanguage();\n\n    this._registerSubscription(this.language.changeValue$.subscribe(value => this.translateService.use(value)));\n  }\n\n  public login() {\n    this.authService.login();\n  }\n\n  public logout() {\n    this.authService.logout();\n  }\n}\n","<div class=\"overlay\">\n  <div class=\"row user-info\">\n    <div class=\"col-5 align-items-center\">\n      {{ 'user.language' | translate }}\n    </div>\n    <div class=\"col-7\">\n      <ta-input-dropdown [input]=\"this.language\" appStopPropagation [standalone]=\"true\"></ta-input-dropdown>\n    </div>\n  </div>\n\n  @if (this.authService.isAuthenticated$ | async) {\n    <div class=\"row user-info\">\n      <div class=\"col-2\">\n        <ta-trigram [value]=\"this.getFirstLetter\"></ta-trigram>\n      </div>\n      <div class=\"col\">\n        <div class=\"title\">{{ (this.authService.user$ | async)?.name }}</div>\n        @if (this.roles.length > 0) {\n          <div class=\"subtitle\">\n            {{ this.roles | join }}\n          </div>\n        }\n      </div>\n    </div>\n\n    <div class=\"row user-info\">\n      <ta-button type=\"secondary\" (action)=\"this.logout()\">\n        {{ 'user.logout' | translate }}\n      </ta-button>\n    </div>\n  }\n</div>\n","import { NgFor, NgIf } from '@angular/common';\nimport { Component, inject } from '@angular/core';\n\nimport {\n  ListContainerComponent,\n  ListElementComponent,\n  ListTagComponent,\n  ListTitleComponent,\n  LoaderComponent,\n} from 'projects/ui/dist';\n\nimport { FontIconComponent } from '@ta/icons';\nimport { CamTranslationService, TranslatePipe } from '@ta/translation';\n\n@Component({\n  selector: 'ta-switch-language',\n  templateUrl: './switch-language.component.html',\n  styleUrls: ['./switch-language.component.scss'],\n  standalone: true,\n  imports: [\n    NgIf,\n    NgFor,\n    FontIconComponent,\n    ListTagComponent,\n    LoaderComponent,\n    ListContainerComponent,\n    ListElementComponent,\n    ListTitleComponent,\n    TranslatePipe,\n  ],\n})\nexport class SwitchLanguageComponent {\n  readonly translateService = inject(CamTranslationService);\n  readonly languages = [\n    { id: 'fr', name: 'Français' },\n    { id: 'nl', name: 'Nederlands' },\n    { id: 'en', name: 'English' },\n    { id: 'es', name: 'Español' },\n  ];\n\n  public activeLanguage = this.translateService.getLanguage();\n  public changeLanguageAsked: boolean = false;\n\n  public changeLanguage(language: string) {\n    if (this.activeLanguage != language) {\n      this.activeLanguage = language;\n      this.changeLanguageAsked = true;\n      this.translateService.use(language);\n    }\n  }\n}\n","<ta-loader [isLoading]=\"this.changeLanguageAsked\">\n  <div class=\"mx-space-sm language-panel\">\n    <ta-list-container>\n      @for (language of this.languages; track language.id) {\n        <ta-list-element [withSeparator]=\"false\" (click)=\"this.changeLanguage(language.id)\">\n          <ta-list-title class=\"d-flex p-space-xs\">\n            {{ language.name | translate }}\n          </ta-list-title>\n          @if (language.id === this.activeLanguage) {\n            <ta-list-tag>\n              <ta-font-icon name=\"check-line\" class=\"color-semantic-token-success\"></ta-font-icon>\n            </ta-list-tag>\n          }\n        </ta-list-element>\n      }\n    </ta-list-container>\n  </div>\n</ta-loader>\n","import { AsyncPipe, NgIf } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Component, EventEmitter, Input, Output, TemplateRef, ViewChild, inject } from '@angular/core';\n\nimport { Observable, map } from 'rxjs';\n\nimport { FontIconComponent } from '@ta/icons';\nimport { Menu, MenuComponent, MenuIcon, MenuPanel } from '@ta/menu';\nimport { TaSizes } from '@ta/styles';\nimport { TranslatePipe } from '@ta/translation';\nimport {\n  ButtonComponent,\n  EmptyComponent,\n  ErrorComponent,\n  InlineProfileDataComponent,\n  LoaderComponent,\n  UserLogoNaming,\n} from '@ta/ui';\nimport { StopPropagationDirective } from '@ta/utils';\nimport { TaBaseComponent } from '@ta/utils';\n\nimport { CAM_AUTH_TOKEN } from '../../services/auth.service';\nimport { CamUsersService } from '../../services/users.service';\nimport { SwitchLanguageComponent } from '../switch-language/switch-language.component';\n\n@Component({\n  selector: 'ta-my-account',\n  templateUrl: './my-account.component.html',\n  styleUrls: ['./my-account.component.scss'],\n  standalone: true,\n  imports: [\n    NgIf,\n    AsyncPipe,\n    FontIconComponent,\n    StopPropagationDirective,\n    LoaderComponent,\n    ErrorComponent,\n    EmptyComponent,\n    InlineProfileDataComponent,\n    ButtonComponent,\n    MenuComponent,\n    SwitchLanguageComponent,\n    TranslatePipe,\n  ],\n})\nexport class MyAccountComponent extends TaBaseComponent {\n  @Input()\n  infosMenu: Menu | null = null;\n\n  @Input()\n  appVersion: string | null = null;\n\n  @Input()\n  isEditable: boolean = false;\n\n  @Output()\n  navigateEvent = new EventEmitter();\n\n  @Output()\n  navigateEditEvent = new EventEmitter();\n\n  @ViewChild('languageTemplate', { static: true })\n  languageTemplate!: TemplateRef<any>;\n\n  @ViewChild('infosTemplate', { static: true })\n  infosTemplate!: TemplateRef<any>;\n\n  private _authService = inject(CAM_AUTH_TOKEN);\n\n  public profileMenu: Menu | null = null;\n  public disconnectionMenu: Menu | null = null;\n\n  get currentUser$() {\n    return this._usersService.currentUser.get$();\n  }\n\n  constructor(private _usersService: CamUsersService) {\n    super();\n    this._fetch();\n  }\n\n  get profile$() {\n    return this.currentUser$.pipe(\n      map(data => {\n        return {\n          title: {\n            second: data?.firstName || data?.lastName,\n          },\n          email: data?.userName,\n        };\n      })\n    );\n  }\n\n  get userLogo$(): Observable<{\n    userInfo: {\n      profilePictureUrl?: string;\n      naming: UserLogoNaming;\n    };\n    size?: TaSizes;\n  } | null> {\n    return this.currentUser$.pipe(\n      map(x => {\n        if (!x) {\n          return null;\n        }\n\n        return {\n          userInfo: {\n            profilePictureUrl: x.picture,\n            naming: {\n              name: x.firstName || '',\n              firstName: x.lastName || '',\n              trigram: x.trigram || '',\n            },\n          },\n          size: 'lg',\n        };\n      })\n    );\n  }\n\n  ngAfterViewChecked() {\n    this.profileMenu = this.getProfileMenu(this.languageTemplate, this.infosTemplate);\n    this.disconnectionMenu = this.getDisconnectionMenu();\n  }\n\n  public navigateToProfile() {\n    this.navigateEvent.emit();\n  }\n\n  public disconnect() {\n    this._authService.logout().then(() => location.reload());\n  }\n\n  public getProfileMenu(languageTemplate: TemplateRef<any>, infosTemplate: TemplateRef<any>) {\n    const menu = [\n      new MenuPanel({\n        key: 'language',\n        label: 'user.language',\n        order: 2,\n        template: languageTemplate,\n        style: 'dark',\n        icon: 'language',\n        iconsColor: 'icon-color-icon-tertiary',\n        endingIcon: 'arrow-big-right',\n      }),\n      new MenuPanel({\n        key: 'infos',\n        label: 'user.infos',\n        order: 3,\n        template: infosTemplate,\n        style: 'dark',\n        icon: 'infos',\n        iconsColor: 'icon-color-icon-tertiary',\n        endingIcon: 'arrow-big-right',\n      }),\n      new MenuIcon({\n        key: 'params',\n        label: 'user.params',\n        order: 4,\n        disabled: true,\n        style: 'dark',\n        icon: 'label',\n        iconsColor: 'icon-color-icon-tertiary',\n      }),\n    ];\n\n    return new Menu({\n      elements: menu.sort((a, b) => a.order - b.order),\n      direction: 'vertical',\n    });\n  }\n\n  public getDisconnectionMenu() {\n    const menu = [\n      new MenuIcon({\n        key: 'logout',\n        label: 'user.logout',\n        order: 4,\n        style: 'dark',\n        icon: 'log-out',\n        iconsColor: 'icon-color-icon-tertiary',\n        callback: () => this.disconnect(),\n      }),\n    ];\n\n    return new Menu({\n      elements: menu.sort((a, b) => a.order - b.order),\n      direction: 'vertical',\n    });\n  }\n\n  public navigateToEditProfile() {\n    this.navigateEditEvent.emit();\n  }\n\n  private _fetch() {\n    this.requestState.asked();\n    this._usersService.fetchCurrentUser$().subscribe({\n      complete: () => this.requestState.completed(),\n      error: (error: HttpErrorResponse) => {\n        this.requestState.onError(error.status, error.statusText);\n      },\n    });\n  }\n}\n","<div class=\"mx-space-sm\" appStopPropagation>\n  <ta-loader [isLoading]=\"this.requestState.isLoading()\" *ngLet=\"this.profile$ | async as profile\">\n    <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n      <ta-empty [isEmpty]=\"!profile\">\n        <div class=\"bdp-b color-border-primary\">\n          <div class=\"pt-space-xs m-xs\">\n            <ta-inline-profile-data\n              [profile]=\"profile ?? {}\"\n              [userLogo]=\"this.userLogo$ | async\"\n              (click)=\"this.navigateToProfile()\"\n            ></ta-inline-profile-data>\n            @if (this.isEditable) {\n              <div class=\"my-space-md\">\n                <ta-button (action)=\"this.navigateToEditProfile()\" [style]=\"'secondary'\">\n                  <div class=\"align-center button-content\">\n                    <ta-font-icon name=\"modify\" class=\"mr-space-xs modify-icon\"></ta-font-icon>\n                    <div class=\"text\">\n                      {{ 'user.modify' | translate }}\n                    </div>\n                  </div>\n                </ta-button>\n              </div>\n            }\n          </div>\n        </div>\n      </ta-empty>\n    </ta-error>\n  </ta-loader>\n\n  @if (this.profileMenu) {\n    <div class=\"bdp-b color-border-primary pt-space-xs\">\n      <ta-menu [menu]=\"this.profileMenu\" [style]=\"'dark'\"></ta-menu>\n    </div>\n  }\n\n  @if (this.disconnectionMenu) {\n    <div class=\"bdp-b pt-space-xs\">\n      <ta-menu [menu]=\"this.disconnectionMenu\" [style]=\"'dark'\"></ta-menu>\n    </div>\n  }\n  <div class=\"ta-c\">\n    <small>{{ this.appVersion }}</small>\n  </div>\n</div>\n\n<ng-template #languageTemplate>\n  <ta-switch-language></ta-switch-language>\n</ng-template>\n\n<ng-template #infosTemplate>\n  @if (this.infosMenu) {\n    <div class=\"mx-space-sm info-panel\">\n      <ta-menu [menu]=\"this.infosMenu\" [style]=\"'dark'\"></ta-menu>\n    </div>\n  }\n</ng-template>\n","import { AsyncPipe, NgFor, NgIf } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { TranslatePipe } from '@ta/translation';\nimport {\n  EmptyComponent,\n  ErrorComponent,\n  LinkComponent,\n  ListContainerComponent,\n  ListElementComponent,\n  ListExtraInformationComponent,\n  ListTitleComponent,\n  LoaderComponent,\n  TitleComponent,\n  UiProfileDisplayComponent,\n} from '@ta/ui';\nimport { TaBaseComponent, fullName, sendMail } from '@ta/utils';\n\nimport { CamUsersService } from '../../services/users.service';\nimport { User } from '../../services/users/dto/user';\n\n@Component({\n  selector: 'ta-user-my-profile',\n  templateUrl: './user-my-profile.component.html',\n  styleUrls: ['./user-my-profile.component.scss'],\n  standalone: true,\n  imports: [\n    NgIf,\n    NgFor,\n    AsyncPipe,\n    TitleComponent,\n    ListContainerComponent,\n    ListElementComponent,\n    ListTitleComponent,\n    ListExtraInformationComponent,\n    LoaderComponent,\n    ErrorComponent,\n    EmptyComponent,\n    UiProfileDisplayComponent,\n    LinkComponent,\n    TranslatePipe,\n  ],\n})\nexport class UserMyProfileComponent extends TaBaseComponent {\n  @Input()\n  canModify: boolean = true;\n\n  @Output()\n  modifyAction = new EventEmitter();\n\n  public readonly mailTo = sendMail;\n\n  public ctas = [\n    {\n      icon: 'modify',\n      label: 'user.modify',\n      callback: () => this._modifyProfile(),\n    },\n  ];\n  get currentUser$() {\n    return this._userService.currentUser.get$();\n  }\n  constructor(private _userService: CamUsersService) {\n    super();\n    this._fetch();\n  }\n\n  public getFullName(firstName: string, lastName: string) {\n    return fullName({ firstName: firstName, name: lastName });\n  }\n\n  public getUserLogo(user: User) {\n    return {\n      userInfo: {\n        profilePictureUrl: user.picture,\n        naming: {\n          name: user.lastName,\n          firstName: user.firstName,\n          trigram: user.trigram,\n        },\n      },\n    };\n  }\n\n  private _fetch() {\n    this.requestState.asked();\n    this._userService.fetchCurrentUser$().subscribe({\n      complete: () => this.requestState.completed(),\n      error: (error: HttpErrorResponse) => {\n        this.requestState.onError(error.status, error.statusText);\n      },\n    });\n  }\n\n  private _modifyProfile() {\n    this.modifyAction.emit();\n  }\n}\n","<ta-loader [isLoading]=\"this.requestState.isLoading()\" *ngLet=\"this.currentUser$ | async as currentUser\">\n  <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n    <ta-empty [isEmpty]=\"!currentUser\">\n      @if (currentUser) {\n        <ta-ui-profile-display\n          [label]=\"this.getFullName(currentUser.firstName, currentUser.lastName)\"\n          [ctas]=\"this.canModify ? this.ctas : null\"\n          [userLogo]=\"this.getUserLogo(currentUser)\"\n        >\n          <div class=\"pt-space-xxl\">\n            <div class=\"pt-space-xs align-center\">\n              <ta-title class=\"m-a\" [level]=\"3\">\n                <ta-link (action)=\"this.mailTo(currentUser.userName)\">{{ currentUser.userName }}</ta-link>\n              </ta-title>\n            </div>\n            <div class=\"pt-space-xs align-center\">\n              <ta-title class=\"m-a\" [level]=\"3\">\n                {{ currentUser.phoneNumber }}\n              </ta-title>\n            </div>\n            @if (currentUser.tenantInformations.length === 1) {\n              <div class=\"align-center\">\n                <ta-title class=\"m-a\" [level]=\"3\">\n                  {{ 'user.clientnumber' | translate }}\n                  {{ currentUser.tenantInformations[0].customerId }}\n                </ta-title>\n              </div>\n            }\n            @if (currentUser.tenantInformations.length > 1) {\n              <div>\n                <div class=\"pt-space-xxl align-center\">\n                  <ta-title class=\"m-a\" [level]=\"3\">\n                    {{ 'user.tenantlisttitle' | translate }}\n                  </ta-title>\n                </div>\n                <div class=\"list\">\n                  <div class=\"tenant-list\">\n                    <ta-list-container>\n                      @for (tenantInformation of currentUser.tenantInformations; track tenantInformation) {\n                        <ta-list-element [withSeparator]=\"false\">\n                          <ta-list-title>\n                            <div>{{ tenantInformation.tenantName }}</div>\n                          </ta-list-title>\n                          <ta-list-extra-information>\n                            @if (tenantInformation.customerId) {\n                              <div class=\"align-center\">\n                                <div class=\"mr-space-sm\">\n                                  {{ tenantInformation.customerId }}\n                                </div>\n                                <!-- <ta-text-to-clipboard [value]=\"tenantInformation.customerId.toString()\" ></ta-text-to-clipboard> -->\n                              </div>\n                            }\n                          </ta-list-extra-information>\n                        </ta-list-element>\n                      }\n                    </ta-list-container>\n                  </div>\n                </div>\n              </div>\n            }\n          </div>\n        </ta-ui-profile-display>\n      }\n    </ta-empty>\n  </ta-error>\n</ta-loader>\n","import { AsyncPipe } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Component, Input, inject } from '@angular/core';\n\nimport { FontIconComponent } from '@ta/icons';\nimport { ButtonComponent, ErrorComponent, LoaderComponent } from '@ta/ui';\nimport { TaBaseComponent, openExternalUrl } from '@ta/utils';\n\nimport { CamUsersService } from '../../services/users.service';\n\n@Component({\n  selector: 'ta-tenant-url-displayer',\n  templateUrl: './tenant-url-displayer.component.html',\n  styleUrls: ['./tenant-url-displayer.component.scss'],\n  standalone: true,\n  imports: [AsyncPipe, FontIconComponent, ButtonComponent, LoaderComponent, ErrorComponent],\n})\nexport class TenantUrlDisplayerComponent extends TaBaseComponent {\n  @Input()\n  contactId!: string;\n\n  @Input()\n  display: 'button' | 'icon' = 'icon';\n\n  get contactTenantRoute$() {\n    return this._usersService.contactTenantRoute.get$();\n  }\n\n  private _usersService = inject(CamUsersService);\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    this._fetch();\n  }\n\n  public navigateToTenantContact(url: string) {\n    openExternalUrl(url);\n  }\n\n  private _fetch() {\n    this.requestState.asked();\n    this._usersService.fetchContactTenantRoute$(this.contactId).subscribe({\n      next: () => {\n        this.requestState.completed();\n      },\n      error: (error: HttpErrorResponse) => {\n        this.requestState.onError(error.status, error.statusText);\n      },\n    });\n  }\n}\n","<ta-loader [isLoading]=\"this.requestState.isLoading()\" *ngLet=\"this.contactTenantRoute$ | async as contactTenantRoute\">\n  <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n    @if (this.display === 'icon') {\n      <ta-font-icon\n        [name]=\"'arrow-big-right'\"\n        (click)=\"this.navigateToTenantContact(contactTenantRoute)\"\n      ></ta-font-icon>\n    } @else if (this.display === 'button') {\n      <ta-button [type]=\"'secondary'\" (action)=\"this.navigateToTenantContact(contactTenantRoute)\">\n        <ng-content></ng-content>\n      </ta-button>\n    }\n  </ta-error>\n</ta-loader>\n","import { NgIf } from '@angular/common';\nimport { Component, Input, inject } from '@angular/core';\n\nimport { FontIconComponent } from '@ta/icons';\nimport { CamIconType } from '@ta/icons';\nimport { CamMainRoute, TaRoutes } from '@ta/menu';\nimport { TranslatePipe } from '@ta/translation';\nimport { ButtonComponent } from '@ta/ui';\nimport { CamAbstractComponent } from '@ta/utils';\n\nimport { CamPermissionsService, Domain, Level, PermissionFeature } from '../../services/permissions.service';\n\n@Component({\n  selector: 'ta-guard',\n  templateUrl: './guard.component.html',\n  styleUrls: ['./guard.component.scss'],\n  standalone: true,\n  imports: [NgIf, FontIconComponent, ButtonComponent, TranslatePipe],\n})\nexport class GuardComponent extends CamAbstractComponent {\n  @Input()\n  level!: Level | string;\n\n  @Input()\n  feature!: PermissionFeature | Domain | string;\n\n  @Input()\n  canDisplayErrorMessage: boolean = true;\n\n  private readonly _permissionsService = inject(CamPermissionsService);\n  get noAccessIcon() {\n    return CamIconType.NoAccess;\n  }\n\n  constructor() {\n    super();\n  }\n\n  public isGuardValid(): boolean {\n    return this._permissionsService.canDirectAccess(this.feature, this.level);\n  }\n\n  public goToLogin() {\n    this._router.navigateByUrl(TaRoutes.getUrl([CamMainRoute.USERLOGIN]));\n  }\n}\n","<div class=\"guard\">\n  @if (this.isGuardValid()) {\n    <div class=\"guard-valid\">\n      <ng-content></ng-content>\n    </div>\n  }\n  @if (!this.isGuardValid() && this.canDisplayErrorMessage) {\n    <div class=\"guard-no-valid ta-c\">\n      <ta-font-icon name=\"close-tool\" size=\"md\"></ta-font-icon>\n      {{ 'container.guard.content' | translate }}\n\n      @if (this.level === 'authenticated') {\n        <ta-button (action)=\"this.goToLogin()\"> Me connecter </ta-button>\n      }\n    </div>\n  }\n</div>\n","import { AsyncPipe, NgIf } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Component, Input } from '@angular/core';\n\nimport { FontIconComponent } from '@ta/icons';\nimport { EmptyComponent, ErrorComponent, LoaderComponent, UserLogoComponent } from '@ta/ui';\nimport { TaBaseComponent } from '@ta/utils';\n\nimport { CamUsersService } from '../../services/users.service';\nimport { User } from '../../services/users/dto/user';\n\n@Component({\n  selector: 'ta-contact-card',\n  templateUrl: './contact-card.component.html',\n  styleUrls: ['./contact-card.component.scss'],\n  standalone: true,\n  imports: [NgIf, AsyncPipe, FontIconComponent, LoaderComponent, ErrorComponent, EmptyComponent, UserLogoComponent],\n})\nexport class ContactCardComponent extends TaBaseComponent {\n  @Input()\n  userId: string = '';\n\n  get user$() {\n    return this._usersService.user.get$(this.userId);\n  }\n\n  constructor(private _usersService: CamUsersService) {\n    super();\n  }\n\n  ngOnInit() {\n    this._fetch();\n  }\n\n  public getUserLogoData(user: User) {\n    return {\n      firstName: user.firstName,\n      lastName: user.lastName,\n      trigram: user.trigram,\n      picture: user.picture,\n    };\n  }\n\n  private _fetch() {\n    this.requestState.asked();\n    this._usersService.fetchUser$(this.userId).subscribe({\n      complete: () => this.requestState.completed(),\n      error: (error: HttpErrorResponse) => {\n        this.requestState.onError(error.status, error.statusText);\n      },\n    });\n  }\n}\n","<ta-loader [isLoading]=\"this.requestState.isLoading()\" *ngLet=\"this.user$ | async as user\">\n  <ta-error [message]=\"this.requestState.getErrorMessage()\" [code]=\"this.requestState.getErrorStatus()\">\n    <ta-empty [isEmpty]=\"!user\">\n      @if (user) {\n        <ta-user-logo class=\"user-logo\" [user]=\"this.getUserLogoData(user)\"></ta-user-logo>\n      }\n      <div class=\"contact-name\">{{ user?.firstName }} {{ user?.lastName }}</div>\n      <div class=\"contacts align-center\">\n        <div class=\"phone align-center\">\n          <ta-font-icon class=\"mr-space-xs\" name=\"phone\"></ta-font-icon>\n          {{ user?.phoneNumber }}\n        </div>\n        <div class=\"mail align-center\">\n          <ta-font-icon class=\"mr-space-xs\" name=\"mail\"></ta-font-icon>\n          {{ user?.userName }}\n        </div>\n      </div>\n    </ta-empty>\n  </ta-error>\n</ta-loader>\n","import { Component, inject } from '@angular/core';\nimport { MatMenu, MatMenuTrigger } from '@angular/material/menu';\n\nimport { FontIconComponent } from '@ta/icons';\nimport { CamTranslationService } from '@ta/translation';\n\nimport { SwitchLanguageComponent } from '../switch-language.component';\n\n@Component({\n  selector: 'ta-switch-language-cta',\n  templateUrl: './switch-language-cta.component.html',\n  styleUrls: ['./switch-language-cta.component.scss'],\n  standalone: true,\n  imports: [FontIconComponent, MatMenu, SwitchLanguageComponent, MatMenuTrigger],\n})\nexport class SwitchLanguageCtaComponent {\n  readonly translateService = inject(CamTranslationService);\n\n  public activeLanguage = this.translateService.getLanguage();\n}\n","<div [matMenuTriggerFor]=\"menu\" class=\"flex-start g-space-sm c-pointer\">\n  {{ this.activeLanguage.toLocaleUpperCase() }}\n  <ta-font-icon name=\"arrow-big-bottom\"></ta-font-icon>\n</div>\n\n<mat-menu #menu=\"matMenu\">\n  <ta-switch-language></ta-switch-language>\n</mat-menu>\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable, Optional, inject } from '@angular/core';\n\nimport { GRAPHQL_SERVER_CONFIG, IGraphConfig } from '@ta/server';\nimport { APPLICATION_CONFIG, IApplicationConfig } from '@ta/utils';\nimport { Observable } from 'rxjs';\n\nimport { CamUsersService } from './services/users.service';\n\n@Injectable()\nexport class ContactScopeInterceptor implements HttpInterceptor {\n  private _applicationConfig: IApplicationConfig = inject(APPLICATION_CONFIG);\n\n  constructor(\n    @Optional()\n    @Inject(GRAPHQL_SERVER_CONFIG)\n    private graphQlConfig: IGraphConfig,\n    private _userService: CamUsersService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (req.url.endsWith('.json')) {\n      return next.handle(req);\n    }\n    if (!this._applicationConfig.isCustomerApplication) {\n      return next.handle(req);\n    }\n\n    if (\n      !this.graphQlConfig?.config?.url ||\n      !req.url.startsWith(this.graphQlConfig?.config?.url) ||\n      req.url.endsWith('user')\n    ) {\n      return next.handle(req);\n    }\n\n    if (this.graphQlConfig?.config?.visitor && req.url.startsWith(this.graphQlConfig?.config?.visitor)) {\n      return next.handle(req);\n    }\n\n    return this._setContactToHeader(req, next);\n  }\n\n  private _setContactToHeader(req: HttpRequest<any>, next: HttpHandler) {\n    const contactIds = this._userService.currentUserContactIds.get()?.join(';') ?? '';\n    const contactIdsRequest = req.clone({\n      headers: req.headers.set('ContactIds', contactIds),\n    });\n    return next.handle(contactIdsRequest);\n  }\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { CamLazyTranslationService } from '@ta/translation';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CamTranslationUser extends CamLazyTranslationService {\r\n  constructor() {\r\n    super('user');\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MatMenuModule } from '@angular/material/menu';\n\nimport { CamFormInputsModule } from '@ta/form-input';\nimport { CamIconsModule } from '@ta/icons';\nimport { CamMenuModule } from '@ta/menu';\nimport { TranslatePipe } from '@ta/translation';\nimport { CamCardModule, CamContainerModule, CamListModule, CamUiModule } from '@ta/ui';\nimport { CamDirectivePipeModule, Culture, DEFAULT_USER_LANGUAGE } from '@ta/utils';\n\nimport { ContactCardComponent } from './components/contact-card/contact-card.component';\nimport { GuardComponent } from './components/guard/guard.component';\nimport { LoginCardComponent } from './components/login/login-card.component';\nimport { LoginRedirectComponent } from './components/login/redirect/redirect.component';\nimport { MenuUserComponent } from './components/menu/menu-user.component';\nimport { MyAccountComponent } from './components/my-account/my-account.component';\nimport { UserMyProfileComponent } from './components/my-profile/user-my-profile.component';\nimport { SwitchLanguageCtaComponent } from './components/switch-language/switch-language-cta/switch-language-cta.component';\nimport { SwitchLanguageComponent } from './components/switch-language/switch-language.component';\nimport { TenantUrlDisplayerComponent } from './components/tenant-url-displayer/tenant-url-displayer.component';\nimport { ContactScopeInterceptor } from './contactScopeInterceptor';\nimport { CamUsersService } from './services/users.service';\nimport { CamTranslationUser } from './translation.service';\n\n/**\n * @deprecated Use standalone components instead.\n * This module will be removed in a future version.\n * \n * @example\n * // Instead of importing the module:\n * // import { CamUserModule } from '@ta/library-name';\n * \n * // Import the standalone components directly:\n * import { LoginCardComponent, MenuUserComponent, MyAccountComponent } from '@ta/library-name';\n */\n@NgModule({\n\n  declarations: [],\n  imports: [CamUiModule, CamCardModule, CamDirectivePipeModule, CamFormInputsModule, CommonModule, CamMenuModule, CamIconsModule, CamListModule, CamContainerModule, MatMenuModule, TranslatePipe, LoginCardComponent, MenuUserComponent, MyAccountComponent, GuardComponent, LoginRedirectComponent, TenantUrlDisplayerComponent, ContactCardComponent, SwitchLanguageComponent, SwitchLanguageCtaComponent, UserMyProfileComponent],\n  exports: [\n    LoginCardComponent,\n    MenuUserComponent,\n    MyAccountComponent,\n    GuardComponent,\n    LoginRedirectComponent,\n    TenantUrlDisplayerComponent,\n    ContactCardComponent,\n    SwitchLanguageCtaComponent,\n    UserMyProfileComponent,\n  ],\n  providers: [],\n\n})\nexport class CamUserModule {\n  constructor() {\n    CamTranslationUser.getInstance();\n  }\n\n  static forRoot(): ModuleWithProviders<CamUserModule> {\n    return {\n      ngModule: CamUserModule,\n      providers: [\n        {\n          provide: DEFAULT_USER_LANGUAGE,\n          deps: [CamUsersService],\n          useFactory: (usersService: CamUsersService) => usersService.currentUser.get()?.culture ?? Culture.FR_BE,\n        },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: ContactScopeInterceptor,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\n\nimport { AuthService, User } from '@auth0/auth0-angular';\nimport { Logger, MappingApiType } from '@ta/server';\nimport { CamConfigurationService } from '@ta/services';\nimport { isNonNullable, trigram } from '@ta/utils';\nimport { distinct, filter, tap } from 'rxjs';\n\nimport { CamAuthService } from '../../user/services/auth.service';\nimport { CamUserService } from '../../user/services/user.service';\n\nconst apiRoutes: MappingApiType = {\n  GetUserProfile: {\n    type: 'GET',\n    url: '{ApiUrl}/UserProfile',\n  },\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CamAuth0Service extends CamAuthService<User> {\n  get trigram() {\n    return trigram(this.user$.value?.nickname);\n  }\n\n  get firstLetter() {\n    const name = this.user$.value?.nickname;\n    if (!name) {\n      return '-';\n    }\n    return name[0].toUpperCase();\n  }\n\n  get userProfile$() {\n    return this.userService.userProfile$;\n  }\n\n  constructor(\n    @Inject(AuthService) public auth: AuthService,\n    @Inject(CamUserService) public userService: CamUserService,\n    @Inject(CamConfigurationService)\n    public configurationService: CamConfigurationService\n  ) {\n    super(apiRoutes);\n\n    this.auth.user$\n      .pipe(\n        filter(isNonNullable),\n        distinct(user => user?.sub),\n        tap(user => this.user$.next(user || null)),\n        tap(user => {\n          Logger.LogInfo('user info', user);\n          if (user) {\n            this._permissionsService.set(\n              {\n                permissions: user['merlinsoftware/permissions'],\n                roles: user['merlinsoftware/roles'],\n                features: user['merlinsoftware/features'],\n              },\n              true\n            );\n            configurationService.set(user);\n            this.fetchUserProfile().subscribe();\n          }\n        })\n      )\n      .subscribe();\n\n    this.auth.error$\n      .pipe(\n        tap(errors => {\n          Logger.LogError('[USERSERVICE] error on authentication', errors);\n        })\n      )\n      .subscribe();\n\n    this.auth.appState$\n      .pipe(\n        tap(state => {\n          Logger.LogInfo('[USERSERVICE] state', state);\n        })\n      )\n      .subscribe();\n\n    this.auth.isAuthenticated$\n      .pipe(\n        tap(isAuthenticated => {\n          this._serverService.isAuthenticated = isAuthenticated;\n          if (isAuthenticated) {\n            this._permissionsService.setSilentAuthenticated(isAuthenticated);\n          } else {\n            this._permissionsService.setAuthenticated(isAuthenticated);\n          }\n        })\n      )\n      .subscribe();\n  }\n\n  public fetchUserProfile() {\n    return this.userService.fetchUserProfile();\n  }\n\n  public load() {}\n  public login() {\n    this.auth.loginWithRedirect();\n  }\n  public logout() {\n    return new Promise<null>(resolve => {\n      this.auth.logout();\n    });\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Provider } from '@angular/core';\r\n\r\nimport { AuthConfig, AuthHttpInterceptor, provideAuth0 as provideBaseAuth0 } from '@auth0/auth0-angular';\r\n\r\nimport { CAM_AUTH_TOKEN } from '../user/services/auth.service';\r\nimport { CamAuth0Service } from './services/auth0.service';\r\n\r\nexport interface CamAuth0Environment extends AuthConfig {}\r\n\r\nexport const provideAuth0 = (data: { config: CamAuth0Environment }): Provider => [\r\n  provideBaseAuth0(data.config),\r\n  { provide: CAM_AUTH_TOKEN, useClass: CamAuth0Service },\r\n  {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: AuthHttpInterceptor,\r\n    multi: true,\r\n  },\r\n];\r\n","/*\n * Public API Surface of users\n */\nexport * from './lib/modules/user/guards/public-api';\n\nexport * from './lib/modules/user/services/user.service';\nexport * from './lib/modules/user/services/contact.service';\nexport * from './lib/modules/user/services/users.service';\nexport * from './lib/modules/user/services/functions.service';\nexport * from './lib/modules/user/services/auth.service';\nexport * from './lib/modules/user/services/permissions';\nexport * from './lib/modules/user/services/permissions.service';\nexport * from './lib/modules/user/services/dto/user-profile';\nexport * from './lib/modules/user/services/users/form/functions.service';\n\nexport * from './lib/modules/user/components/public-api';\nexport * from './lib/modules/user/user.module';\n\nexport * from './lib/modules/auth0/provide';\n\nexport * from './lib/modules/user/services/users/dto/currentUser';\nexport * from './lib/modules/user/services/users/dto/user';\nexport * from './lib/modules/user/services/users/dto/userAddedPayload';\nexport * from './lib/modules/user/services/users/dto/userModifiedPayload';\nexport * from './lib/modules/user/services/users/dto/modifyUserPayloadInput';\nexport * from './lib/modules/user/services/users/dto/function';\nexport * from './lib/modules/user/services/users/dto/role';\nexport * from './lib/modules/user/services/contacts/dto/contact';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["map","apiRoutes","graphEndpoint","i1","ButtonComponent","i1.CamUsersService","LoaderComponent","ListContainerComponent","ListElementComponent","ListTitleComponent","provideBaseAuth0"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAMA;MACa,eAAe,CAAA;AAU1B,IAAA,IAAI,QAAQ,GAAA;AACV,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,IAAI;IACtC;AAEA,IAAA,WAAA,GAAA;AAbQ,QAAA,IAAA,CAAA,SAAS,GAAG,IAAI,eAAe,CAAgB,IAAI,CAAC;QACpD,IAAA,CAAA,OAAO,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,eAAe,EAAE,KAAK,EAAE;QAEzD,IAAA,CAAA,MAAM,GAAkC,EAAE;QAC1C,IAAA,CAAA,KAAK,GAAa,EAAE;QACpB,IAAA,CAAA,eAAe,GAAY,KAAK;AAEhC,QAAA,IAAA,CAAA,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IAM7C;IAER,GAAG,CACR,IAGC,EACD,eAAwB,EAAA;QAExB,MAAM,CAAC,OAAO,CAAC,0BAA0B,EAAE,IAAI,CAAC,WAAW,CAAC;AAE5D,QAAA,IAAI,CAAC,MAAM,GAAG,EAAE;AAChB,QAAA,IAAI,IAAI,CAAC,WAAW,EAAE;AACpB,YAAA,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE;gBACjC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;gBAE9B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;oBAC3B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;gBAC7B;AACA,gBAAA,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACxC;QACF;QAEA,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE;AAE7B,QAAA,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI;AAE/B,QAAA,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC;QAE5C,IAAI,CAAC,aAAa,EAAE;AACpB,QAAA,MAAM,CAAC,OAAO,CAAC,qBAAqB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC;IAChE;AAEO,IAAA,sBAAsB,CAAC,eAAwB,EAAA;AACpD,QAAA,IAAI,CAAC,eAAe,GAAG,eAAe;AACtC,QAAA,IAAI,CAAC,OAAO,CAAC,eAAe,GAAG,IAAI;QAEnC,IAAI,CAAC,aAAa,EAAE;IACtB;AACO,IAAA,gBAAgB,CAAC,eAAwB,EAAA;AAC9C,QAAA,IAAI,CAAC,eAAe,GAAG,eAAe;QACtC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;IACjC;AAEO,IAAA,OAAO,CAAC,IAAY,EAAA;AACzB,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC/C;IAEO,eAAe,CAAC,OAAe,EAAE,KAAa,EAAA;AACnD,QAAA,IAAI,KAAK,KAAK,eAAe,EAAE;YAC7B,OAAO,IAAI,CAAC,eAAe;QAC7B;QAEA,IAAI,CAAC,OAAO,EAAE;AACZ,YAAA,OAAO,IAAI;QACb;QAEA,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QACzC,IAAI,CAAC,YAAY,EAAE;AACjB,YAAA,OAAO,KAAK;QACd;AAEA,QAAA,IAAI,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AAChC,YAAA,OAAO,IAAI;QACb;QAEA,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AACjC,YAAA,OAAO,KAAK;QACd;AAEA,QAAA,OAAO,IAAI;IACb;IAEO,SAAS,CAAC,OAAe,EAAE,KAA6C,EAAA;QAC7E,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;IAC7E;IAEQ,aAAa,GAAA;AACnB,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;YAC9D;QACF;QACA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;IACjC;AACD;AAED;AACO,MAAM,WAAW,GAAG,IAAI,eAAe;;ACnF9C,MAAM,YAAY,GAAG,CAAC,QAAQ,EAAE,aAAa,EAAE,eAAe,CAAC;MAKlD,qBAAqB,CAAA;AAWhC,IAAA,IAAI,QAAQ,GAAA;AACV,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,IAAI;IACtC;AAEA,IAAA,WAAA,GAAA;AAdQ,QAAA,IAAA,CAAA,SAAS,GAAG,IAAI,eAAe,CAAgB,IAAI,CAAC;QACpD,IAAA,CAAA,OAAO,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,eAAe,EAAE,KAAK,EAAE;QAEzD,IAAA,CAAA,QAAQ,GAAmC,EAAE;QAC7C,IAAA,CAAA,MAAM,GAA+B,EAAE;QACvC,IAAA,CAAA,KAAK,GAAa,EAAE;QACpB,IAAA,CAAA,eAAe,GAAY,KAAK;AAEhC,QAAA,IAAA,CAAA,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IAM7C;IAER,GAAG,CACR,IAIC,EACD,eAAwB,EAAA;QAExB,MAAM,CAAC,OAAO,CAAC,0BAA0B,EAAE,IAAI,CAAC,WAAW,CAAC;QAE5D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE;QACnC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE;AAE7B,QAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AAChB,aAAA,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;AACvC,aAAA,MAAM,CAAqB,CAAC,GAAG,EAAE,IAAI,KAAI;YACxC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AACvB,gBAAA,OAAO,GAAG;YACZ;AACA,YAAA,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;AAExC,YAAA,MAAM,UAAU,GACd,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;YAC/F,OAAO;AACL,gBAAA,GAAG,GAAG;gBACN,CAAC,MAAM,GAAU,UAAU;aAC5B;QACH,CAAC,EAAE,EAAE,CAAC;QACR,MAAM,CAAC,OAAO,CAAC,qBAAqB,EAAE,IAAI,CAAC,MAAM,CAAC;AAElD,QAAA,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI;AAE/B,QAAA,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC;AAC5C,QAAA,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,CAAC;QAEtC,IAAI,CAAC,aAAa,EAAE;IACtB;AAEO,IAAA,sBAAsB,CAAC,eAAwB,EAAA;AACpD,QAAA,IAAI,CAAC,eAAe,GAAG,eAAe;AACtC,QAAA,IAAI,CAAC,OAAO,CAAC,eAAe,GAAG,IAAI;AACnC,QAAA,WAAW,CAAC,sBAAsB,CAAC,eAAe,CAAC;QAEnD,IAAI,CAAC,aAAa,EAAE;IACtB;AACO,IAAA,gBAAgB,CAAC,eAAwB,EAAA;AAC9C,QAAA,IAAI,CAAC,eAAe,GAAG,eAAe;AAEtC,QAAA,WAAW,CAAC,gBAAgB,CAAC,eAAe,CAAC;QAE7C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;IACjC;AAEO,IAAA,OAAO,CAAC,IAAY,EAAA;AACzB,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC;IACzC;IAEO,eAAe,CAAC,OAA4C,EAAE,KAAqB,EAAA;AACxF,QAAA,IAAI,KAAK,KAAK,eAAe,EAAE;YAC7B,OAAO,IAAI,CAAC,eAAe;QAC7B;AAEA,QAAA,IAAI,KAAK,KAAK,WAAW,EAAE;YACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC;QACxC;QAEA,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,WAAW,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC;QACpD;QAEA,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QACzC,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,WAAW,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC;QACpD;AAEA,QAAA,OAAO,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC;IAC1E;IAEO,UAAU,CAAC,OAAmC,EAAE,KAAqB,EAAA;QAC1E,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAACA,KAAG,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;IAC7E;IAEQ,aAAa,GAAA;AACnB,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;YAC9D;QACF;QACA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;IACjC;+GAxGW,qBAAqB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAArB,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,qBAAqB,cAFpB,MAAM,EAAA,CAAA,CAAA;;4FAEP,qBAAqB,EAAA,UAAA,EAAA,CAAA;kBAHjC,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA;;;MCdY,SAAS,CAAA;AAGpB,IAAA,WAAA,CAAoB,MAAc,EAAA;QAAd,IAAA,CAAA,MAAM,GAAN,MAAM;AAFV,QAAA,IAAA,CAAA,mBAAmB,GAAG,MAAM,CAAC,qBAAqB,CAAC;IAE9B;IACrC,WAAW,CAAC,IAA4B,EAAE,KAA0B,EAAA;AAClE,QAAA,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE;YACtC,OAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAC3C,GAAG,CAAC,MAAK;AACP,gBAAA,IAAI,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAE;AAC5C,oBAAA,OAAO,IAAI;gBACb;qBAAO;oBACL,IAAI,CAAC,WAAW,EAAE;AAClB,oBAAA,OAAO,KAAK;gBACd;YACF,CAAC,CAAC,CACH;QACH;QACA,IAAI,IAAI,CAAC,mBAAmB,CAAC,eAAe,KAAK,KAAK,EAAE;YACtD,IAAI,CAAC,WAAW,EAAE;AAClB,YAAA,OAAO,KAAK;QACd;AACA,QAAA,OAAO,IAAI,CAAC,mBAAmB,CAAC,eAAe;IACjD;IAEO,WAAW,GAAA;QAChB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAChD;+GA1BW,SAAS,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAT,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,SAAS,cAFR,MAAM,EAAA,CAAA,CAAA;;4FAEP,SAAS,EAAA,UAAA,EAAA,CAAA;kBAHrB,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA;;;MCKY,YAAY,CAAA;AAGvB,IAAA,WAAA,CAAoB,MAAc,EAAA;QAAd,IAAA,CAAA,MAAM,GAAN,MAAM;AAFV,QAAA,IAAA,CAAA,mBAAmB,GAAG,MAAM,CAAC,qBAAqB,CAAC;IAE9B;AAErC,IAAA,WAAW,CAAC,KAA6B,EAAA;QACvC,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;QACjC,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;QAErC,IAAI,IAAI,CAAC,mBAAmB,CAAC,QAAQ,KAAK,IAAI,EAAE;YAC9C,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,KAAK,CAAC;QAChD;QACA,OAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAC3C,GAAG,CAAC,MAAK;YACP,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,KAAK,CAAC;QAChD,CAAC,CAAC,CACH;IACH;IAEO,WAAW,GAAA;QAChB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC/C;IAEQ,kBAAkB,CAAC,OAAe,EAAE,KAAa,EAAA;QACvD,IAAI,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;AAC5D,YAAA,OAAO,IAAI;QACb;QACA,IAAI,CAAC,WAAW,EAAE;AAClB,QAAA,OAAO,KAAK;IACd;+GA7BW,YAAY,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,MAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAZ,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,YAAY,cAFX,MAAM,EAAA,CAAA,CAAA;;4FAEP,YAAY,EAAA,UAAA,EAAA,CAAA;kBAHxB,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA;;;ACjBD;;AAEG;;ACMH,MAAMC,WAAS,GAAmB;AAChC,IAAA,cAAc,EAAE;AACd,QAAA,IAAI,EAAE,KAAK;AACX,QAAA,GAAG,EAAE,sBAAsB;AAC5B,KAAA;CACF;AAKK,MAAO,cAAe,SAAQ,cAAc,CAAA;AAGhD,IAAA,WAAA,GAAA;QACE,KAAK,CAACA,WAAS,CAAC;AAHX,QAAA,IAAA,CAAA,YAAY,GAAG,IAAI,eAAe,CAAqB,IAAI,CAAC;IAInE;IAEO,gBAAgB,GAAA;AACrB,QAAA,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAc,IAAI,OAAO,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAC1G,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EACtB,GAAG,CAAC,IAAI,IAAG;AACT,YAAA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;AAC9B,QAAA,CAAC;;;;;;;;;;;;SAYF;IACH;+GAzBW,cAAc,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAd,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,cAAc,cAFb,MAAM,EAAA,CAAA,CAAA;;4FAEP,cAAc,EAAA,UAAA,EAAA,CAAA;kBAH1B,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA;;;ACND,MAAM,KAAK,GAAsB,CAAC,IAAI,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE,aAAa,EAAE,gBAAgB,CAAC;MAE5F,YAAY,GAAG,IAAI,WAAW,CAAU,KAAK;;ACXpD,SAAU,YAAY,CAAC,KAAa,EAAE,KAAa,EAAA;IACvD,OAAO;QACL,KAAK,EAAE,UAAU,CAAA;;qBAEA,KAAK,CAAA,EAAA,EAAK,WAAW,EAAE,CAAA;;gBAE5B,KAAK;;;;AAId,MAAA,CAAA;AACH,QAAA,SAAS,EAAE,EAAE;KACd;AACH;AAEM,SAAU,kBAAkB,CAAC,KAAa,EAAE,KAAa,EAAA;IAC7D,OAAO;QACL,KAAK,EAAE,UAAU,CAAA;;0BAEK,KAAK,CAAA,EAAA,EAAK,WAAW,EAAE,CAAA;;gBAEjC,KAAK;;;;AAId,MAAA,CAAA;AACH,QAAA,SAAS,EAAE,EAAE;KACd;AACH;SAEgB,mBAAmB,CAAC,MAAc,EAAE,KAAa,EAAE,KAAa,EAAA;IAC9E,OAAO;QACL,KAAK,EAAE,UAAU,CAAA;;AAES,4BAAA,EAAA,KAAK,CAAA,WAAA,EAAc,MAAM,CAAA,GAAA,EAAM,WAAW,EAAE,CAAA;;;kBAGxD,KAAK;;;;AAIlB,IAAA,CAAA;AACD,QAAA,SAAS,EAAE,EAAE;KACd;AACH;;ACrCA,MAAMC,eAAa,GAAkB;AACnC,IAAA,UAAU,EAAE,gBAAgB;AAC5B,IAAA,QAAQ,EAAE,SAAS;CACpB;AAKK,MAAO,iBAAkB,SAAQ,cAAc,CAAA;AAInD,IAAA,WAAA,GAAA;AACE,QAAA,KAAK,EAAE;AAJF,QAAA,IAAA,CAAA,WAAW,GAAG,IAAI,oBAAoB,EAAW;AACjD,QAAA,IAAA,CAAA,QAAQ,GAAG,IAAI,mBAAmB,EAAa;QAKpD,KAAK,CAAC,cAAc,CAAC,EAAE,aAAa,EAAEA,eAAa,EAAE,CAAC;IACxD;AAEO,IAAA,iBAAiB,CAAC,SAAiB,EAAA;QACxC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAC3B,SAAS,EACT,IAAI,CAAC;AACF,aAAA,mBAAmB,CAClB,YAAY,CACV,CAAA,oBAAA,EAAuB,SAAS,OAAO,EACvC;AACE,YAAA,EAAA,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC;AACtB,YAAA,EAAA,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC;AAC7B,YAAA,EAAA,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC;AAC5B,YAAA,EAAA,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC;AACxB,YAAA,EAAA,YAAY,CAAC,GAAG,CAAC,aAAa,CAAC;AAC/B,YAAA,EAAA,YAAY,CAAC,GAAG,CAAC,gBAAgB,CAAC;AACrC,UAAA,CAAA,CACA,EACD,UAAU,EACVA,eAAa,CAAC,UAAU;AAEzB,aAAA,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrBF,KAAG,CAAC,IAAI,KAAK;AACX,YAAA,GAAG,IAAI;AACP,YAAA,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,EAAE;AACxB,SAAA,CAAC,CAAC,EACH,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,EACrCA,KAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC3B,CACJ;IACH;IAEO,aAAa,GAAA;QAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CACxB,IAAI,CAAC;AACF,aAAA,mBAAmB,CAClB,kBAAkB,CAChB,EAAE,EACF;AACI,cAAA,EAAA,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC;AACtB,cAAA,EAAA,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC;AAC7B,cAAA,EAAA,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC;AAC5B,cAAA,EAAA,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC;AACxB,cAAA,EAAA,YAAY,CAAC,GAAG,CAAC,aAAa,CAAC;AAClC,YAAA,CAAA,CACF,EACD,eAAe,EACfE,eAAa,CAAC,UAAU;aAEzB,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrBF,KAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAC9B,CACJ;IACH;AAEO,IAAA,mBAAmB,CAAC,GAAa,EAAA;QACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CACxB,IAAI,CAAC;aACF,mBAAmB,CAClB,kBAAkB,CAChB,CAAA,oBAAA,EAAuB,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAA,CAAA,EAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,KAAA,CAAO,EACjE;AACI,cAAA,EAAA,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC;AACtB,cAAA,EAAA,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC;AAC7B,cAAA,EAAA,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC;AAC5B,cAAA,EAAA,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC;AAC3B,YAAA,CAAA,CACF,EACD,eAAe,EACfE,eAAa,CAAC,UAAU;aAEzB,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrBF,KAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAC9B,CACJ;IACH;AAEO,IAAA,mBAAmB,CAAC,MAAe,EAAA;QACxC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;AAChC,YAAA,OAAO,EAAE,CAAC,EAAE,CAAC;QACf;QACA,OAAO,IAAI,CAAC;AACT,aAAA,mBAAmB,CAClB,mBAAmB,CACjB,MAAM,EACN;AACM,cAAA,EAAA,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC;AACtB,cAAA,EAAA,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC;AAC7B,cAAA,EAAA,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC;AAC5B,cAAA,EAAA,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC;aAC3B,EACH,CAAA,wBAAA,CAA0B,CAC3B,EACD,qBAAqB,EACrBE,eAAa,CAAC,UAAU;AAEzB,aAAA,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrBF,KAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,EAC7B,GAAG,CAAC,IAAI,IACN,IAAI,CAAC,OAAO,CAAC,OAAO,IAAG;YACrB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC;QAC3C,CAAC,CAAC,CACH,CACF;IACL;+GApHW,iBAAiB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAjB,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,iBAAiB,cAFhB,MAAM,EAAA,CAAA,CAAA;;4FAEP,iBAAiB,EAAA,UAAA,EAAA,CAAA;kBAH7B,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA;;;ACMM,MAAM,aAAa,GAAG,IAAI,WAAW,CAAW,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC;;ACXnF,MAAM,SAAS,GAAG,IAAI,WAAW,CAAO;IAC7C,IAAI;IACJ,UAAU;IACV,WAAW;IACX,UAAU;IACV,aAAa;IACb,WAAW;IACX,SAAS;IACT,SAAS;IACT,SAAS;IACT,oBAAoB;IACpB,WAAW;AACZ,CAAA;;ACfK,SAAU,QAAQ,CAAC,gBAAkC,EAAA;IACzD,OAAO;QACL,QAAQ,EAAE,GAAG,CAAA;;;AAGL,UAAA,EAAA,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC;AACnB,UAAA,EAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;AACzB,UAAA,EAAA,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;AAC1B,UAAA,EAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;AACzB,UAAA,EAAA,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC;AAC5B,UAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;AACxB,UAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;AACxB,UAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;;;AAG/B,IAAA,CAAA;AACD,QAAA,SAAS,EAAE;AACT,YAAA,gBAAgB,EAAE,gBAAgB;AACnC,SAAA;KACF;AACH;AAEM,SAAU,YAAY,CAAC,MAAc,EAAA;IACzC,OAAO;QACL,QAAQ,EAAE,GAAG,CAAA;;;;AAIZ,IAAA,CAAA;AACD,QAAA,SAAS,EAAE;AACT,YAAA,MAAM,EAAE,MAAM;AACf,SAAA;KACF;AACH;SAEgB,oBAAoB,GAAA;IAClC,OAAO;QACL,QAAQ,EAAE,GAAG,CAAA;;;;AAIZ,IAAA,CAAA;AACD,QAAA,SAAS,EAAE,EAAE;KACd;AACH;AAEM,SAAU,mBAAmB,CAAC,IAA4B,EAAA;IAC9D,OAAO;QACL,QAAQ,EAAE,GAAG,CAAA;;;AAGH,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;AAC1B,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;AACzB,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC;AAC5B,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;;;AAG/B,MAAA,CAAA;AACH,QAAA,SAAS,EAAE;AACT,YAAA,IAAI,EAAE,IAAI;AACX,SAAA;KACF;AACH;AAEM,SAAU,YAAY,CAAC,oBAA6C,EAAA;IACxE,OAAO;QACL,QAAQ,EAAE,GAAG,CAAA;;;AAGL,UAAA,EAAA,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC;;;AAG9B,IAAA,CAAA;AACD,QAAA,SAAS,EAAE;AACT,YAAA,oBAAoB,EAAE,oBAAoB;AAC3C,SAAA;KACF;AACH;AAEM,SAAU,eAAe,CAAC,uBAAyD,EAAA;IACvF,OAAO;QACL,QAAQ,EAAE,GAAG,CAAA;;;AAGH,YAAA,EAAA,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC;;;AAG9B,MAAA,CAAA;AACH,QAAA,SAAS,EAAE;AACT,YAAA,uBAAuB,EAAE,uBAAuB;AACjD,SAAA;KACF;AACH;AAEM,SAAU,oBAAoB,CAAC,OAA4B,EAAA;IAC/D,OAAO;QACL,QAAQ,EAAE,GAAG,CAAA;;;;;;AAMZ,IAAA,CAAA;AACD,QAAA,SAAS,EAAE;YACT,OAAO;AACR,SAAA;KACF;AACH;AAEM,SAAU,yBAAyB,CAAC,OAA4B,EAAA;IACpE,OAAO;QACL,QAAQ,EAAE,GAAG,CAAA;;;;AAIZ,IAAA,CAAA;AACD,QAAA,SAAS,EAAE;YACT,OAAO;AACR,SAAA;KACF;AACH;;ACvHO,MAAM,uBAAuB,GAAG,IAAI,WAAW,CAAoB,CAAC,YAAY,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;;ACH7G,SAAU,cAAc,CAAC,EAAU,EAAA;IACvC,OAAO;QACL,KAAK,EAAE,UAAU,CAAA;;;AAGL,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC;AACnB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;AACzB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;AAC1B,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;AACzB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC;AAC5B,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;AAC1B,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;AACxB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;AACxB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;AACxB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;AACxB,gBAAA,EAAA,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC;AACvB,gBAAA,EAAA,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC;;;;AAIpC,MAAA,CAAA;AACH,QAAA,SAAS,EAAE;AACT,YAAA,EAAE,EAAE,EAAE;AACP,SAAA;KACF;AACH;SAEgB,gBAAgB,GAAA;IAC9B,OAAO;QACL,KAAK,EAAE,UAAU,CAAA;;;AAGP,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC;AACnB,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;AACzB,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;AAC1B,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;AACzB,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC;AAC5B,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;AAC1B,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;AACxB,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;AACxB,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;AACxB,YAAA,EAAA,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAA;AACjC,cAAA,EAAA,uBAAuB,CAAC,GAAG,CAAC,YAAY,CAAC;AACzC,cAAA,EAAA,uBAAuB,CAAC,GAAG,CAAC,UAAU,CAAC;AACvC,cAAA,EAAA,uBAAuB,CAAC,GAAG,CAAC,YAAY,CAAC;;;;AAIlD,MAAA,CAAA;AACH,QAAA,SAAS,EAAE,EAAE;KACd;AACH;SAEgB,SAAS,CAAC,KAAa,EAAE,KAAa,EAAE,KAAa,EAAA;IACnE,OAAO;QACL,KAAK,EAAE,UAAU,CAAA;;AAEL,cAAA,EAAA,KAAK,CAAA,EAAA,EAAK,KAAK,CAAA,EAAA,EAAK,WAAW,EAAE,CAAA;;cAEnC,KAAK;;;;AAId,IAAA,CAAA;AACD,QAAA,SAAS,EAAE,EAAE;KACd;AACH;AAEM,SAAU,aAAa,CAAC,KAAa,EAAE,KAAa,EAAA;IACxD,OAAO;QACL,KAAK,EAAE,UAAU,CAAA;;oBAED,KAAK,CAAA,EAAA,EAAK,WAAW,EAAE,CAAA;;cAE7B,KAAK;;;;AAId,IAAA,CAAA;AACD,QAAA,SAAS,EAAE,EAAE;KACd;AACH;AAEM,SAAU,SAAS,CAAC,KAAa,EAAE,KAAa,EAAA;IACpD,OAAO;QACL,KAAK,EAAE,UAAU,CAAA;;gBAEL,KAAK,CAAA,EAAA,EAAK,WAAW,EAAE,CAAA;;cAEzB,KAAK;;;;AAId,IAAA,CAAA;AACD,QAAA,SAAS,EAAE,EAAE;KACd;AACH;AAEM,SAAU,mBAAmB,CAAC,KAAa,EAAE,KAAa,EAAA;IAC9D,OAAO;QACL,KAAK,EAAE,UAAU,CAAA;;yBAEI,KAAK,CAAA,EAAA,EAAK,WAAW,EAAE,CAAA;;cAElC,KAAK;;;;AAId,IAAA,CAAA;AACD,QAAA,SAAS,EAAE,EAAE;KACd;AACH;AAEM,SAAU,0BAA0B,CAAC,MAAc,EAAE,KAAa,EAAA;IACtE,OAAO;QACL,KAAK,EAAE,UAAU,CAAA;;wCAEmB,MAAM,CAAA,GAAA,EAAM,WAAW,EAAE,CAAA;;;kBAG/C,KAAK;;;;AAIlB,IAAA,CAAA;AACD,QAAA,SAAS,EAAE,EAAE;KACd;AACH;SAEgB,eAAe,GAAA;IAC7B,OAAO;QACL,KAAK,EAAE,UAAU,CAAA;;;;AAIhB,IAAA,CAAA;AACD,QAAA,SAAS,EAAE,EAAE;KACd;AACH;AAEM,SAAU,wBAAwB,CAAC,SAAiB,EAAA;IACxD,OAAO;QACL,KAAK,EAAE,UAAU,CAAA;;;;AAId,MAAA,CAAA;AACH,QAAA,SAAS,EAAE;AACT,YAAA,SAAS,EAAE,SAAS;AACrB,SAAA;KACF;AACH;;ACxIO,MAAM,eAAe,GAAG;AAC7B,IAAA,WAAW,EAAE,aAAa;;AAE5B,MAAME,eAAa,GAAkB;AACnC,IAAA,UAAU,EAAE,aAAa;AACzB,IAAA,QAAQ,EAAE,MAAM;CACjB;AAKK,MAAO,eAAgB,SAAQ,cAAc,CAAA;AAWjD,IAAA,WAAA,GAAA;AACE,QAAA,KAAK,EAAE;AAXF,QAAA,IAAA,CAAA,KAAK,GAAG,IAAI,mBAAmB,EAAU;AACzC,QAAA,IAAA,CAAA,cAAc,GAAG,IAAI,mBAAmB,EAAU;AAElD,QAAA,IAAA,CAAA,QAAQ,GAAG,IAAI,oBAAoB,EAAQ;AAC3C,QAAA,IAAA,CAAA,IAAI,GAAG,IAAI,oBAAoB,EAAQ;AACvC,QAAA,IAAA,CAAA,WAAW,GAAG,IAAI,mBAAmB,EAAQ;AAC7C,QAAA,IAAA,CAAA,qBAAqB,GAAG,IAAI,mBAAmB,EAAY;AAE3D,QAAA,IAAA,CAAA,kBAAkB,GAAG,IAAI,mBAAmB,EAAU;QAI3D,KAAK,CAAC,cAAc,CAAC,EAAE,aAAa,EAAEA,eAAa,EAAE,CAAC;IACxD;IAEO,WAAW,GAAA;QAChB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CACrB,IAAI,CAAC;AACF,aAAA,mBAAmB,CAClB,SAAS,CACP,EAAE,EACF;AACI,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC;AACnB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;AACzB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;AAC1B,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;AACzB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC;AAC5B,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;AACxB,gBAAA,EAAA,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC;AACvB,gBAAA,EAAA,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC;;AAE3B,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;AACxB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;AACxB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;;aAE3B,EACD,CAAA,wBAAA,CAA0B,CAC3B,EACD,OAAO,EACPA,eAAa,CAAC,UAAU;aAEzB,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrBF,KAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAC9B,CACJ;IACH;AAEO,IAAA,wBAAwB,CAAC,SAAiB,EAAA;QAC/C,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAClC,IAAI,CAAC;aACF,UAAU,CAAS,wBAAwB,CAAC,SAAS,CAAC,EAAE,oBAAoB,EAAEE,eAAa,CAAC,UAAU;AACtG,aAAA,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAC/B;IACH;AAEO,IAAA,gBAAgB,CAAC,GAAa,EAAA;QACnC,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CACrB,IAAI,CAAC;aACF,mBAAmB,CAClB,SAAS,CACP,CAAA,oBAAA,EAAuB,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAA,CAAA,EAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,KAAA,CAAO,EACjE;AACI,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC;AACnB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;AACzB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;AAC1B,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;AACzB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;AACxB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;aAC3B,EACD,CAAA,wBAAA,CAA0B,CAC3B,EACD,OAAO,EACPA,eAAa,CAAC,UAAU;aAEzB,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrBF,KAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAC9B,CACJ;IACH;AAEO,IAAA,UAAU,CAAC,EAAU,EAAA;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CACpB,EAAE,EACF,IAAI,CAAC,aAAa,CAAC,UAAU,CAAO,cAAc,CAAC,EAAE,CAAC,EAAE,UAAU,EAAEE,eAAa,CAAC,UAAU,CAAC,CAC9F;IACH;IAEO,iBAAiB,GAAA;QACtB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAC3B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAO,gBAAgB,EAAE,EAAE,eAAe,CAAC,WAAW,EAAEA,eAAa,CAAC,UAAU,CAAC,CAC/G;IACH;IAEO,2BAA2B,GAAA;QAChC,OAAO,IAAI,CAAC;aACT,KAAK,CACJ,IAAI,CAAC;aACF,cAAc,CAAS,eAAe,EAAE,EAAE,YAAY,EAAEA,eAAa,CAAC,UAAU;AAChF,aAAA,IAAI,CAACF,KAAG,CAAC,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC,CAAC;AAEjC,aAAA,IAAI,CACH,GAAG,CAAC,MAAK;YACP,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;QAC/C,CAAC,CAAC,CACH;IACL;AAEO,IAAA,oBAAoB,CAAC,MAAe,EAAA;QACzC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;AAChC,YAAA,OAAO,EAAE,CAAC,EAAE,CAAC;QACf;QACA,OAAO,IAAI,CAAC;AACT,aAAA,mBAAmB,CAClB,0BAA0B,CACxB,MAAM,EACN;AACM,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC;AACnB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;AACxB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;AACxB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;AAC1B,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;AACzB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;AAC5B,YAAA,CAAA,CACJ,EACD,sBAAsB,EACtBE,eAAa,CAAC,UAAU;AAEzB,aAAA,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrBF,KAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,EAC7B,GAAG,CAAC,IAAI,IACN,IAAI,CAAC,OAAO,CAAC,OAAO,IAAG;YACrB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC;QACxC,CAAC,CAAC,CACH,CACF;IACL;AAEO,IAAA,QAAQ,CAAC,gBAAkC,EAAA;AAChD,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAO,QAAQ,CAAC,gBAAgB,CAAC,EAAE,OAAO,EAAEE,eAAa,CAAC,UAAU,CAAC,CAAC,IAAI,CACxG,MAAM,CAAC,aAAa,CAAC,EACrB,SAAS,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,EACnC,UAAU,CAAC,KAAK,IAAG;AACjB,YAAA,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC;AAC1C,YAAA,OAAO,EAAE,CAAC,IAAI,CAAC;QACjB,CAAC,CAAC,CACH;IACH;AAEO,IAAA,YAAY,CAAC,MAAc,EAAA;AAChC,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAU,YAAY,CAAC,MAAM,CAAC,EAAE,OAAO,EAAEA,eAAa,CAAC,UAAU,CAAC,CAAC,IAAI,CACrG,SAAS,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EACxC,UAAU,CAAC,KAAK,IAAG;AACjB,YAAA,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC;AAC7C,YAAA,OAAO,EAAE,CAAC,IAAI,CAAC;QACjB,CAAC,CAAC,CACH;IACH;IAEO,mBAAmB,GAAA;AACxB,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAU,oBAAoB,EAAE,EAAE,OAAO,EAAEA,eAAa,CAAC,UAAU,CAAC,CAAC,IAAI,CACvG,SAAS,CAAC,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC,EACzC,UAAU,CAAC,KAAK,IAAG;AACjB,YAAA,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC;AAC7C,YAAA,OAAO,EAAE,CAAC,IAAI,CAAC;QACjB,CAAC,CAAC,CACH;IACH;AAEO,IAAA,kBAAkB,CAAC,IAA4B,EAAA;QACpD,OAAO,IAAI,CAAC;AACT,aAAA,MAAM,CAAc,mBAAmB,CAAC,IAAI,CAAC,EAAE,OAAO,EAAEA,eAAa,CAAC,UAAU,EAAE,CAAC,eAAe,CAAC,WAAW,CAAC;AAC/G,aAAA,IAAI,CACH,SAAS,CAAC,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC,EACzC,UAAU,CAAC,KAAK,IAAG;AACjB,YAAA,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC;AAC5C,YAAA,OAAO,EAAE,CAAC,IAAI,CAAC;QACjB,CAAC,CAAC,CACH;IACL;+GAtLW,eAAe,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAf,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,eAAe,cAFd,MAAM,EAAA,CAAA,CAAA;;4FAEP,eAAe,EAAA,UAAA,EAAA,CAAA;kBAH3B,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA;;;ACxBM,MAAM,SAAS,GAAG,IAAI,WAAW,CAAO,CAAC,IAAI,EAAE,MAAM,CAAC;;ACM7D,MAAM,aAAa,GAAkB;AACnC,IAAA,UAAU,EAAE,aAAa;AACzB,IAAA,QAAQ,EAAE,MAAM;CACjB;AAKK,MAAO,mBAAoB,SAAQ,cAAc,CAAA;AAMrD,IAAA,WAAA,GAAA;AACE,QAAA,KAAK,EAAE;AANF,QAAA,IAAA,CAAA,SAAS,GAAG,IAAI,mBAAmB,EAAc;AACjD,QAAA,IAAA,CAAA,KAAK,GAAG,IAAI,mBAAmB,EAAU;AAExC,QAAA,IAAA,CAAA,aAAa,GAAG,MAAM,CAAC,eAAe,CAAC;QAI7C,KAAK,CAAC,cAAc,CAAC,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC;IACxD;IAEO,eAAe,GAAA;QACpB,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CACzB,IAAI,CAAC;AACF,aAAA,mBAAmB,CAClB,aAAa,CACX,EAAE,EACF;AACI,cAAA,EAAA,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC;AACvB,cAAA,EAAA,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC;AACzB,cAAA,EAAA,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;AACxB,gBAAA,EAAA,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC;AACnB,gBAAA,EAAA,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC;;AAE1B,YAAA,CAAA,CACF,EACD,WAAW,EACX,aAAa,CAAC,UAAU;aAEzB,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrBF,KAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAC9B,CACJ;IACH;IAEO,WAAW,GAAA;QAChB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CACrB,IAAI,CAAC;AACF,aAAA,mBAAmB,CAClB,SAAS,CACP,EAAE,EACF;AACI,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC;AACnB,cAAA,EAAA,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC;AACxB,YAAA,CAAA,CACF,EACD,OAAO,EACP,aAAa,CAAC,UAAU;aAEzB,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrBA,KAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAC9B,CACJ;IACH;AAEO,IAAA,YAAY,CAAC,oBAA6C,EAAA;QAC/D,OAAO,IAAI,CAAC;AACT,aAAA,MAAM,CAAW,YAAY,CAAC,oBAAoB,CAAC,EAAE,aAAa,EAAE,aAAa,CAAC,UAAU,EAAE,CAAC,WAAW,CAAC;aAC3G,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrB,SAAS,CAAC,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC,EACvC,UAAU,CAAC,KAAK,IAAG;AACjB,YAAA,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC;AAC9C,YAAA,OAAO,EAAE,CAAC,IAAI,CAAC;QACjB,CAAC,CAAC,CACH;IACL;AAEO,IAAA,eAAe,CAAC,uBAAyD,EAAA;QAC9E,OAAO,IAAI,CAAC;aACT,MAAM,CAAW,eAAe,CAAC,uBAAuB,CAAC,EAAE,gBAAgB,EAAE,aAAa,CAAC,UAAU,EAAE;YACtG,WAAW;SACZ;aACA,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrB,SAAS,CAAC,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC,EACvC,UAAU,CAAC,KAAK,IAAG;AACjB,YAAA,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC;AAC9C,YAAA,OAAO,EAAE,CAAC,IAAI,CAAC;QACjB,CAAC,CAAC,CACH;IACL;AAEO,IAAA,kBAAkB,CAAC,OAA4B,EAAA;QACpD,OAAO,IAAI,CAAC;AACT,aAAA,MAAM,CAAW,oBAAoB,CAAC,OAAO,CAAC,EAAE,mBAAmB,EAAE,aAAa,CAAC,UAAU,EAAE,CAAC,UAAU,CAAC;aAC3G,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrB,SAAS,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAC9D,UAAU,CAAC,KAAK,IAAG;AACjB,YAAA,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC;AAC9C,YAAA,OAAO,EAAE,CAAC,IAAI,CAAC;QACjB,CAAC,CAAC,CACH;IACL;AAEO,IAAA,uBAAuB,CAAC,OAA4B,EAAA;QACzD,OAAO,IAAI,CAAC;aACT,MAAM,CAAW,yBAAyB,CAAC,OAAO,CAAC,EAAE,wBAAwB,EAAE,aAAa,CAAC,UAAU,EAAE;YACxG,UAAU;SACX;aACA,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrB,SAAS,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAC9D,UAAU,CAAC,KAAK,IAAG;AACjB,YAAA,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC;AAC9C,YAAA,OAAO,EAAE,CAAC,IAAI,CAAC;QACjB,CAAC,CAAC,CACH;IACL;+GA/GW,mBAAmB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAnB,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,mBAAmB,cAFlB,MAAM,EAAA,CAAA,CAAA;;4FAEP,mBAAmB,EAAA,UAAA,EAAA,CAAA;kBAH/B,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA;;;MCTY,cAAc,GAAG,IAAI,cAAc,CAAsB,gBAAgB;AAKhF,MAAgB,cAAkB,SAAQ,cAAc,CAAA;AAkB5D,IAAA,WAAA,CAAY,SAA0B,EAAA;QACpC,KAAK,CAAC,SAAS,CAAC;AAlBF,QAAA,IAAA,CAAA,mBAAmB,GAAG,MAAM,CAAC,qBAAqB,CAAC;QAC5D,IAAA,CAAA,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,EAAE,EAAE,eAAe,CAAC;AAElF,QAAA,IAAA,CAAA,KAAK,GAAG,IAAI,eAAe,CAAW,IAAI,CAAC;AAWnC,QAAA,IAAA,CAAA,kBAAkB,GAAuB,MAAM,CAAC,kBAAkB,CAAC;AACnE,QAAA,IAAA,CAAA,YAAY,GAAoB,MAAM,CAAC,eAAe,CAAC;AAI7D,QAAA,IAAI,CAAC;AACF,aAAA,IAAI,CACH,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EACtB,MAAM,CAAC,MAAM,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,EAC3D,SAAS,CAAC,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;AAE5C,aAAA,SAAS,EAAE;IAChB;IAEO,mBAAmB,GAAA;AACxB,QAAA,OAAO,IAAI,CAAC,YAAY,CAAC,2BAA2B,EAAE;IACxD;+GA/BoB,cAAc,EAAA,IAAA,EAAA,SAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAd,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,cAAc,cAFtB,MAAM,EAAA,CAAA,CAAA;;4FAEE,cAAc,EAAA,UAAA,EAAA,CAAA;kBAHnC,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA;;;ICLW;AAAZ,CAAA,UAAY,mBAAmB,EAAA;AAC7B,IAAA,mBAAA,CAAA,MAAA,CAAA,GAAA,MAAa;AACb,IAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,OAAe;AACjB,CAAC,EAHW,mBAAmB,KAAnB,mBAAmB,GAAA,EAAA,CAAA,CAAA;MAQlB,uBAAuB,CAAA;AAHpC,IAAA,WAAA,GAAA;AAIU,QAAA,IAAA,CAAA,iBAAiB,GAAG,MAAM,CAAC,mBAAmB,CAAC;AAmDxD,IAAA;AAjDQ,IAAA,eAAe,CAAC,IAAqB,EAAA;QAC1C,OAAO;AACL,YAAA,IAAI,UAAU,CAAC;AACb,gBAAA,GAAG,EAAE,OAAO;AACZ,gBAAA,KAAK,EAAE,2BAA2B;AAClC,gBAAA,YAAY,EAAE,4BAA4B;AAC1C,gBAAA,QAAQ,EAAE;AACR,oBAAA,IAAI,YAAY,CAAC;wBACf,GAAG,EAAE,mBAAmB,CAAC,IAAI;wBAC7B,KAAK,EAAE,IAAI,EAAE,IAAI;AACjB,wBAAA,KAAK,EAAE,0BAA0B;AACjC,wBAAA,UAAU,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;qBAClC,CAAC;AACF,oBAAA,IAAI,YAAY,CAAC;wBACf,GAAG,EAAE,mBAAmB,CAAC,KAAK;AAC9B,wBAAA,KAAK,EAAE,2BAA2B;AAClC,wBAAA,KAAK,EAAE,QAAQ;AACf,wBAAA,UAAU,EAAE,IAAI;AAChB,wBAAA,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC,IAAI,CAChD,MAAM,CAAC,aAAa,CAAC,EACrBA,KAAG,CAAC,KAAK,IACP,KAAK,CAAC,GAAG,CAAC,IAAI,KAAK;4BACjB,EAAE,EAAE,IAAI,CAAC,EAAE;4BACX,IAAI,EAAE,IAAI,CAAC,IAAI;AACf,4BAAA,IAAI,EAAE,IAAI;yBACX,CAAC,CAAC,CACJ,CACF;AACD,wBAAA,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;AAClC,wBAAA,QAAQ,EAAE,IAAI;qBACf,CAAC;AACH,iBAAA;aACF,CAAC;SACH;IACH;AACO,IAAA,0BAA0B,CAAC,IAAS,EAAA;QACzC,OAAO;AACL,YAAA,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;AACpC,YAAA,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;SACzC;IACH;IAEO,wBAAwB,CAAC,EAAU,EAAE,IAAS,EAAA;QACnD,OAAO;AACL,YAAA,EAAE,EAAE,EAAE;AACN,YAAA,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;AACpC,YAAA,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;SACzC;IACH;+GAnDW,uBAAuB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAvB,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,uBAAuB,cAFtB,MAAM,EAAA,CAAA,CAAA;;4FAEP,uBAAuB,EAAA,UAAA,EAAA,CAAA;kBAHnC,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA;;;MCHY,kBAAkB,CAAA;AAG7B,IAAA,WAAA,GAAA;AAFQ,QAAA,IAAA,CAAA,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC;IAE9B;IAER,KAAK,GAAA;AACV,QAAA,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;IAC3B;+GAPW,kBAAkB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;mGAAlB,kBAAkB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,eAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,ECd/B,kLAKA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EDOY,aAAa,6IAAE,oBAAoB,EAAA,QAAA,EAAA,iBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,eAAe,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,SAAA,EAAA,2BAAA,CAAA,EAAA,OAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAE,aAAa,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA;;4FAElE,kBAAkB,EAAA,UAAA,EAAA,CAAA;kBAP9B,SAAS;+BACE,eAAe,EAAA,UAAA,EAGb,IAAI,EAAA,OAAA,EACP,CAAC,aAAa,EAAE,oBAAoB,EAAE,eAAe,EAAE,aAAa,CAAC,EAAA,QAAA,EAAA,kLAAA,EAAA;;;MEHnE,sBAAsB,CAAA;AAGjC,IAAA,WAAA,GAAA;AAFQ,QAAA,IAAA,CAAA,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC;AAG3C,QAAA,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;IAC3B;+GALW,sBAAsB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAtB,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,EAAA,sBAAsB,wEAHvB,EAAE,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA;;4FAGD,sBAAsB,EAAA,UAAA,EAAA,CAAA;kBALlC,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,QAAQ,EAAE,EAAE;AACZ,oBAAA,QAAQ,EAAE,EAAE;AACZ,oBAAA,UAAU,EAAE,IAAI;AACjB,iBAAA;;;ACuBK,MAAO,iBAAkB,SAAQ,eAAe,CAAA;AAGpD,IAAA,IAAI,KAAK,GAAA;AACP,QAAA,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK;IACvC;AAEA,IAAA,IAAI,cAAc,GAAA;AAChB,QAAA,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW;IACrC;AAaA,IAAA,WAAA,CAAmB,gBAAuC,EAAA;AACxD,QAAA,KAAK,EAAE;QADU,IAAA,CAAA,gBAAgB,GAAhB,gBAAgB;AArBnB,QAAA,IAAA,CAAA,mBAAmB,GAAG,MAAM,CAAC,qBAAqB,CAAC;AAU5D,QAAA,IAAA,CAAA,WAAW,GAAG,MAAM,CAAC,cAAc,CAAC;QACpC,IAAA,CAAA,QAAQ,GAAG,IAAI,aAAa,CAAS;AAC1C,YAAA,KAAK,EAAE,EAAE;YACT,OAAO,EAAE,EAAE,CAAC;AACV,gBAAA,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE;AAC9B,gBAAA,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE;AAChC,gBAAA,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE;AAC7B,gBAAA,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE;aAC9B,CAAC;AACH,SAAA,CAAC;QAKA,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE;QAEzD,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7G;IAEO,KAAK,GAAA;AACV,QAAA,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;IAC1B;IAEO,MAAM,GAAA;AACX,QAAA,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;IAC3B;+GApCW,iBAAiB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAG,IAAA,CAAA,qBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAjB,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,EAAA,iBAAiB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,cAAA,EAAA,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EC/B9B,y9BAgCA,EAAA,MAAA,EAAA,CAAA,o5BAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EDVI,SAAS,8CACT,wBAAwB,EAAA,QAAA,EAAA,sBAAA,EAAA,MAAA,EAAA,CAAA,2BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACxB,gBAAgB,EAAA,QAAA,EAAA,YAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAChBC,iBAAe,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,SAAA,EAAA,2BAAA,CAAA,EAAA,OAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EACf,aAAa,EAAA,IAAA,EAAA,WAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EACb,QAAQ,6CACR,iBAAiB,EAAA,QAAA,EAAA,mBAAA,EAAA,MAAA,EAAA,CAAA,OAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;;4FAGR,iBAAiB,EAAA,UAAA,EAAA,CAAA;kBAhB7B,SAAS;+BACE,cAAc,EAAA,UAAA,EAGZ,IAAI,EAAA,OAAA,EACP;wBACP,IAAI;wBACJ,SAAS;wBACT,wBAAwB;wBACxB,gBAAgB;wBAChBA,iBAAe;wBACf,aAAa;wBACb,QAAQ;wBACR,iBAAiB;AAClB,qBAAA,EAAA,QAAA,EAAA,y9BAAA,EAAA,MAAA,EAAA,CAAA,o5BAAA,CAAA,EAAA;;;MEEU,uBAAuB,CAAA;AAjBpC,IAAA,WAAA,GAAA;AAkBW,QAAA,IAAA,CAAA,gBAAgB,GAAG,MAAM,CAAC,qBAAqB,CAAC;AAChD,QAAA,IAAA,CAAA,SAAS,GAAG;AACnB,YAAA,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE;AAC9B,YAAA,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE;AAChC,YAAA,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE;AAC7B,YAAA,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE;SAC9B;AAEM,QAAA,IAAA,CAAA,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE;QACpD,IAAA,CAAA,mBAAmB,GAAY,KAAK;AAS5C,IAAA;AAPQ,IAAA,cAAc,CAAC,QAAgB,EAAA;AACpC,QAAA,IAAI,IAAI,CAAC,cAAc,IAAI,QAAQ,EAAE;AACnC,YAAA,IAAI,CAAC,cAAc,GAAG,QAAQ;AAC9B,YAAA,IAAI,CAAC,mBAAmB,GAAG,IAAI;AAC/B,YAAA,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC;QACrC;IACF;+GAlBW,uBAAuB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAvB,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,EAAA,uBAAuB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,oBAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EC/BpC,ytBAkBA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EDII,iBAAiB,mFACjB,gBAAgB,EAAA,QAAA,EAAA,aAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAChB,eAAe,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,WAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACf,sBAAsB,EAAA,QAAA,EAAA,mBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACtB,oBAAoB,EAAA,QAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,CAAA,eAAA,EAAA,YAAA,CAAA,EAAA,OAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACpB,kBAAkB,qDAClB,aAAa,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA;;4FAGJ,uBAAuB,EAAA,UAAA,EAAA,CAAA;kBAjBnC,SAAS;+BACE,oBAAoB,EAAA,UAAA,EAGlB,IAAI,EAAA,OAAA,EACP;wBACP,IAAI;wBACJ,KAAK;wBACL,iBAAiB;wBACjB,gBAAgB;wBAChB,eAAe;wBACf,sBAAsB;wBACtB,oBAAoB;wBACpB,kBAAkB;wBAClB,aAAa;AACd,qBAAA,EAAA,QAAA,EAAA,ytBAAA,EAAA;;;AEgBG,MAAO,kBAAmB,SAAQ,eAAe,CAAA;AA2BrD,IAAA,IAAI,YAAY,GAAA;QACd,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,EAAE;IAC9C;AAEA,IAAA,WAAA,CAAoB,aAA8B,EAAA;AAChD,QAAA,KAAK,EAAE;QADW,IAAA,CAAA,aAAa,GAAb,aAAa;QA7BjC,IAAA,CAAA,SAAS,GAAgB,IAAI;QAG7B,IAAA,CAAA,UAAU,GAAkB,IAAI;QAGhC,IAAA,CAAA,UAAU,GAAY,KAAK;AAG3B,QAAA,IAAA,CAAA,aAAa,GAAG,IAAI,YAAY,EAAE;AAGlC,QAAA,IAAA,CAAA,iBAAiB,GAAG,IAAI,YAAY,EAAE;AAQ9B,QAAA,IAAA,CAAA,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC;QAEtC,IAAA,CAAA,WAAW,GAAgB,IAAI;QAC/B,IAAA,CAAA,iBAAiB,GAAgB,IAAI;QAQ1C,IAAI,CAAC,MAAM,EAAE;IACf;AAEA,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAC3BJ,KAAG,CAAC,IAAI,IAAG;YACT,OAAO;AACL,gBAAA,KAAK,EAAE;AACL,oBAAA,MAAM,EAAE,IAAI,EAAE,SAAS,IAAI,IAAI,EAAE,QAAQ;AAC1C,iBAAA;gBACD,KAAK,EAAE,IAAI,EAAE,QAAQ;aACtB;QACH,CAAC,CAAC,CACH;IACH;AAEA,IAAA,IAAI,SAAS,GAAA;QAOX,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAC3BA,KAAG,CAAC,CAAC,IAAG;YACN,IAAI,CAAC,CAAC,EAAE;AACN,gBAAA,OAAO,IAAI;YACb;YAEA,OAAO;AACL,gBAAA,QAAQ,EAAE;oBACR,iBAAiB,EAAE,CAAC,CAAC,OAAO;AAC5B,oBAAA,MAAM,EAAE;AACN,wBAAA,IAAI,EAAE,CAAC,CAAC,SAAS,IAAI,EAAE;AACvB,wBAAA,SAAS,EAAE,CAAC,CAAC,QAAQ,IAAI,EAAE;AAC3B,wBAAA,OAAO,EAAE,CAAC,CAAC,OAAO,IAAI,EAAE;AACzB,qBAAA;AACF,iBAAA;AACD,gBAAA,IAAI,EAAE,IAAI;aACX;QACH,CAAC,CAAC,CACH;IACH;IAEA,kBAAkB,GAAA;AAChB,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,aAAa,CAAC;AACjF,QAAA,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,EAAE;IACtD;IAEO,iBAAiB,GAAA;AACtB,QAAA,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE;IAC3B;IAEO,UAAU,GAAA;AACf,QAAA,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,MAAM,QAAQ,CAAC,MAAM,EAAE,CAAC;IAC1D;IAEO,cAAc,CAAC,gBAAkC,EAAE,aAA+B,EAAA;AACvF,QAAA,MAAM,IAAI,GAAG;AACX,YAAA,IAAI,SAAS,CAAC;AACZ,gBAAA,GAAG,EAAE,UAAU;AACf,gBAAA,KAAK,EAAE,eAAe;AACtB,gBAAA,KAAK,EAAE,CAAC;AACR,gBAAA,QAAQ,EAAE,gBAAgB;AAC1B,gBAAA,KAAK,EAAE,MAAM;AACb,gBAAA,IAAI,EAAE,UAAU;AAChB,gBAAA,UAAU,EAAE,0BAA0B;AACtC,gBAAA,UAAU,EAAE,iBAAiB;aAC9B,CAAC;AACF,YAAA,IAAI,SAAS,CAAC;AACZ,gBAAA,GAAG,EAAE,OAAO;AACZ,gBAAA,KAAK,EAAE,YAAY;AACnB,gBAAA,KAAK,EAAE,CAAC;AACR,gBAAA,QAAQ,EAAE,aAAa;AACvB,gBAAA,KAAK,EAAE,MAAM;AACb,gBAAA,IAAI,EAAE,OAAO;AACb,gBAAA,UAAU,EAAE,0BAA0B;AACtC,gBAAA,UAAU,EAAE,iBAAiB;aAC9B,CAAC;AACF,YAAA,IAAI,QAAQ,CAAC;AACX,gBAAA,GAAG,EAAE,QAAQ;AACb,gBAAA,KAAK,EAAE,aAAa;AACpB,gBAAA,KAAK,EAAE,CAAC;AACR,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,KAAK,EAAE,MAAM;AACb,gBAAA,IAAI,EAAE,OAAO;AACb,gBAAA,UAAU,EAAE,0BAA0B;aACvC,CAAC;SACH;QAED,OAAO,IAAI,IAAI,CAAC;AACd,YAAA,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AAChD,YAAA,SAAS,EAAE,UAAU;AACtB,SAAA,CAAC;IACJ;IAEO,oBAAoB,GAAA;AACzB,QAAA,MAAM,IAAI,GAAG;AACX,YAAA,IAAI,QAAQ,CAAC;AACX,gBAAA,GAAG,EAAE,QAAQ;AACb,gBAAA,KAAK,EAAE,aAAa;AACpB,gBAAA,KAAK,EAAE,CAAC;AACR,gBAAA,KAAK,EAAE,MAAM;AACb,gBAAA,IAAI,EAAE,SAAS;AACf,gBAAA,UAAU,EAAE,0BAA0B;AACtC,gBAAA,QAAQ,EAAE,MAAM,IAAI,CAAC,UAAU,EAAE;aAClC,CAAC;SACH;QAED,OAAO,IAAI,IAAI,CAAC;AACd,YAAA,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;AAChD,YAAA,SAAS,EAAE,UAAU;AACtB,SAAA,CAAC;IACJ;IAEO,qBAAqB,GAAA;AAC1B,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE;IAC/B;IAEQ,MAAM,GAAA;AACZ,QAAA,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;AACzB,QAAA,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC,SAAS,CAAC;YAC/C,QAAQ,EAAE,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE;AAC7C,YAAA,KAAK,EAAE,CAAC,KAAwB,KAAI;AAClC,gBAAA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,UAAU,CAAC;YAC3D,CAAC;AACF,SAAA,CAAC;IACJ;+GAhKW,kBAAkB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAK,eAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;mGAAlB,kBAAkB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,EAAA,SAAA,EAAA,WAAA,EAAA,UAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,EAAA,EAAA,OAAA,EAAA,EAAA,aAAA,EAAA,eAAA,EAAA,iBAAA,EAAA,mBAAA,EAAA,EAAA,WAAA,EAAA,CAAA,EAAA,YAAA,EAAA,kBAAA,EAAA,KAAA,EAAA,IAAA,EAAA,SAAA,EAAA,CAAA,kBAAA,CAAA,EAAA,WAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,EAAA,EAAA,YAAA,EAAA,eAAA,EAAA,KAAA,EAAA,IAAA,EAAA,SAAA,EAAA,CAAA,eAAA,CAAA,EAAA,WAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,EAAA,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EC7C/B,49DAwDA,EAAA,MAAA,EAAA,CAAA,wQAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EDxBI,SAAS,8CACT,iBAAiB,EAAA,QAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACjB,wBAAwB,EAAA,QAAA,EAAA,sBAAA,EAAA,MAAA,EAAA,CAAA,2BAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACxBC,iBAAe,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,WAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACf,cAAc,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACd,cAAc,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,SAAA,EAAA,aAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACd,0BAA0B,EAAA,QAAA,EAAA,wBAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAC1B,eAAe,8JACf,aAAa,EAAA,QAAA,EAAA,SAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,WAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACb,uBAAuB,EAAA,QAAA,EAAA,oBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EACvB,aAAa,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA;;4FAGJ,kBAAkB,EAAA,UAAA,EAAA,CAAA;kBApB9B,SAAS;+BACE,eAAe,EAAA,UAAA,EAGb,IAAI,EAAA,OAAA,EACP;wBACP,IAAI;wBACJ,SAAS;wBACT,iBAAiB;wBACjB,wBAAwB;wBACxBA,iBAAe;wBACf,cAAc;wBACd,cAAc;wBACd,0BAA0B;wBAC1B,eAAe;wBACf,aAAa;wBACb,uBAAuB;wBACvB,aAAa;AACd,qBAAA,EAAA,QAAA,EAAA,49DAAA,EAAA,MAAA,EAAA,CAAA,wQAAA,CAAA,EAAA;iFAID,SAAS,EAAA,CAAA;sBADR;gBAID,UAAU,EAAA,CAAA;sBADT;gBAID,UAAU,EAAA,CAAA;sBADT;gBAID,aAAa,EAAA,CAAA;sBADZ;gBAID,iBAAiB,EAAA,CAAA;sBADhB;gBAID,gBAAgB,EAAA,CAAA;sBADf,SAAS;AAAC,gBAAA,IAAA,EAAA,CAAA,kBAAkB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;gBAI/C,aAAa,EAAA,CAAA;sBADZ,SAAS;AAAC,gBAAA,IAAA,EAAA,CAAA,eAAe,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;;;AEpBxC,MAAO,sBAAuB,SAAQ,eAAe,CAAA;AAgBzD,IAAA,IAAI,YAAY,GAAA;QACd,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE;IAC7C;AACA,IAAA,WAAA,CAAoB,YAA6B,EAAA;AAC/C,QAAA,KAAK,EAAE;QADW,IAAA,CAAA,YAAY,GAAZ,YAAY;QAjBhC,IAAA,CAAA,SAAS,GAAY,IAAI;AAGzB,QAAA,IAAA,CAAA,YAAY,GAAG,IAAI,YAAY,EAAE;QAEjB,IAAA,CAAA,MAAM,GAAG,QAAQ;AAE1B,QAAA,IAAA,CAAA,IAAI,GAAG;AACZ,YAAA;AACE,gBAAA,IAAI,EAAE,QAAQ;AACd,gBAAA,KAAK,EAAE,aAAa;AACpB,gBAAA,QAAQ,EAAE,MAAM,IAAI,CAAC,cAAc,EAAE;AACtC,aAAA;SACF;QAMC,IAAI,CAAC,MAAM,EAAE;IACf;IAEO,WAAW,CAAC,SAAiB,EAAE,QAAgB,EAAA;AACpD,QAAA,OAAO,QAAQ,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IAC3D;AAEO,IAAA,WAAW,CAAC,IAAU,EAAA;QAC3B,OAAO;AACL,YAAA,QAAQ,EAAE;gBACR,iBAAiB,EAAE,IAAI,CAAC,OAAO;AAC/B,gBAAA,MAAM,EAAE;oBACN,IAAI,EAAE,IAAI,CAAC,QAAQ;oBACnB,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,OAAO,EAAE,IAAI,CAAC,OAAO;AACtB,iBAAA;AACF,aAAA;SACF;IACH;IAEQ,MAAM,GAAA;AACZ,QAAA,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;AACzB,QAAA,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAC,SAAS,CAAC;YAC9C,QAAQ,EAAE,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE;AAC7C,YAAA,KAAK,EAAE,CAAC,KAAwB,KAAI;AAClC,gBAAA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,UAAU,CAAC;YAC3D,CAAC;AACF,SAAA,CAAC;IACJ;IAEQ,cAAc,GAAA;AACpB,QAAA,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE;IAC1B;+GArDW,sBAAsB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAD,eAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;mGAAtB,sBAAsB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,oBAAA,EAAA,MAAA,EAAA,EAAA,SAAA,EAAA,WAAA,EAAA,EAAA,OAAA,EAAA,EAAA,YAAA,EAAA,cAAA,EAAA,EAAA,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EC5CnC,iiGAkEA,EAAA,MAAA,EAAA,CAAA,4RAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EDpCI,SAAS,EAAA,IAAA,EAAA,OAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACT,cAAc,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACdE,wBAAsB,EAAA,QAAA,EAAA,mBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACtBC,sBAAoB,EAAA,QAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,CAAA,eAAA,EAAA,YAAA,CAAA,EAAA,OAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACpBC,oBAAkB,0DAClB,6BAA6B,EAAA,QAAA,EAAA,2BAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAC7BH,iBAAe,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,WAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACf,cAAc,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACd,cAAc,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,SAAA,EAAA,aAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACd,yBAAyB,EAAA,QAAA,EAAA,uBAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,UAAA,EAAA,MAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EACzB,aAAa,EAAA,QAAA,EAAA,SAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,WAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,CAAA,EAAA,OAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EACb,aAAa,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA;;4FAGJ,sBAAsB,EAAA,UAAA,EAAA,CAAA;kBAtBlC,SAAS;+BACE,oBAAoB,EAAA,UAAA,EAGlB,IAAI,EAAA,OAAA,EACP;wBACP,IAAI;wBACJ,KAAK;wBACL,SAAS;wBACT,cAAc;wBACdC,wBAAsB;wBACtBC,sBAAoB;wBACpBC,oBAAkB;wBAClB,6BAA6B;wBAC7BH,iBAAe;wBACf,cAAc;wBACd,cAAc;wBACd,yBAAyB;wBACzB,aAAa;wBACb,aAAa;AACd,qBAAA,EAAA,QAAA,EAAA,iiGAAA,EAAA,MAAA,EAAA,CAAA,4RAAA,CAAA,EAAA;iFAID,SAAS,EAAA,CAAA;sBADR;gBAID,YAAY,EAAA,CAAA;sBADX;;;AE/BG,MAAO,2BAA4B,SAAQ,eAAe,CAAA;AAO9D,IAAA,IAAI,mBAAmB,GAAA;QACrB,OAAO,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,EAAE;IACrD;AAIA,IAAA,WAAA,GAAA;AACE,QAAA,KAAK,EAAE;QATT,IAAA,CAAA,OAAO,GAAsB,MAAM;AAM3B,QAAA,IAAA,CAAA,aAAa,GAAG,MAAM,CAAC,eAAe,CAAC;IAI/C;IAEA,QAAQ,GAAA;QACN,IAAI,CAAC,MAAM,EAAE;IACf;AAEO,IAAA,uBAAuB,CAAC,GAAW,EAAA;QACxC,eAAe,CAAC,GAAG,CAAC;IACtB;IAEQ,MAAM,GAAA;AACZ,QAAA,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;QACzB,IAAI,CAAC,aAAa,CAAC,wBAAwB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC;YACpE,IAAI,EAAE,MAAK;AACT,gBAAA,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE;YAC/B,CAAC;AACD,YAAA,KAAK,EAAE,CAAC,KAAwB,KAAI;AAClC,gBAAA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,UAAU,CAAC;YAC3D,CAAC;AACF,SAAA,CAAC;IACJ;+GAnCW,2BAA2B,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;mGAA3B,2BAA2B,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,yBAAA,EAAA,MAAA,EAAA,EAAA,SAAA,EAAA,WAAA,EAAA,OAAA,EAAA,SAAA,EAAA,EAAA,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,ECjBxC,4pBAcA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EDCY,SAAS,EAAA,IAAA,EAAA,OAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,iBAAiB,EAAA,QAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,eAAe,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,SAAA,EAAA,2BAAA,CAAA,EAAA,OAAA,EAAA,CAAA,QAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAEA,iBAAe,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,WAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,cAAc,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,MAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;;4FAE7E,2BAA2B,EAAA,UAAA,EAAA,CAAA;kBAPvC,SAAS;AACE,YAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,yBAAyB,EAAA,UAAA,EAGvB,IAAI,EAAA,OAAA,EACP,CAAC,SAAS,EAAE,iBAAiB,EAAE,eAAe,EAAEA,iBAAe,EAAE,cAAc,CAAC,EAAA,QAAA,EAAA,4pBAAA,EAAA;wDAIzF,SAAS,EAAA,CAAA;sBADR;gBAID,OAAO,EAAA,CAAA;sBADN;;;AEFG,MAAO,cAAe,SAAQ,oBAAoB,CAAA;AAWtD,IAAA,IAAI,YAAY,GAAA;QACd,OAAO,WAAW,CAAC,QAAQ;IAC7B;AAEA,IAAA,WAAA,GAAA;AACE,QAAA,KAAK,EAAE;QART,IAAA,CAAA,sBAAsB,GAAY,IAAI;AAErB,QAAA,IAAA,CAAA,mBAAmB,GAAG,MAAM,CAAC,qBAAqB,CAAC;IAOpE;IAEO,YAAY,GAAA;AACjB,QAAA,OAAO,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC;IAC3E;IAEO,SAAS,GAAA;AACd,QAAA,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;IACvE;+GAzBW,cAAc,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAd,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,EAAA,cAAc,6LCnB3B,0gBAiBA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EDAkB,iBAAiB,EAAA,QAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,eAAe,yJAAE,aAAa,EAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA;;4FAEtD,cAAc,EAAA,UAAA,EAAA,CAAA;kBAP1B,SAAS;+BACE,UAAU,EAAA,UAAA,EAGR,IAAI,EAAA,OAAA,EACP,CAAC,IAAI,EAAE,iBAAiB,EAAE,eAAe,EAAE,aAAa,CAAC,EAAA,QAAA,EAAA,0gBAAA,EAAA;wDAIlE,KAAK,EAAA,CAAA;sBADJ;gBAID,OAAO,EAAA,CAAA;sBADN;gBAID,sBAAsB,EAAA,CAAA;sBADrB;;;AERG,MAAO,oBAAqB,SAAQ,eAAe,CAAA;AAIvD,IAAA,IAAI,KAAK,GAAA;AACP,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;IAClD;AAEA,IAAA,WAAA,CAAoB,aAA8B,EAAA;AAChD,QAAA,KAAK,EAAE;QADW,IAAA,CAAA,aAAa,GAAb,aAAa;QANjC,IAAA,CAAA,MAAM,GAAW,EAAE;IAQnB;IAEA,QAAQ,GAAA;QACN,IAAI,CAAC,MAAM,EAAE;IACf;AAEO,IAAA,eAAe,CAAC,IAAU,EAAA;QAC/B,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB;IACH;IAEQ,MAAM,GAAA;AACZ,QAAA,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;QACzB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC;YACnD,QAAQ,EAAE,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE;AAC7C,YAAA,KAAK,EAAE,CAAC,KAAwB,KAAI;AAClC,gBAAA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,UAAU,CAAC;YAC3D,CAAC;AACF,SAAA,CAAC;IACJ;+GAjCW,oBAAoB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAD,eAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAApB,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,EAAA,oBAAoB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,EAAA,MAAA,EAAA,QAAA,EAAA,EAAA,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EClBjC,q4BAoBA,EAAA,MAAA,EAAA,CAAA,4UAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EDJkB,SAAS,EAAA,IAAA,EAAA,OAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,iBAAiB,EAAA,QAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAEC,iBAAe,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,CAAA,WAAA,EAAA,UAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,cAAc,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,SAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,cAAc,wIAAE,iBAAiB,EAAA,QAAA,EAAA,cAAA,EAAA,MAAA,EAAA,CAAA,UAAA,EAAA,MAAA,EAAA,MAAA,EAAA,YAAA,EAAA,aAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;;4FAErG,oBAAoB,EAAA,UAAA,EAAA,CAAA;kBAPhC,SAAS;AACE,YAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,iBAAiB,cAGf,IAAI,EAAA,OAAA,EACP,CAAC,IAAI,EAAE,SAAS,EAAE,iBAAiB,EAAEA,iBAAe,EAAE,cAAc,EAAE,cAAc,EAAE,iBAAiB,CAAC,EAAA,QAAA,EAAA,q4BAAA,EAAA,MAAA,EAAA,CAAA,4UAAA,CAAA,EAAA;iFAIjH,MAAM,EAAA,CAAA;sBADL;;;MEJU,0BAA0B,CAAA;AAPvC,IAAA,WAAA,GAAA;AAQW,QAAA,IAAA,CAAA,gBAAgB,GAAG,MAAM,CAAC,qBAAqB,CAAC;AAElD,QAAA,IAAA,CAAA,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE;AAC5D,IAAA;+GAJY,0BAA0B,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;mGAA1B,0BAA0B,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,wBAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,ECfvC,8RAQA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EDKY,iBAAiB,mFAAE,OAAO,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,CAAA,eAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,aAAA,EAAA,OAAA,EAAA,WAAA,CAAA,EAAA,OAAA,EAAA,CAAA,QAAA,EAAA,OAAA,CAAA,EAAA,QAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,uBAAuB,EAAA,QAAA,EAAA,oBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,cAAc,EAAA,QAAA,EAAA,6CAAA,EAAA,MAAA,EAAA,CAAA,sBAAA,EAAA,mBAAA,EAAA,oBAAA,EAAA,4BAAA,CAAA,EAAA,OAAA,EAAA,CAAA,YAAA,EAAA,YAAA,EAAA,YAAA,EAAA,aAAA,CAAA,EAAA,QAAA,EAAA,CAAA,gBAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;;4FAElE,0BAA0B,EAAA,UAAA,EAAA,CAAA;kBAPtC,SAAS;+BACE,wBAAwB,EAAA,UAAA,EAGtB,IAAI,EAAA,OAAA,EACP,CAAC,iBAAiB,EAAE,OAAO,EAAE,uBAAuB,EAAE,cAAc,CAAC,EAAA,QAAA,EAAA,8RAAA,EAAA;;;MEHnE,uBAAuB,CAAA;IAGlC,WAAA,CAGU,aAA2B,EAC3B,YAA6B,EAAA;QAD7B,IAAA,CAAA,aAAa,GAAb,aAAa;QACb,IAAA,CAAA,YAAY,GAAZ,YAAY;AANd,QAAA,IAAA,CAAA,kBAAkB,GAAuB,MAAM,CAAC,kBAAkB,CAAC;IAOxE;IAEH,SAAS,CAAC,GAAqB,EAAE,IAAiB,EAAA;QAChD,IAAI,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;AAC7B,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QACzB;AACA,QAAA,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,EAAE;AAClD,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QACzB;AAEA,QAAA,IACE,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG;AAChC,YAAA,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC;YACpD,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,EACxB;AACA,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QACzB;QAEA,IAAI,IAAI,CAAC,aAAa,EAAE,MAAM,EAAE,OAAO,IAAI,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE;AAClG,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QACzB;QAEA,OAAO,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,IAAI,CAAC;IAC5C;IAEQ,mBAAmB,CAAC,GAAqB,EAAE,IAAiB,EAAA;AAClE,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;AACjF,QAAA,MAAM,iBAAiB,GAAG,GAAG,CAAC,KAAK,CAAC;YAClC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC;AACnD,SAAA,CAAC;AACF,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;IACvC;AAvCW,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,kBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,uBAAuB,kBAKxB,qBAAqB,EAAA,QAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAAD,eAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;mHALpB,uBAAuB,EAAA,CAAA,CAAA;;4FAAvB,uBAAuB,EAAA,UAAA,EAAA,CAAA;kBADnC;;0BAKI;;0BACA,MAAM;2BAAC,qBAAqB;;;ACR3B,MAAO,kBAAmB,SAAQ,yBAAyB,CAAA;AAC/D,IAAA,WAAA,GAAA;QACE,KAAK,CAAC,MAAM,CAAC;IACf;+GAHW,kBAAkB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAlB,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,kBAAkB,cAFjB,MAAM,EAAA,CAAA,CAAA;;4FAEP,kBAAkB,EAAA,UAAA,EAAA,CAAA;kBAH9B,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA;;;ACoBD;;;;;;;;;;AAUG;MAmBU,aAAa,CAAA;AACxB,IAAA,WAAA,GAAA;QACE,kBAAkB,CAAC,WAAW,EAAE;IAClC;AAEA,IAAA,OAAO,OAAO,GAAA;QACZ,OAAO;AACL,YAAA,QAAQ,EAAE,aAAa;AACvB,YAAA,SAAS,EAAE;AACT,gBAAA;AACE,oBAAA,OAAO,EAAE,qBAAqB;oBAC9B,IAAI,EAAE,CAAC,eAAe,CAAC;AACvB,oBAAA,UAAU,EAAE,CAAC,YAA6B,KAAK,YAAY,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,OAAO,IAAI,OAAO,CAAC,KAAK;AACxG,iBAAA;AACD,gBAAA;AACE,oBAAA,OAAO,EAAE,iBAAiB;AAC1B,oBAAA,QAAQ,EAAE,uBAAuB;AACjC,oBAAA,KAAK,EAAE,IAAI;AACZ,iBAAA;AACF,aAAA;SACF;IACH;+GArBW,aAAa,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAb,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,aAAa,YAfd,WAAW,EAAE,aAAa,EAAE,sBAAsB,EAAE,mBAAmB,EAAE,YAAY,EAAE,aAAa,EAAE,cAAc,EAAE,aAAa,EAAE,kBAAkB,EAAE,aAAa,EAAE,aAAa,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,cAAc,EAAE,sBAAsB,EAAE,2BAA2B,EAAE,oBAAoB,EAAE,uBAAuB,EAAE,0BAA0B,EAAE,sBAAsB,aAEha,kBAAkB;YAClB,iBAAiB;YACjB,kBAAkB;YAClB,cAAc;YACd,sBAAsB;YACtB,2BAA2B;YAC3B,oBAAoB;YACpB,0BAA0B;YAC1B,sBAAsB,CAAA,EAAA,CAAA,CAAA;AAKb,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,aAAa,YAfd,WAAW,EAAE,aAAa,EAAE,sBAAsB,EAAE,mBAAmB,EAAE,YAAY,EAAE,aAAa,EAAE,cAAc,EAAE,aAAa,EAAE,kBAAkB,EAAE,aAAa,EAAiB,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,cAAc,EAA0B,2BAA2B,EAAE,oBAAoB,EAAE,uBAAuB,EAAE,0BAA0B,EAAE,sBAAsB,CAAA,EAAA,CAAA,CAAA;;4FAevZ,aAAa,EAAA,UAAA,EAAA,CAAA;kBAlBzB,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AAER,oBAAA,YAAY,EAAE,EAAE;AAChB,oBAAA,OAAO,EAAE,CAAC,WAAW,EAAE,aAAa,EAAE,sBAAsB,EAAE,mBAAmB,EAAE,YAAY,EAAE,aAAa,EAAE,cAAc,EAAE,aAAa,EAAE,kBAAkB,EAAE,aAAa,EAAE,aAAa,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,cAAc,EAAE,sBAAsB,EAAE,2BAA2B,EAAE,oBAAoB,EAAE,uBAAuB,EAAE,0BAA0B,EAAE,sBAAsB,CAAC;AACna,oBAAA,OAAO,EAAE;wBACP,kBAAkB;wBAClB,iBAAiB;wBACjB,kBAAkB;wBAClB,cAAc;wBACd,sBAAsB;wBACtB,2BAA2B;wBAC3B,oBAAoB;wBACpB,0BAA0B;wBAC1B,sBAAsB;AACvB,qBAAA;AACD,oBAAA,SAAS,EAAE,EAAE;AAEd,iBAAA;;;AC3CD,MAAM,SAAS,GAAmB;AAChC,IAAA,cAAc,EAAE;AACd,QAAA,IAAI,EAAE,KAAK;AACX,QAAA,GAAG,EAAE,sBAAsB;AAC5B,KAAA;CACF;AAKK,MAAO,eAAgB,SAAQ,cAAoB,CAAA;AACvD,IAAA,IAAI,OAAO,GAAA;QACT,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC;IAC5C;AAEA,IAAA,IAAI,WAAW,GAAA;QACb,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ;QACvC,IAAI,CAAC,IAAI,EAAE;AACT,YAAA,OAAO,GAAG;QACZ;AACA,QAAA,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;IAC9B;AAEA,IAAA,IAAI,YAAY,GAAA;AACd,QAAA,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY;IACtC;AAEA,IAAA,WAAA,CAC8B,IAAiB,EACd,WAA2B,EAEnD,oBAA6C,EAAA;QAEpD,KAAK,CAAC,SAAS,CAAC;QALY,IAAA,CAAA,IAAI,GAAJ,IAAI;QACD,IAAA,CAAA,WAAW,GAAX,WAAW;QAEnC,IAAA,CAAA,oBAAoB,GAApB,oBAAoB;QAI3B,IAAI,CAAC,IAAI,CAAC;AACP,aAAA,IAAI,CACH,MAAM,CAAC,aAAa,CAAC,EACrB,QAAQ,CAAC,IAAI,IAAI,IAAI,EAAE,GAAG,CAAC,EAC3B,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,EAC1C,GAAG,CAAC,IAAI,IAAG;AACT,YAAA,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC;YACjC,IAAI,IAAI,EAAE;AACR,gBAAA,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAC1B;AACE,oBAAA,WAAW,EAAE,IAAI,CAAC,4BAA4B,CAAC;AAC/C,oBAAA,KAAK,EAAE,IAAI,CAAC,sBAAsB,CAAC;AACnC,oBAAA,QAAQ,EAAE,IAAI,CAAC,yBAAyB,CAAC;iBAC1C,EACD,IAAI,CACL;AACD,gBAAA,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC;AAC9B,gBAAA,IAAI,CAAC,gBAAgB,EAAE,CAAC,SAAS,EAAE;YACrC;AACF,QAAA,CAAC,CAAC;AAEH,aAAA,SAAS,EAAE;QAEd,IAAI,CAAC,IAAI,CAAC;AACP,aAAA,IAAI,CACH,GAAG,CAAC,MAAM,IAAG;AACX,YAAA,MAAM,CAAC,QAAQ,CAAC,uCAAuC,EAAE,MAAM,CAAC;AAClE,QAAA,CAAC,CAAC;AAEH,aAAA,SAAS,EAAE;QAEd,IAAI,CAAC,IAAI,CAAC;AACP,aAAA,IAAI,CACH,GAAG,CAAC,KAAK,IAAG;AACV,YAAA,MAAM,CAAC,OAAO,CAAC,qBAAqB,EAAE,KAAK,CAAC;AAC9C,QAAA,CAAC,CAAC;AAEH,aAAA,SAAS,EAAE;QAEd,IAAI,CAAC,IAAI,CAAC;AACP,aAAA,IAAI,CACH,GAAG,CAAC,eAAe,IAAG;AACpB,YAAA,IAAI,CAAC,cAAc,CAAC,eAAe,GAAG,eAAe;YACrD,IAAI,eAAe,EAAE;AACnB,gBAAA,IAAI,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,eAAe,CAAC;YAClE;iBAAO;AACL,gBAAA,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,eAAe,CAAC;YAC5D;AACF,QAAA,CAAC,CAAC;AAEH,aAAA,SAAS,EAAE;IAChB;IAEO,gBAAgB,GAAA;AACrB,QAAA,OAAO,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE;IAC5C;AAEO,IAAA,IAAI,KAAI;IACR,KAAK,GAAA;AACV,QAAA,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;IAC/B;IACO,MAAM,GAAA;AACX,QAAA,OAAO,IAAI,OAAO,CAAO,OAAO,IAAG;AACjC,YAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AACpB,QAAA,CAAC,CAAC;IACJ;AA1FW,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,kBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,eAAe,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAkBhB,WAAW,EAAA,EAAA,EAAA,KAAA,EACX,cAAc,aACd,uBAAuB,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AApBtB,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,eAAe,cAFd,MAAM,EAAA,CAAA,CAAA;;4FAEP,eAAe,EAAA,UAAA,EAAA,CAAA;kBAH3B,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA;;0BAmBI,MAAM;2BAAC,WAAW;;0BAClB,MAAM;2BAAC,cAAc;;0BACrB,MAAM;2BAAC,uBAAuB;;;MC/BtB,YAAY,GAAG,CAAC,IAAqC,KAAe;AAC/E,IAAAK,cAAgB,CAAC,IAAI,CAAC,MAAM,CAAC;AAC7B,IAAA,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,eAAe,EAAE;AACtD,IAAA;AACE,QAAA,OAAO,EAAE,iBAAiB;AAC1B,QAAA,QAAQ,EAAE,mBAAmB;AAC7B,QAAA,KAAK,EAAE,IAAI;AACZ,KAAA;;;ACjBH;;AAEG;;ACFH;;AAEG;;;;"}