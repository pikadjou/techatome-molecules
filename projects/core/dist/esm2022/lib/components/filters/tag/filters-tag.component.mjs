import { NgFor } from '@angular/common';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { BadgeComponent } from '@ta/ui';
import { TaBaseComponent } from '@ta/utils';
import * as i0 from "@angular/core";
export class FiltersTagComponent extends TaBaseComponent {
    constructor() {
        super();
        this.activeFilter = [];
        this.removedFilter = new EventEmitter();
    }
    remove(filter) {
        this.removedFilter.emit(filter);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: FiltersTagComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.14", type: FiltersTagComponent, isStandalone: true, selector: "ta-filters-tag", inputs: { activeFilter: "activeFilter" }, outputs: { removedFilter: "removedFilter" }, usesInheritance: true, ngImport: i0, template: "<div>\n  @for (filter of this.activeFilter; track trackById($index, filter)) {\n    <span class=\"badge-container\">\n      <ta-badge [value]=\"filter.name\" type=\"info\" icon=\"close\" (clickAction)=\"this.remove(filter)\"></ta-badge>\n    </span>\n  }\n</div>\n", styles: [".badge-container{padding-right:var(--ta-space-sm);font-size:var(--ta-font-body-md-default-size);line-height:var(--ta-font-body-md-default-line);font-weight:var(--ta-font-body-md-default-weight)}.badge-container ta-badge{display:inline-block}\n"], dependencies: [{ kind: "component", type: BadgeComponent, selector: "ta-badge", inputs: ["value", "type", "showClickOption", "icon"], outputs: ["clickAction"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: FiltersTagComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-filters-tag', standalone: true, imports: [NgFor, BadgeComponent], template: "<div>\n  @for (filter of this.activeFilter; track trackById($index, filter)) {\n    <span class=\"badge-container\">\n      <ta-badge [value]=\"filter.name\" type=\"info\" icon=\"close\" (clickAction)=\"this.remove(filter)\"></ta-badge>\n    </span>\n  }\n</div>\n", styles: [".badge-container{padding-right:var(--ta-space-sm);font-size:var(--ta-font-body-md-default-size);line-height:var(--ta-font-body-md-default-line);font-weight:var(--ta-font-body-md-default-weight)}.badge-container ta-badge{display:inline-block}\n"] }]
        }], ctorParameters: () => [], propDecorators: { activeFilter: [{
                type: Input
            }], removedFilter: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVycy10YWcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9jb21wb25lbnRzL2ZpbHRlcnMvdGFnL2ZpbHRlcnMtdGFnLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29tcG9uZW50cy9maWx0ZXJzL3RhZy9maWx0ZXJzLXRhZy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUM7O0FBVzVDLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxlQUFlO0lBT3REO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFOVixpQkFBWSxHQUFzQixFQUFFLENBQUM7UUFHckMsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBbUIsQ0FBQztJQUlwRCxDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQXVCO1FBQ25DLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7K0dBYlUsbUJBQW1CO21HQUFuQixtQkFBbUIsd0xDZmhDLDBRQU9BLDZTRE1tQixjQUFjOzs0RkFFcEIsbUJBQW1CO2tCQVAvQixTQUFTOytCQUNFLGdCQUFnQixjQUdkLElBQUksV0FDUCxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUM7d0RBSWhDLFlBQVk7c0JBRFgsS0FBSztnQkFJTixhQUFhO3NCQURaLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ0ZvciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBCYWRnZUNvbXBvbmVudCB9IGZyb20gJ0B0YS91aSc7XG5pbXBvcnQgeyBUYUJhc2VDb21wb25lbnQgfSBmcm9tICdAdGEvdXRpbHMnO1xuXG5pbXBvcnQgeyBBY3RpdmVGaWx0ZXJUYWcgfSBmcm9tICcuLi90eXBlcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RhLWZpbHRlcnMtdGFnJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ZpbHRlcnMtdGFnLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZmlsdGVycy10YWcuY29tcG9uZW50LnNjc3MnXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW05nRm9yLCBCYWRnZUNvbXBvbmVudF0sXG59KVxuZXhwb3J0IGNsYXNzIEZpbHRlcnNUYWdDb21wb25lbnQgZXh0ZW5kcyBUYUJhc2VDb21wb25lbnQge1xuICBASW5wdXQoKVxuICBhY3RpdmVGaWx0ZXI6IEFjdGl2ZUZpbHRlclRhZ1tdID0gW107XG5cbiAgQE91dHB1dCgpXG4gIHJlbW92ZWRGaWx0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPEFjdGl2ZUZpbHRlclRhZz4oKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZShmaWx0ZXI6IEFjdGl2ZUZpbHRlclRhZykge1xuICAgIHRoaXMucmVtb3ZlZEZpbHRlci5lbWl0KGZpbHRlcik7XG4gIH1cbn1cbiIsIjxkaXY+XG4gIEBmb3IgKGZpbHRlciBvZiB0aGlzLmFjdGl2ZUZpbHRlcjsgdHJhY2sgdHJhY2tCeUlkKCRpbmRleCwgZmlsdGVyKSkge1xuICAgIDxzcGFuIGNsYXNzPVwiYmFkZ2UtY29udGFpbmVyXCI+XG4gICAgICA8dGEtYmFkZ2UgW3ZhbHVlXT1cImZpbHRlci5uYW1lXCIgdHlwZT1cImluZm9cIiBpY29uPVwiY2xvc2VcIiAoY2xpY2tBY3Rpb24pPVwidGhpcy5yZW1vdmUoZmlsdGVyKVwiPjwvdGEtYmFkZ2U+XG4gICAgPC9zcGFuPlxuICB9XG48L2Rpdj5cbiJdfQ==