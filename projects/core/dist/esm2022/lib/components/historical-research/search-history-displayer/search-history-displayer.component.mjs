import { NgFor, NgIf, NgTemplateOutlet } from '@angular/common';
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { Validators } from '@angular/forms';
import { MatMenu, MatMenuTrigger } from '@angular/material/menu';
import { LocalStorage } from 'storage-manager-js';
import { SearchFieldComponent } from '@ta/form-input';
import { InputTextBox } from '@ta/form-model';
import { FontIconComponent } from '@ta/icons';
import { ContactInformationComponent, EmptyComponent, ListContainerComponent, ListElementComponent, ListTagComponent, ListTitleComponent, } from '@ta/ui';
import * as i0 from "@angular/core";
export class SearchHistoryDisplayerComponent {
    constructor() {
        this.placeholder = '';
        this.isDropDown = false;
        this.valueCompleted = new EventEmitter();
        this.searchField = null;
        this.searchTrigger = null;
        this.input = new InputTextBox({
            validators: [Validators.minLength(3)],
        });
    }
    get searchFieldWidth() {
        return this.searchField?.nativeElement.offsetWidth;
    }
    get listRecentSearches() {
        if (this.searchHistory?.type) {
            const storedSearches = this._getFromLocalStorage(this.searchHistory?.type);
            const searches = storedSearches.map(obj => obj.research);
            return searches;
        }
        return null;
    }
    searchCompleted(search) {
        if (this.searchHistory?.type) {
            this._saveInLocalStorage(search);
        }
        this.input.value = '';
        this.searchTrigger?.closeMenu();
        this.valueCompleted.emit(search);
        return;
    }
    _getFromLocalStorage(type) {
        return JSON.parse(LocalStorage.get('search-' + type) || '[]');
    }
    _saveInLocalStorage(searchValue) {
        if (this.searchHistory?.type) {
            let storedSearches = this._getFromLocalStorage(this.searchHistory?.type);
            const search = storedSearches.find(s => s.research === searchValue);
            if (search) {
                search.storageTime = new Date();
            }
            else {
                storedSearches.push({
                    research: searchValue,
                    storageTime: new Date(),
                });
            }
            this.orderAndSelect(storedSearches);
            LocalStorage.set('search-' + this.searchHistory?.type || '', JSON.stringify(storedSearches.slice(0, 5)));
        }
    }
    orderAndSelect(items) {
        items.sort((a, b) => {
            const dateA = new Date(a.storageTime);
            const dateB = new Date(b.storageTime);
            return dateB.getTime() - dateA.getTime();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: SearchHistoryDisplayerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.14", type: SearchHistoryDisplayerComponent, isStandalone: true, selector: "ta-search-history-displayer", inputs: { searchHistory: "searchHistory", placeholder: "placeholder", isDropDown: "isDropDown" }, outputs: { valueCompleted: "valueCompleted" }, viewQueries: [{ propertyName: "searchField", first: true, predicate: ["searchField"], descendants: true, read: ElementRef }, { propertyName: "searchTrigger", first: true, predicate: ["searchField"], descendants: true, read: MatMenuTrigger }], ngImport: i0, template: "<ng-template #menuTemplate>\n  <div class=\"p-space-md\">\n    <ta-contact-information icon=\"history\" value=\"core.historical-research.last-searches\">\n      <ta-empty [isEmpty]=\"!this.listRecentSearches?.length && !this.isDropDown\">\n        <ta-list-container class=\"list-container\">\n          @for (search of this.listRecentSearches; track search) {\n            <ta-list-element (click)=\"this.searchCompleted(search)\">\n              <ta-list-title>\n                {{ search }}\n              </ta-list-title>\n              <ta-list-tag>\n                <ta-font-icon name=\"arrow-big-right\" type=\"sm\"></ta-font-icon>\n              </ta-list-tag>\n            </ta-list-element>\n          }\n        </ta-list-container>\n      </ta-empty>\n    </ta-contact-information>\n  </div>\n</ng-template>\n\n<ta-search-field\n  #searchField\n  [isOpen]=\"true\"\n  [placeholder]=\"this.placeholder\"\n  [input]=\"this.input\"\n  (valueCompleted)=\"this.searchCompleted($event)\"\n  [matMenuTriggerFor]=\"this.searchHistory?.type && this.isDropDown === true ? menu : null\"\n></ta-search-field>\n\n<mat-menu #menu=\"matMenu\">\n  <div class=\"\" [style.width.px]=\"this.searchFieldWidth\">\n    @if (menuTemplate) {\n      <ng-container *ngTemplateOutlet=\"menuTemplate; context: { element: menu }\"></ng-container>\n    }\n  </div>\n</mat-menu>\n\n@if (menuTemplate && this.searchHistory?.type && this.isDropDown === false) {\n  <ng-container *ngTemplateOutlet=\"menuTemplate; context: { element: menu }\"></ng-container>\n}\n\n\n", styles: [""], dependencies: [{ kind: "component", type: FontIconComponent, selector: "ta-font-icon", inputs: ["name", "type"] }, { kind: "component", type: ContactInformationComponent, selector: "ta-contact-information", inputs: ["value", "icon", "localIcon"] }, { kind: "component", type: EmptyComponent, selector: "ta-empty", inputs: ["isEmpty", "isLight", "showMessage", "text", "type", "icon", "iconSize"] }, { kind: "component", type: ListContainerComponent, selector: "ta-list-container" }, { kind: "component", type: ListElementComponent, selector: "ta-list-element", inputs: ["withSeparator", "flexColumn"], outputs: ["action"] }, { kind: "component", type: ListTitleComponent, selector: "ta-list-title" }, { kind: "component", type: ListTagComponent, selector: "ta-list-tag" }, { kind: "component", type: SearchFieldComponent, selector: "ta-search-field", inputs: ["isOpen", "placeholder", "space", "type"], outputs: ["valueCompleted"] }, { kind: "component", type: MatMenu, selector: "mat-menu", inputs: ["backdropClass", "aria-label", "aria-labelledby", "aria-describedby", "xPosition", "yPosition", "overlapTrigger", "hasBackdrop", "class", "classList"], outputs: ["closed", "close"], exportAs: ["matMenu"] }, { kind: "directive", type: MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", inputs: ["mat-menu-trigger-for", "matMenuTriggerFor", "matMenuTriggerData", "matMenuTriggerRestoreFocus"], outputs: ["menuOpened", "onMenuOpen", "menuClosed", "onMenuClose"], exportAs: ["matMenuTrigger"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.14", ngImport: i0, type: SearchHistoryDisplayerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-search-history-displayer', standalone: true, imports: [
                        NgIf,
                        NgFor,
                        FontIconComponent,
                        ContactInformationComponent,
                        EmptyComponent,
                        ListContainerComponent,
                        ListElementComponent,
                        ListTitleComponent,
                        ListTagComponent,
                        SearchFieldComponent,
                        MatMenu,
                        MatMenuTrigger,
                        NgTemplateOutlet,
                    ], template: "<ng-template #menuTemplate>\n  <div class=\"p-space-md\">\n    <ta-contact-information icon=\"history\" value=\"core.historical-research.last-searches\">\n      <ta-empty [isEmpty]=\"!this.listRecentSearches?.length && !this.isDropDown\">\n        <ta-list-container class=\"list-container\">\n          @for (search of this.listRecentSearches; track search) {\n            <ta-list-element (click)=\"this.searchCompleted(search)\">\n              <ta-list-title>\n                {{ search }}\n              </ta-list-title>\n              <ta-list-tag>\n                <ta-font-icon name=\"arrow-big-right\" type=\"sm\"></ta-font-icon>\n              </ta-list-tag>\n            </ta-list-element>\n          }\n        </ta-list-container>\n      </ta-empty>\n    </ta-contact-information>\n  </div>\n</ng-template>\n\n<ta-search-field\n  #searchField\n  [isOpen]=\"true\"\n  [placeholder]=\"this.placeholder\"\n  [input]=\"this.input\"\n  (valueCompleted)=\"this.searchCompleted($event)\"\n  [matMenuTriggerFor]=\"this.searchHistory?.type && this.isDropDown === true ? menu : null\"\n></ta-search-field>\n\n<mat-menu #menu=\"matMenu\">\n  <div class=\"\" [style.width.px]=\"this.searchFieldWidth\">\n    @if (menuTemplate) {\n      <ng-container *ngTemplateOutlet=\"menuTemplate; context: { element: menu }\"></ng-container>\n    }\n  </div>\n</mat-menu>\n\n@if (menuTemplate && this.searchHistory?.type && this.isDropDown === false) {\n  <ng-container *ngTemplateOutlet=\"menuTemplate; context: { element: menu }\"></ng-container>\n}\n\n\n" }]
        }], propDecorators: { searchHistory: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], isDropDown: [{
                type: Input
            }], valueCompleted: [{
                type: Output
            }], searchField: [{
                type: ViewChild,
                args: ['searchField', { read: ElementRef }]
            }], searchTrigger: [{
                type: ViewChild,
                args: ['searchField', { read: MatMenuTrigger }]
            }] } });
//# sourceMappingURL=data:application/json;base64,