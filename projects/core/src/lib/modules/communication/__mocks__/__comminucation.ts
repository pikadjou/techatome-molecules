import { User } from '@camelot/user';

import {
  Communication,
  CommunicationParticipantExtended,
  CommunicationStatus,
  CommunicationType,
  Conversation,
  Link,
  LinkType,
} from '../services/dto/communication';

// Mock Data

const contentChat = [
  {
    id: 'mhTl6ghSkV',
    type: 'paragraph',
    data: {
      text: 'Hey. Meet the new Editor. On this picture you can see it in action. Then, try a demo ðŸ¤“',
    },
  },
  {
    id: 'l98dyx3yjb',
    type: 'header',
    data: {
      text: 'Key features',
      level: 3,
    },
  },
  {
    id: 'os_YI4eub4',
    type: 'list',
    data: {
      type: 'unordered',
      items: [
        'It is a block-style editor',
        'It returns clean data output in JSON',
        'Designed to be extendable and pluggable with a <a href="https://editorjs.io/creating-a-block-tool">simple API</a>',
      ],
    },
  },
  {
    id: '1yKeXKxN7-',
    type: 'header',
    data: {
      text: 'What does it mean Â«block-styled editorÂ»',
      level: 3,
    },
  },
  {
    id: 'TcUNySG15P',
    type: 'paragraph',
    data: {
      text: 'Workspace in classic editors is made of a single contenteditable element, used to create different HTML markups. Editor.js workspace consists of separate Blocks: paragraphs, headings, images, lists, quotes, etc. Each of them is an independent <sup data-tune="footnotes">1</sup> contenteditable element (or more complex structure) provided by Plugin and united by Editor\'s Core.',
    },
    tunes: {
      footnotes: [
        'It works more stable then in other WYSIWYG editors. Same time it has smooth and well-known arrow navigation behavior like classic editors.',
      ],
    },
  },
  {
    id: 'M3UXyblhAo',
    type: 'header',
    data: {
      text: 'What does it mean clean data output?',
      level: 3,
    },
  },
  {
    id: 'KOcIofZ3Z1',
    type: 'paragraph',
    data: {
      text: 'There are dozens of ready-to-use Blocks and a simple API <sup data-tune="footnotes">2</sup> for creating any Block you need. For example, you can implement Blocks for Tweets, Instagram posts, surveys and polls, CTA buttons, and even games.',
    },
    tunes: {
      footnotes: [
        "Just take a look at our Creating Block Tool guide. You'll be surprised.",
      ],
    },
  },
  {
    id: 'ksCokKAhQw',
    type: 'paragraph',
    data: {
      text: 'Classic WYSIWYG editors produce raw HTML-markup with both content data and content appearance. On the contrary, <mark class="cdx-marker">Editor.js outputs JSON object</mark> with data of each Block.',
    },
  },
  {
    id: 'XKNT99-qqS',
    type: 'attaches',
    data: {
      file: {
        url: 'https://drive.google.com/user/catalog/my-file.pdf',
        size: 12902,
        name: 'file.pdf',
        extension: 'pdf',
      },
      title: 'My file',
    },
  },
  {
    id: '7RosVX2kcH',
    type: 'paragraph',
    data: {
      text: 'Given data can be used as you want: render with HTML for Web clients, render natively for mobile apps, create the markup for Facebook Instant Articles or Google AMP, generate an audio version, and so on.',
    },
  },
  {
    id: 'eq06PsNsab',
    type: 'paragraph',
    data: {
      text: 'Clean data is useful to sanitize, validate and process on the backend.',
    },
  },
  {
    id: 'hZAjSnqYMX',
    type: 'image',
    data: {
      file: {
        url: 'assets/codex2x.png',
      },
      withBorder: false,
      withBackground: false,
      stretched: true,
      caption: 'CodeX Code Camp 2019',
    },
  },
];
// export const __mockContacts: Contact[] = [
//   {
//     id: 'contact1',
//     firstName: 'Alice Contact',
//     lastName: 'Alice Contact',
//     phoneNumber: '123',
//     mail: 'contact@example.com',
//   },
//   {
//     id: 'contact2',
//     firstName: 'Bob Contact',
//     lastName: 'Bob Contact',
//     phoneNumber: '123',
//     mail: 'contact@example.com',
//   },
//   {
//     id: 'contact3',
//     firstName: 'Charlie Contact',
//     lastName: 'Charlie Contact',
//     phoneNumber: '123',
//     mail: 'contact@example.com',
//   },
// ];

export const __mockUsers: Partial<User>[] = [
  {
    id: 'user1',
    firstName: 'Alice User',
    lastName: 'Alice User',
    phoneNumber: '123',
  },
  {
    id: 'user2',
    firstName: 'Bob User',
    lastName: 'Bob User',
    phoneNumber: '123',
  },
  {
    id: 'user3',
    firstName: 'Charlie User',
    lastName: 'Charlie User',
    phoneNumber: '123',
  },
];

export const __mockParticipantsExtended: CommunicationParticipantExtended[] = [
  {
    id: 'part1',
    email: 'alice@example.com',
    userId: 'user1',
    info: 'Alice User',
    user: <User>__mockUsers[0],
  },
  {
    id: 'part2',
    email: 'bob@example.com',
    userId: 'cust1',
    info: 'Bob Customer',
    user: <User>__mockUsers[1],
  },
  {
    id: 'part3',
    email: 'charlie@example.com',
    contactId: 'contact1',
    info: 'Charlie Contact',
    // contact: __mockContacts[0],
  },
  {
    id: 'part4',
    email: 'david@example.com',
    userId: 'user3',
    info: 'David User',
    user: <User>__mockUsers[2],
  },
  {
    id: 'part5',
    email: 'eve@example.com',
    userId: 'cust2',
    info: 'Eve Customer',
    user: <User>__mockUsers[0],
  },
];

export const __mockLinks: Link[] = [
  { id: 'link1', type: LinkType.Invoice },
  { id: 'link2', type: LinkType.Project },
  { id: 'link3', type: LinkType.QuotationVersion },
];

export const __mockCommunications: (Communication | any)[] = [
  {
    id: 'comm1',
    from: __mockParticipantsExtended[0],
    to: [__mockParticipantsExtended[1]],
    cc: [__mockParticipantsExtended[2]],
    title: 'Project Discussion',
    body: 'Please review the attached invoice.',
    status: CommunicationStatus.Sent,
    type: CommunicationType.Mail,
    numberOfDocuments: 1,
    documentsIds: ['doc1'],
    documentLoaded: true,
    links: [__mockLinks[0]],
    createdTime: '2023-08-01T10:00:00Z',
    isMine: true,
  },
  {
    id: 'comm2',
    from: __mockParticipantsExtended[1],
    to: [__mockParticipantsExtended[0]],
    cc: [],
    title: 'Invoice Follow-Up',
    body: 'Please review the attached invoice.',
    status: CommunicationStatus.Pending,
    type: CommunicationType.Mail,
    numberOfDocuments: 2,
    documentsIds: ['doc2', 'doc3'],
    documentLoaded: false,
    links: [__mockLinks[1]],
    createdTime: '2023-08-02T11:00:00Z',
    isMine: false,
  },
  {
    id: 'comm3',
    from: __mockParticipantsExtended[2],
    to: [__mockParticipantsExtended[3]],
    cc: [],
    title: 'Chat about the meeting',
    body: JSON.stringify(contentChat),
    status: CommunicationStatus.Sent,
    type: CommunicationType.Chat,
    numberOfDocuments: 0,
    documentsIds: [],
    documentLoaded: false,
    links: [],
    createdTime: '2023-08-03T12:00:00Z',
    isMine: true,
  },
  {
    id: 'comm4',
    from: __mockParticipantsExtended[3],
    to: [__mockParticipantsExtended[2]],
    cc: [],
    title: 'SMS Update',
    body: JSON.stringify(contentChat),
    status: CommunicationStatus.Failed,
    type: CommunicationType.Intern,
    numberOfDocuments: 0,
    documentsIds: [],
    documentLoaded: false,
    links: [],
    createdTime: '2023-08-04T13:00:00Z',
    isMine: false,
  },
  {
    id: 'comm5',
    from: __mockParticipantsExtended[4],
    to: [__mockParticipantsExtended[0], __mockParticipantsExtended[1]],
    cc: [__mockParticipantsExtended[3]],
    title: 'Quotation Revision',
    body: 'Quotation looks good to me.',
    status: CommunicationStatus.Sent,
    type: CommunicationType.Mail,
    numberOfDocuments: 3,
    documentsIds: ['doc4', 'doc5', 'doc6'],
    documentLoaded: true,
    links: [__mockLinks[2]],
    createdTime: '2023-08-05T14:00:00Z',
    isMine: true,
  },
  {
    id: 'comm6',
    from: __mockParticipantsExtended[0],
    to: [__mockParticipantsExtended[4]],
    cc: [],
    title: 'Re: Quotation Revision',
    body: JSON.stringify(contentChat),
    status: CommunicationStatus.Pending,
    type: CommunicationType.Chat,
    numberOfDocuments: 0,
    documentsIds: [],
    documentLoaded: true,
    links: [],
    createdTime: '2023-08-06T15:00:00Z',
    isMine: false,
  },
  {
    id: 'comm7',
    from: __mockParticipantsExtended[2],
    to: [__mockParticipantsExtended[1]],
    cc: [],
    title: 'Reminder for Project Submission',
    body: JSON.stringify(contentChat),
    status: CommunicationStatus.Sent,
    type: CommunicationType.Chat,
    numberOfDocuments: 1,
    documentsIds: ['doc7'],
    documentLoaded: true,
    links: [__mockLinks[0]],
    createdTime: '2023-08-07T16:00:00Z',
    isMine: true,
  },
  {
    id: 'comm8',
    from: __mockParticipantsExtended[3],
    to: [__mockParticipantsExtended[4]],
    cc: [],
    title: 'Weekly Report',
    body: 'Attached is the weekly report.',
    status: CommunicationStatus.Failed,
    type: CommunicationType.Mail,
    numberOfDocuments: 1,
    documentsIds: ['doc8'],
    documentLoaded: false,
    links: [__mockLinks[1]],
    createdTime: '2023-08-08T17:00:00Z',
    isMine: false,
  },
  {
    id: 'comm9',
    from: __mockParticipantsExtended[4],
    to: [
      __mockParticipantsExtended[0],
      __mockParticipantsExtended[1],
      __mockParticipantsExtended[2],
    ],
    cc: [],
    title: 'Team Meeting Minutes',
    body: 'Team Meeting Minutes',
    status: CommunicationStatus.Sent,
    type: CommunicationType.Mail,
    numberOfDocuments: 2,
    documentsIds: ['doc9', 'doc10'],
    documentLoaded: true,
    links: [],
    createdTime: '2023-08-09T18:00:00Z',
    isMine: true,
  },
  {
    id: 'comm10',
    from: __mockParticipantsExtended[1],
    to: [__mockParticipantsExtended[3]],
    cc: [__mockParticipantsExtended[0]],
    title: 'Project Completion Confirmation',
    body: JSON.stringify(contentChat),
    status: CommunicationStatus.Sent,
    type: CommunicationType.Chat,
    numberOfDocuments: 1,
    documentsIds: ['doc11'],
    documentLoaded: true,
    links: [__mockLinks[2]],
    createdTime: '2023-08-10T19:00:00Z',
    isMine: false,
  },
];

export const __mockConversations: Conversation[] = [
  {
    id: 'conv1',
    title: 'Project ABC',
    reference: 'REF123',
    communications: [__mockCommunications[0], __mockCommunications[1]],
    participants: [
      __mockParticipantsExtended[0],
      __mockParticipantsExtended[1],
      __mockParticipantsExtended[2],
    ],
    projectId: 'proj1',
    taskId: 'task1',
    teamId: 'team1',
  },
  {
    id: 'conv2',
    title: 'Meeting Preparation',
    reference: 'REF124',
    communications: [__mockCommunications[2], __mockCommunications[3]],
    participants: [
      __mockParticipantsExtended[2],
      __mockParticipantsExtended[3],
    ],
    projectId: 'proj2',
    taskId: 'task2',
    teamId: 'team2',
  },
  {
    id: 'conv3',
    title: 'Quotation Review',
    reference: 'REF125',
    communications: [__mockCommunications[4], __mockCommunications[5]],
    participants: [
      __mockParticipantsExtended[4],
      __mockParticipantsExtended[0],
      __mockParticipantsExtended[3],
    ],
    projectId: 'proj3',
    taskId: 'task3',
    teamId: 'team3',
  },
  {
    id: 'conv4',
    title: 'Submission Reminder',
    reference: 'REF126',
    communications: [__mockCommunications[6], __mockCommunications[7]],
    participants: [
      __mockParticipantsExtended[2],
      __mockParticipantsExtended[1],
      __mockParticipantsExtended[4],
    ],
    projectId: 'proj4',
    taskId: 'task4',
    teamId: 'team4',
  },
  {
    id: 'conv5',
    title: 'Meeting Minutes',
    reference: 'REF127',
    communications: [__mockCommunications[8], __mockCommunications[9]],
    participants: [
      __mockParticipantsExtended[1],
      __mockParticipantsExtended[0],
      __mockParticipantsExtended[3],
    ],
    projectId: 'proj5',
    taskId: 'task5',
    teamId: 'team5',
  },
];
