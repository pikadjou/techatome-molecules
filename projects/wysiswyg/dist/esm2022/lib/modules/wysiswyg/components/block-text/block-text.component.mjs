import { NgIf, NgFor } from '@angular/common';
import { Component, Input } from '@angular/core';
import { ENotificationCode, NotificationInlineComponent } from '@ta/notification';
import { TitleComponent, TextComponent, ToastComponent } from '@ta/ui';
import { TaBaseComponent, SafePipe } from '@ta/utils';
import * as i0 from "@angular/core";
export class BlockTextComponent extends TaBaseComponent {
    constructor() {
        super(...arguments);
        this.ENotificationCode = ENotificationCode;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BlockTextComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: BlockTextComponent, isStandalone: true, selector: "ta-cms-editor-blocks", inputs: { blocks: "blocks" }, usesInheritance: true, ngImport: i0, template: "@for (block of this.blocks; track block.id) {\n  @switch (block.type) {\n    @case ('header') {\n      <ta-title [level]=\"block.data.level\">\n        {{ block.data.text }}\n      </ta-title>\n    }\n    @case ('paragraph') {\n      <ta-text>\n        <div [innerHTML]=\"block.data.text | safe: 'html'\"></div>\n      </ta-text>\n    }\n    @case ('list') {\n      @if (block.data.style === 'ordered') {\n        <ol>\n          @for (item of block.data.items; track item) {\n            <li>\n              {{ item }}\n            </li>\n          }\n        </ol>\n      } @else if (block.data.style === 'unordered') {\n        <ul>\n          @for (item of block.data.items; track item) {\n            <li>\n              {{ item }}\n            </li>\n          }\n        </ul>\n      }\n    }\n    @case ('delimiter') {\n      <hr />\n    }\n    @case ('image') {\n      <img [src]=\"block.data.file.url\" style=\"max-width: 100%\" />\n    }\n    @case ('quote') {\n      <div class=\"flex-start g-space-xs\">\n        @if (block.data.caption) {\n          <div>{{ block.data.caption }}:</div>\n        }\n        <q [innerHTML]=\"block.data.text | safe: 'html'\"></q>\n      </div>\n    }\n    @case ('warning') {\n      <ta-toast>\n        <ta-notification-inline\n          [message]=\"block.data.message\"\n          [code]=\"this.ENotificationCode.warning\"\n          [showClose]=\"false\"\n        ></ta-notification-inline>\n      </ta-toast>\n    }\n  }\n}\n", styles: [""], dependencies: [{ kind: "component", type: NotificationInlineComponent, selector: "ta-notification-inline", inputs: ["message", "code", "showClose"], outputs: ["askClose"] }, { kind: "pipe", type: SafePipe, name: "safe" }, { kind: "component", type: TitleComponent, selector: "ta-title", inputs: ["level", "isTheme", "isBold"] }, { kind: "component", type: TextComponent, selector: "ta-text", inputs: ["size", "isBold", "color"] }, { kind: "component", type: ToastComponent, selector: "ta-toast", inputs: ["code"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BlockTextComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-cms-editor-blocks', standalone: true, imports: [NgIf, NgFor, NotificationInlineComponent, SafePipe, TitleComponent, TextComponent, ToastComponent], template: "@for (block of this.blocks; track block.id) {\n  @switch (block.type) {\n    @case ('header') {\n      <ta-title [level]=\"block.data.level\">\n        {{ block.data.text }}\n      </ta-title>\n    }\n    @case ('paragraph') {\n      <ta-text>\n        <div [innerHTML]=\"block.data.text | safe: 'html'\"></div>\n      </ta-text>\n    }\n    @case ('list') {\n      @if (block.data.style === 'ordered') {\n        <ol>\n          @for (item of block.data.items; track item) {\n            <li>\n              {{ item }}\n            </li>\n          }\n        </ol>\n      } @else if (block.data.style === 'unordered') {\n        <ul>\n          @for (item of block.data.items; track item) {\n            <li>\n              {{ item }}\n            </li>\n          }\n        </ul>\n      }\n    }\n    @case ('delimiter') {\n      <hr />\n    }\n    @case ('image') {\n      <img [src]=\"block.data.file.url\" style=\"max-width: 100%\" />\n    }\n    @case ('quote') {\n      <div class=\"flex-start g-space-xs\">\n        @if (block.data.caption) {\n          <div>{{ block.data.caption }}:</div>\n        }\n        <q [innerHTML]=\"block.data.text | safe: 'html'\"></q>\n      </div>\n    }\n    @case ('warning') {\n      <ta-toast>\n        <ta-notification-inline\n          [message]=\"block.data.message\"\n          [code]=\"this.ENotificationCode.warning\"\n          [showClose]=\"false\"\n        ></ta-notification-inline>\n      </ta-toast>\n    }\n  }\n}\n" }]
        }], propDecorators: { blocks: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL21vZHVsZXMvd3lzaXN3eWcvY29tcG9uZW50cy9ibG9jay10ZXh0L2Jsb2NrLXRleHQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9tb2R1bGVzL3d5c2lzd3lnL2NvbXBvbmVudHMvYmxvY2stdGV4dC9ibG9jay10ZXh0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDOztBQVN0RCxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsZUFBZTtJQVB2RDs7UUFXVyxzQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztLQUNoRDsrR0FMWSxrQkFBa0I7bUdBQWxCLGtCQUFrQixxSUNmL0IsbzhDQXdEQSwwREQzQ3lCLDJCQUEyQiwrSEFBRSxRQUFRLDZDQUFFLGNBQWMsNkZBQUUsYUFBYSx5RkFBRSxjQUFjOzs0RkFFaEcsa0JBQWtCO2tCQVA5QixTQUFTOytCQUNBLHNCQUFzQixjQUdsQixJQUFJLFdBQ1AsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLGNBQWMsQ0FBQzs4QkFJNUcsTUFBTTtzQkFETCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdJZiwgTmdGb3IgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPdXRwdXRCbG9ja0RhdGEgfSBmcm9tICdAZWRpdG9yanMvZWRpdG9yanMnO1xuaW1wb3J0IHsgRU5vdGlmaWNhdGlvbkNvZGUsIE5vdGlmaWNhdGlvbklubGluZUNvbXBvbmVudCB9IGZyb20gJ0B0YS9ub3RpZmljYXRpb24nO1xuaW1wb3J0IHsgVGl0bGVDb21wb25lbnQsIFRleHRDb21wb25lbnQsIFRvYXN0Q29tcG9uZW50IH0gZnJvbSAnQHRhL3VpJztcbmltcG9ydCB7IFRhQmFzZUNvbXBvbmVudCwgU2FmZVBpcGUgfSBmcm9tICdAdGEvdXRpbHMnO1xuXG5AQ29tcG9uZW50KHtcbnNlbGVjdG9yOiAndGEtY21zLWVkaXRvci1ibG9ja3MnLFxuICB0ZW1wbGF0ZVVybDogJy4vYmxvY2stdGV4dC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2Jsb2NrLXRleHQuY29tcG9uZW50LnNjc3MnXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW05nSWYsIE5nRm9yLCBOb3RpZmljYXRpb25JbmxpbmVDb21wb25lbnQsIFNhZmVQaXBlLCBUaXRsZUNvbXBvbmVudCwgVGV4dENvbXBvbmVudCwgVG9hc3RDb21wb25lbnRdLFxufSlcbmV4cG9ydCBjbGFzcyBCbG9ja1RleHRDb21wb25lbnQgZXh0ZW5kcyBUYUJhc2VDb21wb25lbnQge1xuICBASW5wdXQoKVxuICBibG9ja3MhOiBPdXRwdXRCbG9ja0RhdGFbXTtcblxuICByZWFkb25seSBFTm90aWZpY2F0aW9uQ29kZSA9IEVOb3RpZmljYXRpb25Db2RlO1xufVxuIiwiQGZvciAoYmxvY2sgb2YgdGhpcy5ibG9ja3M7IHRyYWNrIGJsb2NrLmlkKSB7XG4gIEBzd2l0Y2ggKGJsb2NrLnR5cGUpIHtcbiAgICBAY2FzZSAoJ2hlYWRlcicpIHtcbiAgICAgIDx0YS10aXRsZSBbbGV2ZWxdPVwiYmxvY2suZGF0YS5sZXZlbFwiPlxuICAgICAgICB7eyBibG9jay5kYXRhLnRleHQgfX1cbiAgICAgIDwvdGEtdGl0bGU+XG4gICAgfVxuICAgIEBjYXNlICgncGFyYWdyYXBoJykge1xuICAgICAgPHRhLXRleHQ+XG4gICAgICAgIDxkaXYgW2lubmVySFRNTF09XCJibG9jay5kYXRhLnRleHQgfCBzYWZlOiAnaHRtbCdcIj48L2Rpdj5cbiAgICAgIDwvdGEtdGV4dD5cbiAgICB9XG4gICAgQGNhc2UgKCdsaXN0Jykge1xuICAgICAgQGlmIChibG9jay5kYXRhLnN0eWxlID09PSAnb3JkZXJlZCcpIHtcbiAgICAgICAgPG9sPlxuICAgICAgICAgIEBmb3IgKGl0ZW0gb2YgYmxvY2suZGF0YS5pdGVtczsgdHJhY2sgaXRlbSkge1xuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICB7eyBpdGVtIH19XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIH1cbiAgICAgICAgPC9vbD5cbiAgICAgIH0gQGVsc2UgaWYgKGJsb2NrLmRhdGEuc3R5bGUgPT09ICd1bm9yZGVyZWQnKSB7XG4gICAgICAgIDx1bD5cbiAgICAgICAgICBAZm9yIChpdGVtIG9mIGJsb2NrLmRhdGEuaXRlbXM7IHRyYWNrIGl0ZW0pIHtcbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAge3sgaXRlbSB9fVxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICB9XG4gICAgICAgIDwvdWw+XG4gICAgICB9XG4gICAgfVxuICAgIEBjYXNlICgnZGVsaW1pdGVyJykge1xuICAgICAgPGhyIC8+XG4gICAgfVxuICAgIEBjYXNlICgnaW1hZ2UnKSB7XG4gICAgICA8aW1nIFtzcmNdPVwiYmxvY2suZGF0YS5maWxlLnVybFwiIHN0eWxlPVwibWF4LXdpZHRoOiAxMDAlXCIgLz5cbiAgICB9XG4gICAgQGNhc2UgKCdxdW90ZScpIHtcbiAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LXN0YXJ0IGctc3BhY2UteHNcIj5cbiAgICAgICAgQGlmIChibG9jay5kYXRhLmNhcHRpb24pIHtcbiAgICAgICAgICA8ZGl2Pnt7IGJsb2NrLmRhdGEuY2FwdGlvbiB9fTo8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgICA8cSBbaW5uZXJIVE1MXT1cImJsb2NrLmRhdGEudGV4dCB8IHNhZmU6ICdodG1sJ1wiPjwvcT5cbiAgICAgIDwvZGl2PlxuICAgIH1cbiAgICBAY2FzZSAoJ3dhcm5pbmcnKSB7XG4gICAgICA8dGEtdG9hc3Q+XG4gICAgICAgIDx0YS1ub3RpZmljYXRpb24taW5saW5lXG4gICAgICAgICAgW21lc3NhZ2VdPVwiYmxvY2suZGF0YS5tZXNzYWdlXCJcbiAgICAgICAgICBbY29kZV09XCJ0aGlzLkVOb3RpZmljYXRpb25Db2RlLndhcm5pbmdcIlxuICAgICAgICAgIFtzaG93Q2xvc2VdPVwiZmFsc2VcIlxuICAgICAgICA+PC90YS1ub3RpZmljYXRpb24taW5saW5lPlxuICAgICAgPC90YS10b2FzdD5cbiAgICB9XG4gIH1cbn1cbiJdfQ==