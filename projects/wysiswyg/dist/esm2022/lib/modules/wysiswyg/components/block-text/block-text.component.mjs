import { Component, Input } from '@angular/core';
import { ENotificationCode, NotificationInlineComponent } from '@ta/notification';
import { TextComponent, TitleComponent, ToastComponent } from '@ta/ui';
import { SafePipe, TaBaseComponent } from '@ta/utils';
import * as i0 from "@angular/core";
export class BlockTextComponent extends TaBaseComponent {
    constructor() {
        super(...arguments);
        this.ENotificationCode = ENotificationCode;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BlockTextComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.13", type: BlockTextComponent, isStandalone: true, selector: "ta-cms-editor-blocks", inputs: { blocks: "blocks" }, usesInheritance: true, ngImport: i0, template: "@for (block of this.blocks; track block.id) {\n  @switch (block.type) {\n    @case ('header') {\n      <ta-title [level]=\"block.data.level\">\n        {{ block.data.text }}\n      </ta-title>\n    }\n    @case ('paragraph') {\n      <ta-text>\n        <div [innerHTML]=\"block.data.text | safe: 'html'\"></div>\n      </ta-text>\n    }\n    @case ('list') {\n      @if (block.data.style === 'ordered') {\n        <ol>\n          @for (item of block.data.items; track item) {\n            <li>\n              {{ item }}\n            </li>\n          }\n        </ol>\n      } @else if (block.data.style === 'unordered') {\n        <ul>\n          @for (item of block.data.items; track item) {\n            <li>\n              {{ item }}\n            </li>\n          }\n        </ul>\n      }\n    }\n    @case ('delimiter') {\n      <hr />\n    }\n    @case ('image') {\n      <img [src]=\"block.data.file.url\" style=\"max-width: 100%\" />\n    }\n    @case ('quote') {\n      <div class=\"flex-start g-space-xs\">\n        @if (block.data.caption) {\n          <div>{{ block.data.caption }}:</div>\n        }\n        <q [innerHTML]=\"block.data.text | safe: 'html'\"></q>\n      </div>\n    }\n    @case ('warning') {\n      <ta-toast>\n        <ta-notification-inline\n          [message]=\"block.data.message\"\n          [code]=\"this.ENotificationCode.warning\"\n          [showClose]=\"false\"\n        ></ta-notification-inline>\n      </ta-toast>\n    }\n  }\n}\n", styles: [""], dependencies: [{ kind: "component", type: NotificationInlineComponent, selector: "ta-notification-inline", inputs: ["message", "code", "showClose"], outputs: ["askClose"] }, { kind: "pipe", type: SafePipe, name: "safe" }, { kind: "component", type: TitleComponent, selector: "ta-title", inputs: ["level", "isTheme", "isBold", "icon"] }, { kind: "component", type: TextComponent, selector: "ta-text", inputs: ["size", "isBold", "color"] }, { kind: "component", type: ToastComponent, selector: "ta-toast", inputs: ["code"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: BlockTextComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ta-cms-editor-blocks', standalone: true, imports: [NotificationInlineComponent, SafePipe, TitleComponent, TextComponent, ToastComponent], template: "@for (block of this.blocks; track block.id) {\n  @switch (block.type) {\n    @case ('header') {\n      <ta-title [level]=\"block.data.level\">\n        {{ block.data.text }}\n      </ta-title>\n    }\n    @case ('paragraph') {\n      <ta-text>\n        <div [innerHTML]=\"block.data.text | safe: 'html'\"></div>\n      </ta-text>\n    }\n    @case ('list') {\n      @if (block.data.style === 'ordered') {\n        <ol>\n          @for (item of block.data.items; track item) {\n            <li>\n              {{ item }}\n            </li>\n          }\n        </ol>\n      } @else if (block.data.style === 'unordered') {\n        <ul>\n          @for (item of block.data.items; track item) {\n            <li>\n              {{ item }}\n            </li>\n          }\n        </ul>\n      }\n    }\n    @case ('delimiter') {\n      <hr />\n    }\n    @case ('image') {\n      <img [src]=\"block.data.file.url\" style=\"max-width: 100%\" />\n    }\n    @case ('quote') {\n      <div class=\"flex-start g-space-xs\">\n        @if (block.data.caption) {\n          <div>{{ block.data.caption }}:</div>\n        }\n        <q [innerHTML]=\"block.data.text | safe: 'html'\"></q>\n      </div>\n    }\n    @case ('warning') {\n      <ta-toast>\n        <ta-notification-inline\n          [message]=\"block.data.message\"\n          [code]=\"this.ENotificationCode.warning\"\n          [showClose]=\"false\"\n        ></ta-notification-inline>\n      </ta-toast>\n    }\n  }\n}\n" }]
        }], propDecorators: { blocks: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbGliL21vZHVsZXMvd3lzaXN3eWcvY29tcG9uZW50cy9ibG9jay10ZXh0L2Jsb2NrLXRleHQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9tb2R1bGVzL3d5c2lzd3lnL2NvbXBvbmVudHMvYmxvY2stdGV4dC9ibG9jay10ZXh0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSWpELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUN2RSxPQUFPLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQzs7QUFTdEQsTUFBTSxPQUFPLGtCQUFtQixTQUFRLGVBQWU7SUFQdkQ7O1FBV1csc0JBQWlCLEdBQUcsaUJBQWlCLENBQUM7S0FDaEQ7K0dBTFksa0JBQWtCO21HQUFsQixrQkFBa0IscUlDZi9CLG84Q0F3REEsMEREM0NZLDJCQUEyQiwrSEFBRSxRQUFRLDZDQUFFLGNBQWMscUdBQUUsYUFBYSx5RkFBRSxjQUFjOzs0RkFFbkYsa0JBQWtCO2tCQVA5QixTQUFTOytCQUNFLHNCQUFzQixjQUdwQixJQUFJLFdBQ1AsQ0FBQywyQkFBMkIsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxjQUFjLENBQUM7OEJBSS9GLE1BQU07c0JBREwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT3V0cHV0QmxvY2tEYXRhIH0gZnJvbSAnQGVkaXRvcmpzL2VkaXRvcmpzJztcblxuaW1wb3J0IHsgRU5vdGlmaWNhdGlvbkNvZGUsIE5vdGlmaWNhdGlvbklubGluZUNvbXBvbmVudCB9IGZyb20gJ0B0YS9ub3RpZmljYXRpb24nO1xuaW1wb3J0IHsgVGV4dENvbXBvbmVudCwgVGl0bGVDb21wb25lbnQsIFRvYXN0Q29tcG9uZW50IH0gZnJvbSAnQHRhL3VpJztcbmltcG9ydCB7IFNhZmVQaXBlLCBUYUJhc2VDb21wb25lbnQgfSBmcm9tICdAdGEvdXRpbHMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0YS1jbXMtZWRpdG9yLWJsb2NrcycsXG4gIHRlbXBsYXRlVXJsOiAnLi9ibG9jay10ZXh0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vYmxvY2stdGV4dC5jb21wb25lbnQuc2NzcyddLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBpbXBvcnRzOiBbTm90aWZpY2F0aW9uSW5saW5lQ29tcG9uZW50LCBTYWZlUGlwZSwgVGl0bGVDb21wb25lbnQsIFRleHRDb21wb25lbnQsIFRvYXN0Q29tcG9uZW50XSxcbn0pXG5leHBvcnQgY2xhc3MgQmxvY2tUZXh0Q29tcG9uZW50IGV4dGVuZHMgVGFCYXNlQ29tcG9uZW50IHtcbiAgQElucHV0KClcbiAgYmxvY2tzITogT3V0cHV0QmxvY2tEYXRhW107XG5cbiAgcmVhZG9ubHkgRU5vdGlmaWNhdGlvbkNvZGUgPSBFTm90aWZpY2F0aW9uQ29kZTtcbn1cbiIsIkBmb3IgKGJsb2NrIG9mIHRoaXMuYmxvY2tzOyB0cmFjayBibG9jay5pZCkge1xuICBAc3dpdGNoIChibG9jay50eXBlKSB7XG4gICAgQGNhc2UgKCdoZWFkZXInKSB7XG4gICAgICA8dGEtdGl0bGUgW2xldmVsXT1cImJsb2NrLmRhdGEubGV2ZWxcIj5cbiAgICAgICAge3sgYmxvY2suZGF0YS50ZXh0IH19XG4gICAgICA8L3RhLXRpdGxlPlxuICAgIH1cbiAgICBAY2FzZSAoJ3BhcmFncmFwaCcpIHtcbiAgICAgIDx0YS10ZXh0PlxuICAgICAgICA8ZGl2IFtpbm5lckhUTUxdPVwiYmxvY2suZGF0YS50ZXh0IHwgc2FmZTogJ2h0bWwnXCI+PC9kaXY+XG4gICAgICA8L3RhLXRleHQ+XG4gICAgfVxuICAgIEBjYXNlICgnbGlzdCcpIHtcbiAgICAgIEBpZiAoYmxvY2suZGF0YS5zdHlsZSA9PT0gJ29yZGVyZWQnKSB7XG4gICAgICAgIDxvbD5cbiAgICAgICAgICBAZm9yIChpdGVtIG9mIGJsb2NrLmRhdGEuaXRlbXM7IHRyYWNrIGl0ZW0pIHtcbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAge3sgaXRlbSB9fVxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICB9XG4gICAgICAgIDwvb2w+XG4gICAgICB9IEBlbHNlIGlmIChibG9jay5kYXRhLnN0eWxlID09PSAndW5vcmRlcmVkJykge1xuICAgICAgICA8dWw+XG4gICAgICAgICAgQGZvciAoaXRlbSBvZiBibG9jay5kYXRhLml0ZW1zOyB0cmFjayBpdGVtKSB7XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgIHt7IGl0ZW0gfX1cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgfVxuICAgICAgICA8L3VsPlxuICAgICAgfVxuICAgIH1cbiAgICBAY2FzZSAoJ2RlbGltaXRlcicpIHtcbiAgICAgIDxociAvPlxuICAgIH1cbiAgICBAY2FzZSAoJ2ltYWdlJykge1xuICAgICAgPGltZyBbc3JjXT1cImJsb2NrLmRhdGEuZmlsZS51cmxcIiBzdHlsZT1cIm1heC13aWR0aDogMTAwJVwiIC8+XG4gICAgfVxuICAgIEBjYXNlICgncXVvdGUnKSB7XG4gICAgICA8ZGl2IGNsYXNzPVwiZmxleC1zdGFydCBnLXNwYWNlLXhzXCI+XG4gICAgICAgIEBpZiAoYmxvY2suZGF0YS5jYXB0aW9uKSB7XG4gICAgICAgICAgPGRpdj57eyBibG9jay5kYXRhLmNhcHRpb24gfX06PC9kaXY+XG4gICAgICAgIH1cbiAgICAgICAgPHEgW2lubmVySFRNTF09XCJibG9jay5kYXRhLnRleHQgfCBzYWZlOiAnaHRtbCdcIj48L3E+XG4gICAgICA8L2Rpdj5cbiAgICB9XG4gICAgQGNhc2UgKCd3YXJuaW5nJykge1xuICAgICAgPHRhLXRvYXN0PlxuICAgICAgICA8dGEtbm90aWZpY2F0aW9uLWlubGluZVxuICAgICAgICAgIFttZXNzYWdlXT1cImJsb2NrLmRhdGEubWVzc2FnZVwiXG4gICAgICAgICAgW2NvZGVdPVwidGhpcy5FTm90aWZpY2F0aW9uQ29kZS53YXJuaW5nXCJcbiAgICAgICAgICBbc2hvd0Nsb3NlXT1cImZhbHNlXCJcbiAgICAgICAgPjwvdGEtbm90aWZpY2F0aW9uLWlubGluZT5cbiAgICAgIDwvdGEtdG9hc3Q+XG4gICAgfVxuICB9XG59XG4iXX0=