import { inject } from '@angular/core';
import { map, of } from 'rxjs';
import { CamBaseStrapiService } from '@ta/server';
// import { GET_TRANSLATIONS } from './queries';
import { CamTranslationRegistryService } from './translation-registry.service';
export class CamLazyTranslationService extends CamBaseStrapiService {
    get id() {
        return this._id;
    }
    constructor(id, isApp = false) {
        super();
        this._registry = inject(CamTranslationRegistryService);
        this._id = '';
        this._isApp = false;
        this._id = id;
        this._isApp = isApp;
        this._registry.register(this);
    }
    static getInstance() {
        return inject(this);
    }
    getTranslation(lang) {
        // this._strapiService.fetchQueryList$<Translation>(GET_TRANSLATIONS(lang, this._id), 'translations')
        return of([]).pipe(map(translations => translations.reduce((acc, translation) => {
            acc[(this._isApp ? '' : this._id + '.') + translation.key.trim()] = translation.value;
            return acc;
        }, {})), map(translations => Object.entries(translations).reduce((acc, [key, value]) => {
            const keys = key.split('.');
            keys.reduce((current, k, index) => {
                if (index === keys.length - 1) {
                    current[k] = value;
                }
                else {
                    current[k] = current[k] || {};
                }
                return current[k];
            }, acc);
            return acc;
        }, {})));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS10cmFuc2xhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXJ2aWNlcy9sYXp5LXRyYW5zbGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2QyxPQUFPLEVBQWMsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFHbEQsZ0RBQWdEO0FBQ2hELE9BQU8sRUFBRSw2QkFBNkIsRUFBZ0IsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU3RixNQUFNLE9BQWdCLHlCQUEwQixTQUFRLG9CQUFvQjtJQUMxRSxJQUFJLEVBQUU7UUFDSixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQU1ELFlBQVksRUFBVSxFQUFFLEtBQUssR0FBRyxLQUFLO1FBQ25DLEtBQUssRUFBRSxDQUFDO1FBTk8sY0FBUyxHQUFHLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBRTNELFFBQUcsR0FBRyxFQUFFLENBQUM7UUFDVCxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBS3JCLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXO1FBQ2hCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFTSxjQUFjLENBQUMsSUFBWTtRQUNoQyxxR0FBcUc7UUFDckcsT0FBTyxFQUFFLENBQWdCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDL0IsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQ2pCLFlBQVksQ0FBQyxNQUFNLENBQThCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxFQUFFO1lBQ3BFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUN0RixPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDUCxFQUNELEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUNqQixNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQ3hELE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBMkIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFO2dCQUMxRCxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO29CQUM5QixPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNyQixDQUFDO3FCQUFNLENBQUM7b0JBQ04sT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2hDLENBQUM7Z0JBQ0QsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBRVIsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQ1AsQ0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBtYXAsIG9mIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBDYW1CYXNlU3RyYXBpU2VydmljZSB9IGZyb20gJ0B0YS9zZXJ2ZXInO1xyXG5cclxuaW1wb3J0IHsgVHJhbnNsYXRpb24gfSBmcm9tICcuL2R0by90cmFuc2xhdGlvbic7XHJcbi8vIGltcG9ydCB7IEdFVF9UUkFOU0xBVElPTlMgfSBmcm9tICcuL3F1ZXJpZXMnO1xyXG5pbXBvcnQgeyBDYW1UcmFuc2xhdGlvblJlZ2lzdHJ5U2VydmljZSwgSVRyYW5zbGF0aW9uIH0gZnJvbSAnLi90cmFuc2xhdGlvbi1yZWdpc3RyeS5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDYW1MYXp5VHJhbnNsYXRpb25TZXJ2aWNlIGV4dGVuZHMgQ2FtQmFzZVN0cmFwaVNlcnZpY2UgaW1wbGVtZW50cyBJVHJhbnNsYXRpb24ge1xyXG4gIGdldCBpZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pZDtcclxuICB9XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfcmVnaXN0cnkgPSBpbmplY3QoQ2FtVHJhbnNsYXRpb25SZWdpc3RyeVNlcnZpY2UpO1xyXG5cclxuICBwcml2YXRlIF9pZCA9ICcnO1xyXG4gIHByaXZhdGUgX2lzQXBwID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIGlzQXBwID0gZmFsc2UpIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5faWQgPSBpZDtcclxuICAgIHRoaXMuX2lzQXBwID0gaXNBcHA7XHJcbiAgICB0aGlzLl9yZWdpc3RyeS5yZWdpc3Rlcih0aGlzKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcclxuICAgIHJldHVybiBpbmplY3QodGhpcyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0VHJhbnNsYXRpb24obGFuZzogc3RyaW5nKTogT2JzZXJ2YWJsZTxvYmplY3QgfCBudWxsPiB7XHJcbiAgICAvLyB0aGlzLl9zdHJhcGlTZXJ2aWNlLmZldGNoUXVlcnlMaXN0JDxUcmFuc2xhdGlvbj4oR0VUX1RSQU5TTEFUSU9OUyhsYW5nLCB0aGlzLl9pZCksICd0cmFuc2xhdGlvbnMnKVxyXG4gICAgcmV0dXJuIG9mPFRyYW5zbGF0aW9uW10+KFtdKS5waXBlKFxyXG4gICAgICBtYXAodHJhbnNsYXRpb25zID0+XHJcbiAgICAgICAgdHJhbnNsYXRpb25zLnJlZHVjZTx7IFtpbmRleDogc3RyaW5nXTogc3RyaW5nIH0+KChhY2MsIHRyYW5zbGF0aW9uKSA9PiB7XHJcbiAgICAgICAgICBhY2NbKHRoaXMuX2lzQXBwID8gJycgOiB0aGlzLl9pZCArICcuJykgKyB0cmFuc2xhdGlvbi5rZXkudHJpbSgpXSA9IHRyYW5zbGF0aW9uLnZhbHVlO1xyXG4gICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICB9LCB7fSlcclxuICAgICAgKSxcclxuICAgICAgbWFwKHRyYW5zbGF0aW9ucyA9PlxyXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHRyYW5zbGF0aW9ucykucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xyXG4gICAgICAgICAgY29uc3Qga2V5cyA9IGtleS5zcGxpdCgnLicpO1xyXG4gICAgICAgICAga2V5cy5yZWR1Y2U8eyBbaW5kZXg6IHN0cmluZ106IGFueSB9PigoY3VycmVudCwgaywgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICBjdXJyZW50W2tdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgY3VycmVudFtrXSA9IGN1cnJlbnRba10gfHwge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRba107XHJcbiAgICAgICAgICB9LCBhY2MpO1xyXG5cclxuICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgfSwge30pXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==