import { inject } from '@angular/core';
import { map } from 'rxjs';
import { TaBaseStrapiService } from '@ta/server';
import { GET_TRANSLATIONS } from './queries';
import { TaTranslationRegistryService } from './translation-registry.service';
export class TaLazyTranslationService extends TaBaseStrapiService {
    get id() {
        return this._id;
    }
    constructor(id, isApp = false) {
        super();
        this._registry = inject(TaTranslationRegistryService);
        this._id = '';
        this._isApp = false;
        this._id = id;
        this._isApp = isApp;
        this._registry.register(this);
    }
    static getInstance() {
        return inject(this);
    }
    getTranslation(lang) {
        return this._strapiService.fetchQueryList$(GET_TRANSLATIONS(lang, this._id), 'translations').pipe(map(translations => translations.reduce((acc, translation) => {
            acc[(this._isApp ? '' : this._id + '.') + translation.key.trim()] = translation.value;
            return acc;
        }, {})), map(translations => Object.entries(translations).reduce((acc, [key, value]) => {
            const keys = key.split('.');
            keys.reduce((current, k, index) => {
                if (index === keys.length - 1) {
                    current[k] = value;
                }
                else {
                    current[k] = current[k] || {};
                }
                return current[k];
            }, acc);
            return acc;
        }, {})));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS10cmFuc2xhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXJ2aWNlcy9sYXp5LXRyYW5zbGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2QyxPQUFPLEVBQWMsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXZDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUdqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDN0MsT0FBTyxFQUFnQiw0QkFBNEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRTVGLE1BQU0sT0FBZ0Isd0JBQXlCLFNBQVEsbUJBQW1CO0lBQ3hFLElBQUksRUFBRTtRQUNKLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNsQixDQUFDO0lBTUQsWUFBWSxFQUFVLEVBQUUsS0FBSyxHQUFHLEtBQUs7UUFDbkMsS0FBSyxFQUFFLENBQUM7UUFOTyxjQUFTLEdBQUcsTUFBTSxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFFMUQsUUFBRyxHQUFHLEVBQUUsQ0FBQztRQUNULFdBQU0sR0FBRyxLQUFLLENBQUM7UUFLckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVc7UUFDaEIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVNLGNBQWMsQ0FBQyxJQUFZO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQWMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQzVHLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUNqQixZQUFZLENBQUMsTUFBTSxDQUE4QixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsRUFBRTtZQUNwRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUM7WUFDdEYsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQ1AsRUFDRCxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FDakIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUN4RCxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzVCLElBQUksQ0FBQyxNQUFNLENBQTJCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDMUQsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztvQkFDOUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDckIsQ0FBQztxQkFBTSxDQUFDO29CQUNOLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNoQyxDQUFDO2dCQUNELE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUVSLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUNQLENBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgbWFwIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBUYUJhc2VTdHJhcGlTZXJ2aWNlIH0gZnJvbSAnQHRhL3NlcnZlcic7XHJcblxyXG5pbXBvcnQgeyBUcmFuc2xhdGlvbiB9IGZyb20gJy4vZHRvL3RyYW5zbGF0aW9uJztcclxuaW1wb3J0IHsgR0VUX1RSQU5TTEFUSU9OUyB9IGZyb20gJy4vcXVlcmllcyc7XHJcbmltcG9ydCB7IElUcmFuc2xhdGlvbiwgVGFUcmFuc2xhdGlvblJlZ2lzdHJ5U2VydmljZSB9IGZyb20gJy4vdHJhbnNsYXRpb24tcmVnaXN0cnkuc2VydmljZSc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGFMYXp5VHJhbnNsYXRpb25TZXJ2aWNlIGV4dGVuZHMgVGFCYXNlU3RyYXBpU2VydmljZSBpbXBsZW1lbnRzIElUcmFuc2xhdGlvbiB7XHJcbiAgZ2V0IGlkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gIH1cclxuICBwcml2YXRlIHJlYWRvbmx5IF9yZWdpc3RyeSA9IGluamVjdChUYVRyYW5zbGF0aW9uUmVnaXN0cnlTZXJ2aWNlKTtcclxuXHJcbiAgcHJpdmF0ZSBfaWQgPSAnJztcclxuICBwcml2YXRlIF9pc0FwcCA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nLCBpc0FwcCA9IGZhbHNlKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgICB0aGlzLl9pc0FwcCA9IGlzQXBwO1xyXG4gICAgdGhpcy5fcmVnaXN0cnkucmVnaXN0ZXIodGhpcyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XHJcbiAgICByZXR1cm4gaW5qZWN0KHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFRyYW5zbGF0aW9uKGxhbmc6IHN0cmluZyk6IE9ic2VydmFibGU8b2JqZWN0IHwgbnVsbD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3N0cmFwaVNlcnZpY2UuZmV0Y2hRdWVyeUxpc3QkPFRyYW5zbGF0aW9uPihHRVRfVFJBTlNMQVRJT05TKGxhbmcsIHRoaXMuX2lkKSwgJ3RyYW5zbGF0aW9ucycpLnBpcGUoXHJcbiAgICAgIG1hcCh0cmFuc2xhdGlvbnMgPT5cclxuICAgICAgICB0cmFuc2xhdGlvbnMucmVkdWNlPHsgW2luZGV4OiBzdHJpbmddOiBzdHJpbmcgfT4oKGFjYywgdHJhbnNsYXRpb24pID0+IHtcclxuICAgICAgICAgIGFjY1sodGhpcy5faXNBcHAgPyAnJyA6IHRoaXMuX2lkICsgJy4nKSArIHRyYW5zbGF0aW9uLmtleS50cmltKCldID0gdHJhbnNsYXRpb24udmFsdWU7XHJcbiAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgIH0sIHt9KVxyXG4gICAgICApLFxyXG4gICAgICBtYXAodHJhbnNsYXRpb25zID0+XHJcbiAgICAgICAgT2JqZWN0LmVudHJpZXModHJhbnNsYXRpb25zKS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBrZXlzID0ga2V5LnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICBrZXlzLnJlZHVjZTx7IFtpbmRleDogc3RyaW5nXTogYW55IH0+KChjdXJyZW50LCBrLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IGtleXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgIGN1cnJlbnRba10gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBjdXJyZW50W2tdID0gY3VycmVudFtrXSB8fCB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFtrXTtcclxuICAgICAgICAgIH0sIGFjYyk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICB9LCB7fSlcclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19