import { inject } from '@angular/core';
import { map, of } from 'rxjs';
import { TaBaseStrapiService } from '@ta/server';
// import { GET_TRANSLATIONS } from './queries';
import { TaTranslationRegistryService } from './translation-registry.service';
export class TaLazyTranslationService extends TaBaseStrapiService {
    get id() {
        return this._id;
    }
    constructor(id, isApp = false) {
        super();
        this._registry = inject(TaTranslationRegistryService);
        this._id = '';
        this._isApp = false;
        this._id = id;
        this._isApp = isApp;
        this._registry.register(this);
    }
    static getInstance() {
        return inject(this);
    }
    getTranslation(lang) {
        // this._strapiService.fetchQueryList$<Translation>(GET_TRANSLATIONS(lang, this._id), 'translations')
        return of([]).pipe(map(translations => translations.reduce((acc, translation) => {
            acc[(this._isApp ? '' : this._id + '.') + translation.key.trim()] = translation.value;
            return acc;
        }, {})), map(translations => Object.entries(translations).reduce((acc, [key, value]) => {
            const keys = key.split('.');
            keys.reduce((current, k, index) => {
                if (index === keys.length - 1) {
                    current[k] = value;
                }
                else {
                    current[k] = current[k] || {};
                }
                return current[k];
            }, acc);
            return acc;
        }, {})));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS10cmFuc2xhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXJ2aWNlcy9sYXp5LXRyYW5zbGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2QyxPQUFPLEVBQWMsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUzQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFHakQsZ0RBQWdEO0FBQ2hELE9BQU8sRUFBZ0IsNEJBQTRCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU1RixNQUFNLE9BQWdCLHdCQUF5QixTQUFRLG1CQUFtQjtJQUN4RSxJQUFJLEVBQUU7UUFDSixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQU1ELFlBQVksRUFBVSxFQUFFLEtBQUssR0FBRyxLQUFLO1FBQ25DLEtBQUssRUFBRSxDQUFDO1FBTk8sY0FBUyxHQUFHLE1BQU0sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBRTFELFFBQUcsR0FBRyxFQUFFLENBQUM7UUFDVCxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBS3JCLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXO1FBQ2hCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFTSxjQUFjLENBQUMsSUFBWTtRQUNoQyxxR0FBcUc7UUFDckcsT0FBTyxFQUFFLENBQWdCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDL0IsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQ2pCLFlBQVksQ0FBQyxNQUFNLENBQThCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxFQUFFO1lBQ3BFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUN0RixPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDUCxFQUNELEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUNqQixNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQ3hELE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBMkIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFO2dCQUMxRCxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO29CQUM5QixPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNyQixDQUFDO3FCQUFNLENBQUM7b0JBQ04sT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2hDLENBQUM7Z0JBQ0QsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBRVIsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQ1AsQ0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBtYXAsIG9mIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBUYUJhc2VTdHJhcGlTZXJ2aWNlIH0gZnJvbSAnQHRhL3NlcnZlcic7XHJcblxyXG5pbXBvcnQgeyBUcmFuc2xhdGlvbiB9IGZyb20gJy4vZHRvL3RyYW5zbGF0aW9uJztcclxuLy8gaW1wb3J0IHsgR0VUX1RSQU5TTEFUSU9OUyB9IGZyb20gJy4vcXVlcmllcyc7XHJcbmltcG9ydCB7IElUcmFuc2xhdGlvbiwgVGFUcmFuc2xhdGlvblJlZ2lzdHJ5U2VydmljZSB9IGZyb20gJy4vdHJhbnNsYXRpb24tcmVnaXN0cnkuc2VydmljZSc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVGFMYXp5VHJhbnNsYXRpb25TZXJ2aWNlIGV4dGVuZHMgVGFCYXNlU3RyYXBpU2VydmljZSBpbXBsZW1lbnRzIElUcmFuc2xhdGlvbiB7XHJcbiAgZ2V0IGlkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gIH1cclxuICBwcml2YXRlIHJlYWRvbmx5IF9yZWdpc3RyeSA9IGluamVjdChUYVRyYW5zbGF0aW9uUmVnaXN0cnlTZXJ2aWNlKTtcclxuXHJcbiAgcHJpdmF0ZSBfaWQgPSAnJztcclxuICBwcml2YXRlIF9pc0FwcCA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nLCBpc0FwcCA9IGZhbHNlKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgICB0aGlzLl9pc0FwcCA9IGlzQXBwO1xyXG4gICAgdGhpcy5fcmVnaXN0cnkucmVnaXN0ZXIodGhpcyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XHJcbiAgICByZXR1cm4gaW5qZWN0KHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFRyYW5zbGF0aW9uKGxhbmc6IHN0cmluZyk6IE9ic2VydmFibGU8b2JqZWN0IHwgbnVsbD4ge1xyXG4gICAgLy8gdGhpcy5fc3RyYXBpU2VydmljZS5mZXRjaFF1ZXJ5TGlzdCQ8VHJhbnNsYXRpb24+KEdFVF9UUkFOU0xBVElPTlMobGFuZywgdGhpcy5faWQpLCAndHJhbnNsYXRpb25zJylcclxuICAgIHJldHVybiBvZjxUcmFuc2xhdGlvbltdPihbXSkucGlwZShcclxuICAgICAgbWFwKHRyYW5zbGF0aW9ucyA9PlxyXG4gICAgICAgIHRyYW5zbGF0aW9ucy5yZWR1Y2U8eyBbaW5kZXg6IHN0cmluZ106IHN0cmluZyB9PigoYWNjLCB0cmFuc2xhdGlvbikgPT4ge1xyXG4gICAgICAgICAgYWNjWyh0aGlzLl9pc0FwcCA/ICcnIDogdGhpcy5faWQgKyAnLicpICsgdHJhbnNsYXRpb24ua2V5LnRyaW0oKV0gPSB0cmFuc2xhdGlvbi52YWx1ZTtcclxuICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgfSwge30pXHJcbiAgICAgICksXHJcbiAgICAgIG1hcCh0cmFuc2xhdGlvbnMgPT5cclxuICAgICAgICBPYmplY3QuZW50cmllcyh0cmFuc2xhdGlvbnMpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgICAgIGNvbnN0IGtleXMgPSBrZXkuc3BsaXQoJy4nKTtcclxuICAgICAgICAgIGtleXMucmVkdWNlPHsgW2luZGV4OiBzdHJpbmddOiBhbnkgfT4oKGN1cnJlbnQsIGssIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0ga2V5cy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgY3VycmVudFtrXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGN1cnJlbnRba10gPSBjdXJyZW50W2tdIHx8IHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50W2tdO1xyXG4gICAgICAgICAgfSwgYWNjKTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgIH0sIHt9KVxyXG4gICAgICApXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=