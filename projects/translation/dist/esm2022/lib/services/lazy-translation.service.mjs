import { inject } from '@angular/core';
import { CamBaseStrapiService } from '@ta/server';
import { map } from 'rxjs';
import { GET_TRANSLATIONS } from './queries';
import { CamTranslationRegistryService } from './translation-registry.service';
export class CamLazyTranslationService extends CamBaseStrapiService {
    get id() {
        return this._id;
    }
    constructor(id, isApp = false) {
        super();
        this._registry = inject(CamTranslationRegistryService);
        this._id = '';
        this._isApp = false;
        this._id = id;
        this._isApp = isApp;
        this._registry.register(this);
    }
    static getInstance() {
        return inject(this);
    }
    getTranslation(lang) {
        return this._strapiService.fetchQueryList$(GET_TRANSLATIONS(lang, this._id), 'translations').pipe(map(translations => translations.reduce((acc, translation) => {
            acc[(this._isApp ? '' : this._id + '.') + translation.key.trim()] = translation.value;
            return acc;
        }, {})), map(translations => Object.entries(translations).reduce((acc, [key, value]) => {
            const keys = key.split('.');
            keys.reduce((current, k, index) => {
                if (index === keys.length - 1) {
                    current[k] = value;
                }
                else {
                    current[k] = current[k] || {};
                }
                return current[k];
            }, acc);
            return acc;
        }, {})));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS10cmFuc2xhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXJ2aWNlcy9sYXp5LXRyYW5zbGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDbEQsT0FBTyxFQUFjLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUd2QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDN0MsT0FBTyxFQUFFLDZCQUE2QixFQUFnQixNQUFNLGdDQUFnQyxDQUFDO0FBRTdGLE1BQU0sT0FBZ0IseUJBQTBCLFNBQVEsb0JBQW9CO0lBQzFFLElBQUksRUFBRTtRQUNKLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNsQixDQUFDO0lBTUQsWUFBWSxFQUFVLEVBQUUsS0FBSyxHQUFHLEtBQUs7UUFDbkMsS0FBSyxFQUFFLENBQUM7UUFOTyxjQUFTLEdBQUcsTUFBTSxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFFM0QsUUFBRyxHQUFHLEVBQUUsQ0FBQztRQUNULFdBQU0sR0FBRyxLQUFLLENBQUM7UUFLckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVc7UUFDaEIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVNLGNBQWMsQ0FBQyxJQUFZO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQWMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQzVHLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUNqQixZQUFZLENBQUMsTUFBTSxDQUE4QixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsRUFBRTtZQUNwRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUM7WUFDdEYsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQ1AsRUFDRCxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FDakIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUN4RCxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzVCLElBQUksQ0FBQyxNQUFNLENBQTJCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDMUQsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztvQkFDOUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDckIsQ0FBQztxQkFBTSxDQUFDO29CQUNOLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNoQyxDQUFDO2dCQUNELE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUVSLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUNQLENBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgQ2FtQmFzZVN0cmFwaVNlcnZpY2UgfSBmcm9tICdAdGEvc2VydmVyJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgbWFwIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBUcmFuc2xhdGlvbiB9IGZyb20gJy4vZHRvL3RyYW5zbGF0aW9uJztcclxuaW1wb3J0IHsgR0VUX1RSQU5TTEFUSU9OUyB9IGZyb20gJy4vcXVlcmllcyc7XHJcbmltcG9ydCB7IENhbVRyYW5zbGF0aW9uUmVnaXN0cnlTZXJ2aWNlLCBJVHJhbnNsYXRpb24gfSBmcm9tICcuL3RyYW5zbGF0aW9uLXJlZ2lzdHJ5LnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhbUxhenlUcmFuc2xhdGlvblNlcnZpY2UgZXh0ZW5kcyBDYW1CYXNlU3RyYXBpU2VydmljZSBpbXBsZW1lbnRzIElUcmFuc2xhdGlvbiB7XHJcbiAgZ2V0IGlkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gIH1cclxuICBwcml2YXRlIHJlYWRvbmx5IF9yZWdpc3RyeSA9IGluamVjdChDYW1UcmFuc2xhdGlvblJlZ2lzdHJ5U2VydmljZSk7XHJcblxyXG4gIHByaXZhdGUgX2lkID0gJyc7XHJcbiAgcHJpdmF0ZSBfaXNBcHAgPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgaXNBcHAgPSBmYWxzZSkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLl9pZCA9IGlkO1xyXG4gICAgdGhpcy5faXNBcHAgPSBpc0FwcDtcclxuICAgIHRoaXMuX3JlZ2lzdHJ5LnJlZ2lzdGVyKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgcmV0dXJuIGluamVjdCh0aGlzKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRUcmFuc2xhdGlvbihsYW5nOiBzdHJpbmcpOiBPYnNlcnZhYmxlPG9iamVjdCB8IG51bGw+IHtcclxuICAgIHJldHVybiB0aGlzLl9zdHJhcGlTZXJ2aWNlLmZldGNoUXVlcnlMaXN0JDxUcmFuc2xhdGlvbj4oR0VUX1RSQU5TTEFUSU9OUyhsYW5nLCB0aGlzLl9pZCksICd0cmFuc2xhdGlvbnMnKS5waXBlKFxyXG4gICAgICBtYXAodHJhbnNsYXRpb25zID0+XHJcbiAgICAgICAgdHJhbnNsYXRpb25zLnJlZHVjZTx7IFtpbmRleDogc3RyaW5nXTogc3RyaW5nIH0+KChhY2MsIHRyYW5zbGF0aW9uKSA9PiB7XHJcbiAgICAgICAgICBhY2NbKHRoaXMuX2lzQXBwID8gJycgOiB0aGlzLl9pZCArICcuJykgKyB0cmFuc2xhdGlvbi5rZXkudHJpbSgpXSA9IHRyYW5zbGF0aW9uLnZhbHVlO1xyXG4gICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICB9LCB7fSlcclxuICAgICAgKSxcclxuICAgICAgbWFwKHRyYW5zbGF0aW9ucyA9PlxyXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHRyYW5zbGF0aW9ucykucmVkdWNlKChhY2MsIFtrZXksIHZhbHVlXSkgPT4ge1xyXG4gICAgICAgICAgY29uc3Qga2V5cyA9IGtleS5zcGxpdCgnLicpO1xyXG4gICAgICAgICAga2V5cy5yZWR1Y2U8eyBbaW5kZXg6IHN0cmluZ106IGFueSB9PigoY3VycmVudCwgaywgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICBjdXJyZW50W2tdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgY3VycmVudFtrXSA9IGN1cnJlbnRba10gfHwge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRba107XHJcbiAgICAgICAgICB9LCBhY2MpO1xyXG5cclxuICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgfSwge30pXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==