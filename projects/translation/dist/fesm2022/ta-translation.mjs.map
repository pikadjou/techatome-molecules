{"version":3,"file":"ta-translation.mjs","sources":["../../src/lib/services/translation-registry.service.ts","../../src/lib/abstract/abstractTranslationModule.ts","../../src/lib/services/translation.service.ts","../../src/lib/services/dto/feature.ts","../../src/lib/services/dto/translation.ts","../../src/lib/services/queries.ts","../../src/lib/services/lazy-translation.service.ts","../../src/lib/services/translation.loader.ts","../../src/lib/provider.ts","../../src/public-api.ts","../../src/ta-translation.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nexport interface ITranslation {\n  id: string;\n  getTranslation(lang: string): Observable<object | null>;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaTranslationRegistryService {\n  registered: ITranslation[] = [];\n  newRegistrationSubscription$ = new Subject();\n\n  constructor() {}\n\n  public register(register: ITranslation) {\n    this.registered.push(register);\n    this.newRegistrationSubscription$.next(null);\n  }\n\n  public getTranslations(lang: string) {\n    return this.registered.map(r => r.getTranslation(lang));\n  }\n}\n","import { inject } from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs';\n\nimport { ITranslation, TaTranslationRegistryService } from '../services/translation-registry.service';\n\n/**\n * @deprecated\n */\nexport abstract class TaAbstractTranslationModule implements ITranslation {\n  protected _registry = inject(TaTranslationRegistryService);\n\n  public id: string;\n  protected translation: BehaviorSubject<{ [index: string]: any }> = new BehaviorSubject({});\n\n  private _lang: { [index: string]: object };\n\n  constructor(id: string, lang: { en: object; fr: object; nl: object; es: object }) {\n    this.id = id;\n    this._lang = lang;\n    this._registry.register(this);\n  }\n\n  getTranslation(lang: string) {\n    this._addTranslation(this._lang[lang]);\n    return this.translation;\n  }\n\n  protected _addTranslation(obj: object): void {\n    const translation: { [index: string]: any } = {};\n    if (!translation[this.id]) {\n      translation[this.id] = {};\n    }\n    translation[this.id] = obj;\n\n    this.translation.next(translation);\n  }\n}\n","import { Inject, Injectable, Optional, inject } from '@angular/core';\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { debounceTime, mergeMap } from 'rxjs';\r\nimport { SessionStorage } from 'storage-manager-js';\r\n\r\nimport { TaTranslationRegistryService } from './translation-registry.service';\r\n\r\nexport const TRANSLATION_CONFIG = 'config_translation';\r\nexport interface ITranslationConfig {\r\n  default: string;\r\n  supportedLanguages: string[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaTranslationService {\r\n  public translateService = inject(TranslateService);\r\n  private _registry = inject(TaTranslationRegistryService);\r\n\r\n  constructor(\r\n    @Optional()\r\n    @Inject(TRANSLATION_CONFIG)\r\n    private _config: ITranslationConfig = {\r\n      default: 'fr',\r\n      supportedLanguages: ['fr'],\r\n    }\r\n  ) {\r\n    // this language will be used as a fallback when a translation isn't found in the current language\r\n    this.translateService.setDefaultLang(this._config.default);\r\n\r\n    // the lang to use, if the lang isn't available, it will use the current loader to get them\r\n    let lang: string = SessionStorage.get('lang') ?? this.translateService.getBrowserLang() ?? this._config.default;\r\n\r\n    if (!lang || !this._config.supportedLanguages.find(langId => langId === lang)) {\r\n      lang = this._config.default;\r\n    }\r\n    this.translateService.use(lang);\r\n    this._registry.newRegistrationSubscription$\r\n      .pipe(\r\n        debounceTime(100),\r\n        mergeMap(() => this.translateService.reloadLang(this.translateService.currentLang))\r\n        // tap(data => console.log('reload lang', data))\r\n      )\r\n      .subscribe({\r\n        next: translations =>\r\n          this.translateService.onTranslationChange.emit({ lang: this.translateService.currentLang, translations }),\r\n      });\r\n\r\n    this.translateService.onLangChange.subscribe(({ lang }) => {\r\n      if (!SessionStorage.has('lang')) {\r\n        SessionStorage.set('lang', lang);\r\n        return;\r\n      }\r\n\r\n      if (lang === SessionStorage.get('lang')) {\r\n        return;\r\n      }\r\n\r\n      SessionStorage.set('lang', lang);\r\n      location.reload();\r\n    });\r\n  }\r\n\r\n  public init() {}\r\n\r\n  public getLanguage(): string {\r\n    return this.translateService.currentLang;\r\n  }\r\n\r\n  public get(key: string | string[], interpolateParams?: Object) {\r\n    return this.translateService.get(key, interpolateParams);\r\n  }\r\n\r\n  public use(lang: string) {\r\n    return this.translateService.use(lang);\r\n  }\r\n}\r\n","import { BaseStrapi, GraphSchema, baseStrapiProps } from '@ta/server';\r\n\r\nexport interface Feature extends BaseStrapi {\r\n  key: string;\r\n}\r\nconst props: (keyof Feature)[] = ['key'];\r\n\r\nexport const featureProps = new GraphSchema<Feature>(props.concat(baseStrapiProps));\r\n","import { BaseStrapi, GraphSchema, baseStrapiProps } from '@ta/server';\r\n\r\nimport { Feature } from './feature';\r\n\r\nexport interface Translation extends BaseStrapi {\r\n  key: string;\r\n  feature: Feature;\r\n  value: string;\r\n}\r\nconst props: (keyof Translation)[] = ['key', 'feature', 'value'];\r\n\r\nexport const translationProps = new GraphSchema<Translation>(props.concat(baseStrapiProps));\r\n","import { Apollo_gql, GraphQueryPayload } from '@ta/server';\n\nimport { featureProps } from './dto/feature';\nimport { translationProps } from './dto/translation';\n\nexport function GET_TRANSLATIONS(locale: string, feature: string): GraphQueryPayload {\n  const filters = { feature: { key: { eq: feature } } };\n  return {\n    query: Apollo_gql`\n      query Translations($locale: I18NLocaleCode!, $filters: TranslationFiltersInput!) {\n        translations(locale: $locale, filters: $filters, pagination: { pageSize: 50000 }) {\n          ${translationProps.get('key')}\n          ${translationProps.get('value')}\n          ${translationProps.get('feature')} {\n            ${featureProps.get('key')}\n          }\n        }\n      }\n    `,\n    variables: {\n      locale: locale,\n      filters: filters,\n    },\n  };\n}\n","import { inject } from '@angular/core';\r\n\r\nimport { Observable, map } from 'rxjs';\r\n\r\nimport { TaBaseStrapiService } from '@ta/server';\r\n\r\nimport { Translation } from './dto/translation';\r\nimport { GET_TRANSLATIONS } from './queries';\r\nimport { ITranslation, TaTranslationRegistryService } from './translation-registry.service';\r\n\r\nexport abstract class TaLazyTranslationService extends TaBaseStrapiService implements ITranslation {\r\n  get id() {\r\n    return this._id;\r\n  }\r\n  private readonly _registry = inject(TaTranslationRegistryService);\r\n\r\n  private _id = '';\r\n  private _isApp = false;\r\n\r\n  constructor(id: string, isApp = false) {\r\n    super();\r\n\r\n    this._id = id;\r\n    this._isApp = isApp;\r\n    this._registry.register(this);\r\n  }\r\n\r\n  static getInstance() {\r\n    return inject(this);\r\n  }\r\n\r\n  public getTranslation(lang: string): Observable<object | null> {\r\n    return this._strapiService.fetchQueryList$<Translation>(GET_TRANSLATIONS(lang, this._id), 'translations').pipe(\r\n      map(translations =>\r\n        translations.reduce<{ [index: string]: string }>((acc, translation) => {\r\n          acc[(this._isApp ? '' : this._id + '.') + translation.key.trim()] = translation.value;\r\n          return acc;\r\n        }, {})\r\n      ),\r\n      map(translations =>\r\n        Object.entries(translations).reduce((acc, [key, value]) => {\r\n          const keys = key.split('.');\r\n          keys.reduce<{ [index: string]: any }>((current, k, index) => {\r\n            if (index === keys.length - 1) {\r\n              current[k] = value;\r\n            } else {\r\n              current[k] = current[k] || {};\r\n            }\r\n            return current[k];\r\n          }, acc);\r\n\r\n          return acc;\r\n        }, {})\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { inject } from '@angular/core';\r\n\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { Observable, forkJoin, map } from 'rxjs';\r\n\r\nimport { TaTranslationRegistryService } from './translation-registry.service';\r\n\r\nexport class TaTranslationLoader implements TranslateLoader {\r\n  private registry = inject(TaTranslationRegistryService);\r\n  constructor() {}\r\n\r\n  getTranslation(lang: string): Observable<object> {\r\n    return forkJoin([...this.registry.getTranslations(lang)]).pipe(\r\n      map(translations =>\r\n        translations.reduce<object>((acc, translation) => {\r\n          if (!translation) {\r\n            return acc;\r\n          }\r\n          return this._merge(acc, translation);\r\n        }, {})\r\n      )\r\n    );\r\n  }\r\n\r\n  private _merge(current: object, additionalTranslation: object): object {\r\n    return this._mergeDeep(current, additionalTranslation);\r\n  }\r\n\r\n  /**\r\n   * Simple object check.\r\n   * @param item Object\r\n   */\r\n  private _isObject(item: object | undefined): boolean {\r\n    return !!(item && typeof item === 'object' && !Array.isArray(item));\r\n  }\r\n\r\n  /**\r\n   * Deep merge two objects.\r\n   * @param target Object\r\n   * @param ...sources objects\r\n   */\r\n  private _mergeDeep(target: { [key: string]: any }, ...sources: { [key: string]: any }[]): { [key: string]: any } {\r\n    if (!sources.length) {\r\n      return target;\r\n    }\r\n    const source = sources.shift();\r\n    if (this._isObject(target) && this._isObject(source)) {\r\n      for (const key in source) {\r\n        if (this._isObject(source[key])) {\r\n          if (!target[key]) {\r\n            Object.assign(target, { [key]: {} });\r\n          }\r\n          this._mergeDeep(target[key], source[key]);\r\n        } else {\r\n          Object.assign(target, { [key]: source[key] });\r\n        }\r\n      }\r\n    }\r\n\r\n    return this._mergeDeep(target, ...sources);\r\n  }\r\n}\r\n","import { APP_INITIALIZER, LOCALE_ID, Provider } from '@angular/core';\r\n\r\nimport { TranslateLoader, provideTranslateService } from '@ngx-translate/core';\r\n\r\nimport { TaTranslationLoader } from './services/translation.loader';\r\nimport { TRANSLATION_CONFIG, TaTranslationService } from './services/translation.service';\r\n\r\nexport function HttpLoaderFactory() {\r\n  return new TaTranslationLoader();\r\n}\r\nexport function initTranslation(service: TaTranslationService) {\r\n  const fn = () => service.init();\r\n  return fn;\r\n}\r\n\r\nexport const provideTranslation = (data: { default: string; supportedLanguages: string[] }): Provider => [\r\n  provideTranslateService({\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useClass: TaTranslationLoader,\r\n    },\r\n  }),\r\n  {\r\n    provide: LOCALE_ID,\r\n    deps: [TaTranslationService],\r\n    useFactory: (TranslationService: TaTranslationService) => TranslationService.getLanguage(),\r\n  },\r\n  {\r\n    provide: APP_INITIALIZER,\r\n    useFactory: initTranslation,\r\n    deps: [TaTranslationService],\r\n    multi: true,\r\n  },\r\n  {\r\n    provide: TRANSLATION_CONFIG,\r\n    useValue: {\r\n      default: data.default,\r\n      supportedLanguages: data.supportedLanguages,\r\n    },\r\n  },\r\n];\r\n","/*\n * Public API Surface of translation\n */\nexport { TranslateDirective, TranslatePipe } from '@ngx-translate/core';\n\nexport * from './lib/abstract/abstractTranslationModule';\nexport * from './lib/services/translation.service';\nexport * from './lib/services/translation-registry.service';\n\nexport * from './lib/services/lazy-translation.service';\n\nexport * from './lib/provider';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["props"],"mappings":"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"}